This is lilypond-notation.info, produced by makeinfo version 6.0 from
notation.texi.

Copyright © 1998–2015 by the authors.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections.  A copy of the license is
     included in the section entitled “GNU Free Documentation License”.


File: lilypond-notation.info,  Node: Page breaking,  Prev: Line breaking,  Up: Breaks

4.3.2 Page breaking
-------------------

This section describes the different page breaking methods, and how to
modify them.

* Menu:

* Manual page breaking::
* Optimal page breaking::
* Minimal page breaking::
* One-line page breaking::
* One-line-auto-height page breaking::
* Optimal page turning::


File: lilypond-notation.info,  Node: Manual page breaking,  Next: Optimal page breaking,  Up: Page breaking

Manual page breaking
....................

The default page breaking may be overridden by inserting ‘\pageBreak’ or
‘\noPageBreak’ commands.  These commands are analogous to ‘\break’ and
‘\noBreak’.  They should be inserted at a bar line.  These commands
force and forbid a page-break from happening at that bar line.  Of
course, the ‘\pageBreak’ command also forces a line break.

   The ‘\pageBreak’ and ‘\noPageBreak’ commands may also be inserted at
top-level, between scores and top-level markups.

   Within a score, automatic page breaks are prevented within music
lying between ‘\autoPageBreaksOff’ and ‘\autoPageBreaksOn’ commands.
Manual page breaks are unaffected by these commands.

   There are also analogous settings to ‘ragged-right’ and ‘ragged-last’
which have the same effect on vertical spacing.  If ‘ragged-bottom’ is
set to ‘#t’ the systems will not be justified vertically.  When
‘ragged-last-bottom’ is set to ‘#t’, as it is by default, empty space is
allowed at the bottom of the final page (or the final page in each
‘\bookpart’).  See *note Fixed vertical spacing ‘\paper’ variables:
Fixed vertical spacing paper variables.

   Page breaks are computed by the ‘page-breaking’ function.  LilyPond
provides several algorithms for computing page breaks, including
‘ly:optimal-breaking’, ‘ly:page-turn-breaking’ and
‘ly:minimal-breaking’.  The default is ‘ly:optimal-breaking’, but the
value can be changed in the ‘\paper’ block:

     \paper {
       page-breaking = #ly:page-turn-breaking
     }

   When a book has many scores and pages, the page breaking problem may
be difficult to solve, requiring large processing time and memory.  To
ease the page breaking process, ‘\bookpart’ blocks are used to divide
the book into several parts: the page breaking occurs separately on each
part.  Different page breaking functions may also be used in different
book parts.

     \bookpart {
       \header {
         subtitle = "Preface"
       }
       \paper {
          %% In a part consisting mostly of text,
          %% ly:minimal-breaking may be preferred
          page-breaking = #ly:minimal-breaking
       }
       \markup { … }
       …
     }
     \bookpart {
       %% In this part, consisting of music, the default optimal
       %% page breaking function is used.
       \header {
         subtitle = "First movement"
       }
       \score { … }
       …
     }

Predefined commands
...................

‘\pageBreak’, ‘\noPageBreak’, ‘\autoPageBreaksOn’, ‘\autoPageBreaksOff’.

See also
........

   Notation Reference: *note paper variables for page breaking::.

   Snippets: *note (lilypond-snippets)Spacing::.

Known issues and warnings
.........................

The ‘\once’ prefix is ineffective with ‘\autoPageBreaksOn’ and
‘\autoPageBreaksOff’.  If auto page breaking is off and is then turned
on to permit a page break, it must remain on for a few bars (the precise
number of bars depends on the score) before being turned off, else the
opportunity to break the page will not be taken.


File: lilypond-notation.info,  Node: Optimal page breaking,  Next: Minimal page breaking,  Prev: Manual page breaking,  Up: Page breaking

Optimal page breaking
.....................

The ‘ly:optimal-breaking’ function is LilyPond’s default method of
determining page breaks.  It attempts to find a page breaking that
minimizes cramping and stretching, both horizontally and vertically.
Unlike ‘ly:page-turn-breaking’, it has no concept of page turns.

See also
........

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Minimal page breaking,  Next: One-line page breaking,  Prev: Optimal page breaking,  Up: Page breaking

Minimal page breaking
.....................

The ‘ly:minimal-breaking’ function performs minimal computations to
calculate the page breaking: it fills a page with as many systems as
possible before moving to the next one.  Thus, it may be preferred for
scores with many pages, where the other page breaking functions could be
too slow or memory demanding, or a lot of texts.  It is enabled using:

     \paper {
       page-breaking = #ly:minimal-breaking
     }

See also
........

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: One-line page breaking,  Next: One-line-auto-height page breaking,  Prev: Minimal page breaking,  Up: Page breaking

One-line page breaking
......................

The ‘ly:one-line-breaking’ function is a special-purpose page breaking
algorithm that puts each score on its own page, and on a single line.
No titles or margins are typeset; only the score is displayed.

   The page width is adjusted so that the longest score fits on one
line.  In particular, ‘paper-width’, ‘line-width’ and ‘indent’ variables
in the ‘\paper’ block are ignored, although ‘left-margin’ and
‘right-margin’ are still honored.  The height of the page is left
unmodified.


File: lilypond-notation.info,  Node: One-line-auto-height page breaking,  Next: Optimal page turning,  Prev: One-line page breaking,  Up: Page breaking

One-line-auto-height page breaking
..................................

The ‘ly:one-line-auto-height-breaking’ function works just like
‘ly:one-line-breaking’ except the page height is automatically modified
to fit the height of the music.  Specifically, the ‘paper-height’
variable in the ‘\paper’ block is set so that it spans the height of the
tallest score plus the ‘top-margin’ and ‘bottom-margin’.

   Note that the ‘top-system-spacing’ setting will affect the vertical
position of the music.  Set it to ‘##f’ in a paper block to simply place
the music between the top and bottom margins.


File: lilypond-notation.info,  Node: Optimal page turning,  Prev: One-line-auto-height page breaking,  Up: Page breaking

Optimal page turning
....................

Often it is necessary to find a page breaking configuration so that
there is a rest at the end of every second page.  This way, the musician
can turn the page without having to miss notes.  The
‘ly:page-turn-breaking’ function attempts to find a page breaking
minimizing cramping and stretching, but with the additional restriction
that it is only allowed to introduce page turns in specified places.

   There are two steps to using this page breaking function.  First, you
must enable it in the ‘\paper’ block, as explained in *note Page
breaking::.  Then you must tell the function where you would like to
allow page breaks.

   There are two ways to achieve the second step.  First, you can
specify each potential page turn manually, by inserting ‘\allowPageTurn’
into your input file at the appropriate places.

   If this is too tedious, you can add a ‘Page_turn_engraver’ to a Staff
or Voice context.  The ‘Page_turn_engraver’ will scan the context for
sections without notes (note that it does not scan for rests; it scans
for the absence of notes.  This is so that single-staff polyphony with
rests in one of the parts does not throw off the ‘Page_turn_engraver’).
When it finds a sufficiently long section without notes, the
‘Page_turn_engraver’ will insert an ‘\allowPageTurn’ at the final bar
line in that section, unless there is a ‘special’ bar line (such as a
double bar), in which case the ‘\allowPageTurn’ will be inserted at the
final ‘special’ bar line in the section.

   The ‘Page_turn_engraver’ reads the context property
‘minimumPageTurnLength’ to determine how long a note-free section must
be before a page turn is considered.  The default value for
‘minimumPageTurnLength’ is ‘(ly:make-moment 1/1)’.  If you want to
disable page turns, set it to something ‘very large’.

     \new Staff \with { \consists "Page_turn_engraver" }
     {
       a4 b c d |
       R1 | % a page turn will be allowed here
       a4 b c d |
       \set Staff.minimumPageTurnLength = #(ly:make-moment 5/2)
       R1 | % a page turn will not be allowed here
       a4 b r2 |
       R1*2 | % a page turn will be allowed here
       a1
     }

   When using volta repeats, the ‘Page_turn_engraver’ will only allow a
page turn during the repeat if there is enough time at the beginning and
end of the repeat to turn the page back.  If the repeat is too short
then the ‘Page_turn_engraver’ can be used to _disable_ page turns by
setting an appropriate value for the context property
‘minimumRepeatLengthForPageTurn’.  In this case the ‘Page_turn_engraver’
will only allows turns in repeats whose duration is longer than the
value specified.

   The page turning commands, ‘\pageTurn’, ‘\noPageTurn’ and
‘\allowPageTurn’, may also be used at top-level, in top-level markups
and between scores.

Predefined commands
...................

‘\pageTurn’, ‘\noPageTurn’, ‘\allowPageTurn’.

See also
........

   Notation Reference: *note paper variables for line breaking::.

   Snippets: *note (lilypond-snippets)Spacing::.

Known issues and warnings
.........................

Use only one ‘Page_turn_engraver’ per score.  If there are more, they
will interfere with each other.

See also
........

   Notation Reference: *note Vertical spacing::.

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Vertical spacing,  Next: Horizontal spacing,  Prev: Breaks,  Up: Spacing issues

4.4 Vertical spacing
====================

Vertical spacing is controlled by three things: the amount of space
available (i.e., paper size and margins), the amount of space between
systems, and the amount of space between staves inside a system.

* Menu:

* Flexible vertical spacing within systems::
* Explicit staff and system positioning::
* Vertical collision avoidance::


File: lilypond-notation.info,  Node: Flexible vertical spacing within systems,  Next: Explicit staff and system positioning,  Up: Vertical spacing

4.4.1 Flexible vertical spacing within systems
----------------------------------------------

Three separate mechanisms control the flexible vertical spacing within
systems, one for each of the following categories:

   • _ungrouped staves_,

   • _grouped staves_ (staves within a staff-group such as ‘ChoirStaff’,
     etc.), and

   • _non-staff lines_ (such as ‘Lyrics’, ‘ChordNames’, etc.).

   The height of each system is determined in two steps.  First, all of
the staves are spaced according to the amount of space available.  Then,
the non-staff lines are distributed between the staves.

   Note that the spacing mechanisms discussed in this section only
control the vertical spacing of staves and non-staff lines within
individual systems.  The vertical spacing between separate systems,
scores, markups, and margins is controlled by ‘\paper’ variables, which
are discussed in *note Flexible vertical spacing ‘\paper’ variables:
Flexible vertical spacing paper variables.

* Menu:

* Within-system spacing properties::
* Spacing of ungrouped staves::
* Spacing of grouped staves::
* Spacing of non-staff lines::


File: lilypond-notation.info,  Node: Within-system spacing properties,  Next: Spacing of ungrouped staves,  Up: Flexible vertical spacing within systems

Within-system spacing properties
................................

The within-system vertical spacing mechanisms are controlled by two sets
of grob properties.  The first set is associated with the
‘VerticalAxisGroup’ grob, which is created by all staves and non-staff
lines.  The second set is associated with the ‘StaffGrouper’ grob, which
can be created by staff-groups, but only if explicitly called.  These
properties are described individually at the end of this section.

   The names of these properties (except for ‘staff-affinity’) follow
the format ‘ITEM1-ITEM2-spacing’, where ‘ITEM1’ and ‘ITEM2’ are the
items to be spaced.  Note that ‘ITEM2’ is not necessarily below ‘ITEM1’;
for example, ‘nonstaff-relatedstaff-spacing’ will measure upwards from
the non-staff line if ‘staff-affinity’ is ‘UP’.

   Each distance is measured between the _reference points_ of the two
items.  The reference point for a staff is the vertical center of its
‘StaffSymbol’ (i.e.  the middle line if ‘line-count’ is odd; the middle
space if ‘line-count’ is even).  The reference points for individual
non-staff lines are given in the following table:

Non-staff line   Reference point
-----------------------------------
‘ChordNames’     baseline
‘NoteNames’      baseline
‘Lyrics’         baseline
‘Dynamics’       mid-height of
                 ‘m’
‘FiguredBass’    highest point
‘FretBoards’     top line

   In the following image, horizontal lines indicate the positions of
these reference points:

 [image src="" alt="[image of music]" text="image of music" ]

   Each of the vertical spacing grob properties (except
‘staff-affinity’) uses the same alist structure as the ‘\paper’ spacing
variables discussed in *note Flexible vertical spacing ‘\paper’
variables: Flexible vertical spacing paper variables.  Specific methods
for modifying alists are discussed in *note Modifying alists::.  Grob
properties should be adjusted with an ‘\override’ inside a ‘\score’ or
‘\layout’ block, and not inside a ‘\paper’ block.

   The following example demonstrates the two ways these alists can be
modified.  The first declaration updates one key-value individually, and
the second completely re-defines the property:

     \new Staff \with {
       \override VerticalAxisGroup.default-staff-staff-spacing.basic-distance = #10
     } { … }

     \new Staff \with {
       \override VerticalAxisGroup.default-staff-staff-spacing =
         #'((basic-distance . 10)
            (minimum-distance . 9)
            (padding . 1)
            (stretchability . 10))
     } { … }

   To change any spacing settings globally, put them in the ‘\layout’
block:

     \layout {
       \context {
         \Staff
         \override VerticalAxisGroup.default-staff-staff-spacing.basic-distance = #10
       }
     }

   Standard settings for the vertical spacing grob properties are listed
in *note (lilypond-internals)VerticalAxisGroup:: and *note
(lilypond-internals)StaffGrouper::.  Default overrides for specific
types of non-staff lines are listed in the relevant context descriptions
in *note (lilypond-internals)Contexts::.

Properties of the ‘VerticalAxisGroup’ grob
..........................................

‘VerticalAxisGroup’ properties are typically adjusted with an
‘\override’ at the ‘Staff’ level (or equivalent).

‘staff-staff-spacing’

     Used to determine the distance between the current staff and the
     staff just below it in the same system, even if one or more
     non-staff lines (such as ‘Lyrics’) are placed between the two
     staves.  Does not apply to the bottom staff of a system.

     Initially, the ‘staff-staff-spacing’ of a ‘VerticalAxisGroup’ is a
     Scheme function that applies the properties of the ‘StaffGrouper’
     if the staff is part of a group, or the
     ‘default-staff-staff-spacing’ of the staff otherwise.  This allows
     staves to be spaced differently when they are grouped.  For uniform
     spacing regardless of grouping, this function may be replaced by a
     flexible-spacing alist, using the complete-redefinition form of
     override shown above.

‘default-staff-staff-spacing’
     A flexible-spacing alist defining the ‘staff-staff-spacing’ used
     for ungrouped staves, unless ‘staff-staff-spacing’ has been
     explicitly set with an ‘\override’.

‘staff-affinity’
     The direction of the staff to use for spacing the current non-staff
     line.  Choices are ‘UP’, ‘DOWN’, and ‘CENTER’.  If ‘CENTER’, the
     non-staff line will be placed equidistant between the two nearest
     staves on either side, unless collisions or other spacing
     constraints prevent this.  Adjacent non-staff lines should have
     non-increasing ‘staff-affinity’ from top to bottom, e.g.  a
     non-staff line set to ‘UP’ should not immediately follow one that
     is set to ‘DOWN’.  Non-staff lines at the top of a system should
     use ‘DOWN’; those at the bottom should use ‘UP’.  Setting
     ‘staff-affinity’ for a staff causes it to be treated as a non-staff
     line.  Setting ‘staff-affinity’ to ‘#f’ causes a non-staff line to
     be treated as a staff.  Setting ‘staff-affinity’ to ‘UP’, ‘CENTER’,
     or ‘DOWN’ causes a staff to be spaced as a non-staff line.

‘nonstaff-relatedstaff-spacing’
     The distance between the current non-staff line and the nearest
     staff in the direction of ‘staff-affinity’, if there are no
     non-staff lines between the two, and ‘staff-affinity’ is either
     ‘UP’ or ‘DOWN’.  If ‘staff-affinity’ is ‘CENTER’, then
     ‘nonstaff-relatedstaff-spacing’ is used for the nearest staves on
     _both_ sides, even if other non-staff lines appear between the
     current one and either of the staves.  This means that the
     placement of a non-staff line depends on both the surrounding
     staves and the surrounding non-staff lines.  Setting the
     ‘stretchability’ of one of these types of spacing to a small value
     will make that spacing dominate.  Setting the ‘stretchability’ to a
     large value will make that spacing have little effect.

‘nonstaff-nonstaff-spacing’
     The distance between the current non-staff line and the next
     non-staff line in the direction of ‘staff-affinity’, if both are on
     the same side of the related staff, and ‘staff-affinity’ is either
     ‘UP’ or ‘DOWN’.

‘nonstaff-unrelatedstaff-spacing’
     The distance between the current non-staff line and the staff in
     the opposite direction from ‘staff-affinity’, if there are no other
     non-staff lines between the two, and ‘staff-affinity’ is either
     ‘UP’ or ‘DOWN’.  This can be used, for example, to require a
     minimum amount of padding between a ‘Lyrics’ line and the staff to
     which it does not belong.

Properties of the ‘StaffGrouper’ grob
.....................................

‘StaffGrouper’ properties are typically adjusted with an ‘\override’ at
the ‘StaffGroup’ level (or equivalent).

‘staff-staff-spacing’
     The distance between consecutive staves within the current
     staff-group.  The ‘staff-staff-spacing’ property of an individual
     staff’s ‘VerticalAxisGroup’ grob can be overriden with different
     spacing settings for that staff.

‘staffgroup-staff-spacing’
     The distance between the last staff of the current staff-group and
     the staff just below it in the same system, even if one or more
     non-staff lines (such as ‘Lyrics’) exist between the two staves.
     Does not apply to the bottom staff of a system.  The
     ‘staff-staff-spacing’ property of an individual staff’s
     ‘VerticalAxisGroup’ grob can be overriden with different spacing
     settings for that staff.

See also
........

   Notation Reference: *note Flexible vertical spacing ‘\paper’
variables: Flexible vertical spacing paper variables, *note Modifying
alists::.

   Installed Files: ‘ly/engraver-init.ly’, ‘scm/define-grobs.scm’.

   Internals Reference: *note (lilypond-internals)Contexts::, *note
(lilypond-internals)VerticalAxisGroup::, *note
(lilypond-internals)StaffGrouper::.


File: lilypond-notation.info,  Node: Spacing of ungrouped staves,  Next: Spacing of grouped staves,  Prev: Within-system spacing properties,  Up: Flexible vertical spacing within systems

Spacing of ungrouped staves
...........................

_Staves_ (such as ‘Staff’, ‘DrumStaff’, ‘TabStaff’, etc.)  are contexts
that can contain one or more voice contexts, but cannot contain any
other staves.

   The following properties affect the spacing of _ungrouped_ staves:

   • ‘VerticalAxisGroup’ properties:
        • ‘default-staff-staff-spacing’
        • ‘staff-staff-spacing’

   These grob properties are described individually above; see *note
Within-system spacing properties::.

   Additional properties are involved for staves that are part of a
staff-group; see *note Spacing of grouped staves::.

   The following example shows how the ‘default-staff-staff-spacing’
property can affect the spacing of ungrouped staves.  The same overrides
applied to ‘staff-staff-spacing’ would have the same effect, but would
also apply in cases where the staves are combined in a group or groups.

     \layout {
       \context {
         \Staff
         \override VerticalAxisGroup.default-staff-staff-spacing =
           #'((basic-distance . 8)
              (minimum-distance . 7)
              (padding . 1))
       }
     }

     <<
       % The very low note here needs more room than 'basic-distance
       % can provide, so the distance between this staff and the next
       % is determined by 'padding.
       \new Staff { b,2 r | }

       % Here, 'basic-distance provides enough room, and there is no
       % need to compress the space (towards 'minimum-distance) to make
       % room for anything else on the page, so the distance between
       % this staff and the next is determined by 'basic-distance.
       \new Staff { \clef bass g2 r | }

       % By setting 'padding to a negative value, staves can be made to
       % collide.  The lowest acceptable value for 'basic-distance is 0.
       \new Staff \with {
         \override VerticalAxisGroup.default-staff-staff-spacing =
           #'((basic-distance . 3.5)
              (padding . -10))
       } { \clef bass g2 r | }
       \new Staff { \clef bass g2 r | }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

See also
........

   Installed Files: ‘scm/define-grobs.scm’.

   Snippets: *note (lilypond-snippets)Spacing::.

   Internals Reference: *note (lilypond-internals)VerticalAxisGroup::.


File: lilypond-notation.info,  Node: Spacing of grouped staves,  Next: Spacing of non-staff lines,  Prev: Spacing of ungrouped staves,  Up: Flexible vertical spacing within systems

Spacing of grouped staves
.........................

In orchestral and other large scores, it is common to place staves in
groups.  The space between groups is typically larger than the space
between staves of the same group.

   _Staff-groups_ (such as ‘StaffGroup’, ‘ChoirStaff’, etc.)  are
contexts that can contain one or more staves simultaneously.

   The following properties affect the spacing of staves inside
staff-groups:

   • ‘VerticalAxisGroup’ properties:
        • ‘staff-staff-spacing’
   • ‘StaffGrouper’ properties:
        • ‘staff-staff-spacing’
        • ‘staffgroup-staff-spacing’

   These grob properties are described individually above; see *note
Within-system spacing properties::.

   The following example shows how properties of the ‘StaffGrouper’ grob
can affect the spacing of grouped staves:

     \layout {
       \context {
         \Score
         \override StaffGrouper.staff-staff-spacing.padding = #0
         \override StaffGrouper.staff-staff-spacing.basic-distance = #1
       }
     }

     <<
       \new PianoStaff \with {
         \override StaffGrouper.staffgroup-staff-spacing.basic-distance = #20
       } <<
         \new Staff { c'1 }
         \new Staff { c'1 }
       >>

       \new StaffGroup <<
         \new Staff { c'1 }
         \new Staff { c'1 }
       >>
     >>
 [image src="" alt="[image of music]" text="image of music" ]

See also
........

   Installed Files: ‘scm/define-grobs.scm’.

   Snippets: *note (lilypond-snippets)Spacing::.

   Internals Reference: *note (lilypond-internals)VerticalAxisGroup::,
*note (lilypond-internals)StaffGrouper::.


File: lilypond-notation.info,  Node: Spacing of non-staff lines,  Prev: Spacing of grouped staves,  Up: Flexible vertical spacing within systems

Spacing of non-staff lines
..........................

_Non-staff lines_ (such as ‘Lyrics’, ‘ChordNames’, etc.)  are contexts
whose layout objects are engraved like staves (i.e.  in horizontal lines
within systems).  Specifically, non-staff lines are non-staff contexts
that contain the *note (lilypond-internals)Axis_group_engraver::.

   The following properties affect the spacing of non-staff lines:

   • ‘VerticalAxisGroup’ properties:
        • ‘staff-affinity’
        • ‘nonstaff-relatedstaff-spacing’
        • ‘nonstaff-nonstaff-spacing’
        • ‘nonstaff-unrelatedstaff-spacing’

   These grob properties are described individually above; see *note
Within-system spacing properties::.

   The following example shows how the ‘nonstaff-nonstaff-spacing’
property can affect the spacing of consecutive non-staff lines.  Here,
by setting the ‘stretchability’ key to a very high value, the lyrics are
able to stretch much more than usual:

     \layout {
       \context {
         \Lyrics
         \override VerticalAxisGroup.nonstaff-nonstaff-spacing.stretchability = #1000
       }
     }

     \new StaffGroup
     <<
       \new Staff \with {
         \override VerticalAxisGroup.staff-staff-spacing = #'((basic-distance . 30))
       } { c'1 }
       \new Lyrics \with {
         \override VerticalAxisGroup.staff-affinity = #UP
       } \lyricmode { up }
       \new Lyrics \with {
         \override VerticalAxisGroup.staff-affinity = #CENTER
       } \lyricmode { center }
       \new Lyrics \with {
         \override VerticalAxisGroup.staff-affinity = #DOWN
       } \lyricmode { down }
       \new Staff { c'1 }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

See also
........

   Installed Files: ‘ly/engraver-init.ly’, ‘scm/define-grobs.scm’.

   Snippets: *note (lilypond-snippets)Spacing::.

   Internals Reference: *note (lilypond-internals)Contexts::, *note
(lilypond-internals)VerticalAxisGroup::.


File: lilypond-notation.info,  Node: Explicit staff and system positioning,  Next: Vertical collision avoidance,  Prev: Flexible vertical spacing within systems,  Up: Vertical spacing

4.4.2 Explicit staff and system positioning
-------------------------------------------

One way to understand the flexible vertical spacing mechanisms explained
above is as a collection of settings that control the amount of vertical
padding between staves and systems.

   It is possible to approach vertical spacing in a different way using
‘NonMusicalPaperColumn.line-break-system-details’.  While the flexible
vertical spacing mechanisms specify vertical padding,
‘NonMusicalPaperColumn.line-break-system-details’ can specify exact
vertical positions on the page.

   ‘NonMusicalPaperColumn.line-break-system-details’ accepts an
associative list of three different settings:

   • ‘X-offset’
   • ‘Y-offset’
   • ‘alignment-distances’

   Grob overrides, including the overrides for ‘NonMusicalPaperColumn’
below, can occur in any of three different places in an input file:

   • in the middle of note entry directly
   • in a ‘\context’ block
   • in the ‘\with’ block

   When we override ‘NonMusicalPaperColumn’, we use the usual
‘\override’ command in ‘\context’ blocks and in the ‘\with’ block.  On
the other hand, when we override ‘NonMusicalPaperColumn’ in the middle
of note entry, use the special ‘\overrideProperty’ command.  Here are
some example ‘NonMusicalPaperColumn’ overrides with the special
‘\overrideProperty’ command:

     \overrideProperty NonMusicalPaperColumn.line-break-system-details
       #'((X-offset . 20))

     \overrideProperty NonMusicalPaperColumn.line-break-system-details
       #'((Y-offset . 40))

     \overrideProperty NonMusicalPaperColumn.line-break-system-details
       #'((X-offset . 20)
          (Y-offset . 40))

     \overrideProperty NonMusicalPaperColumn.line-break-system-details
       #'((alignment-distances . (15)))

     \overrideProperty NonMusicalPaperColumn.line-break-system-details
       #'((X-offset . 20)
          (Y-offset . 40)
          (alignment-distances . (15)))

   To understand how each of these different settings work, we begin by
looking at an example that includes no overrides at all.

     \header { tagline = ##f }
     \paper { left-margin = 0\mm }
     \book {
       \score {
         <<
           \new Staff <<
             \new Voice {
               s1*5 \break
               s1*5 \break
               s1*5 \break
             }
             \new Voice { \repeat unfold 15 { c'4 c' c' c' } }
           >>
           \new Staff {
             \repeat unfold 15 { d'4 d' d' d' }
           }
         >>
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   This score isolates both line-breaking and page-breaking information
in a dedicated voice.  This technique of creating a breaks voice will
help keep layout separate from music entry as our example becomes more
complicated.  Also see *note Breaks::.

   By using explicit ‘\break’ commands, the music is divided into five
measures per line.  Vertical spacing is from LilyPond’s own defaults but
the vertical startpoint of each system is set explicitly using the
‘Y-offset’ pair in the ‘line-break-system-details’ attribute of the
‘NonMusicalPaperColumn’ grob:

     \header { tagline = ##f }
     \paper { left-margin = 0\mm }
     \book {
       \score {
         <<
           \new Staff <<
             \new Voice {
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 0))
               s1*5 \break
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 40))
               s1*5 \break
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 60))
               s1*5 \break
             }
             \new Voice { \repeat unfold 15 { c'4 c' c' c' } }
           >>
           \new Staff {
             \repeat unfold 15 { d'4 d' d' d' }
           }
         >>
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Note that ‘line-break-system-details’ takes an associative list of
potentially many values, but that we set only one value here.  Note,
too, that the ‘Y-offset’ property here determines the exact vertical
position on the page at which each new system will render.

   Now that we have set the vertical startpoint of each system
explicitly, we can also set the vertical distances between staves within
each system manually.  We do this using the ‘alignment-distances’
subproperty of ‘line-break-system-details’.

     \header { tagline = ##f }
     \paper { left-margin = 0\mm }
     \book {
       \score {
         <<
           \new Staff <<
             \new Voice {
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 20)
                    (alignment-distances . (10)))
               s1*5 \break
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 60)
                    (alignment-distances . (15)))
               s1*5 \break
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
               #'((Y-offset . 85)
                  (alignment-distances . (20)))
               s1*5 \break
             }
             \new Voice { \repeat unfold 15 { c'4 c' c' c' } }
           >>
           \new Staff {
             \repeat unfold 15 { d'4 d' d' d' }
           }
         >>
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Note that here we assign two different values to the
‘line-break-system-details’ attribute of the ‘NonMusicalPaperColumn’
grob.  Though the ‘line-break-system-details’ attribute alist accepts
many additional spacing parameters (including, for example, a
corresponding ‘X-offset’ pair), we need only set the ‘Y-offset’ and
‘alignment-distances’ pairs to control the vertical startpoint of every
system and every staff.  Finally, note that ‘alignment-distances’
specifies the vertical positioning of staves but not of staff groups.

     \header { tagline = ##f }
     \paper { left-margin = 0\mm }
     \book {
       \score {
         <<
           \new Staff <<
             \new Voice {
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 0)
                    (alignment-distances . (30 10)))
               s1*5 \break
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 60)
                    (alignment-distances . (10 10)))
               s1*5 \break
               \overrideProperty Score.NonMusicalPaperColumn.line-break-system-details
                 #'((Y-offset . 100)
                    (alignment-distances . (10 30)))
               s1*5 \break
             }
             \new Voice { \repeat unfold 15 { c'4 c' c' c' } }
           >>
           \new StaffGroup <<
             \new Staff { \repeat unfold 15 { d'4 d' d' d' } }
             \new Staff { \repeat unfold 15 { e'4 e' e' e' } }
           >>
         >>
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Some points to consider:

   • When using ‘alignment-distances’, lyrics and other non-staff lines
     do not count as a staff.

   • The units of the numbers passed to ‘X-offset’, ‘Y-offset’ and
     ‘alignment-distances’ are interpreted as multiples of the distance
     between adjacent staff lines.  Positive values move staves and
     lyrics up, negative values move staves and lyrics down.

   • Because the ‘NonMusicalPaperColumn.line-break-system-details’
     settings given here allow the positioning of staves and systems
     anywhere on the page, it is possible to violate paper or margin
     boundaries or even to print staves or systems on top of one
     another.  Reasonable values passed to these different settings will
     avoid this.

See also
........

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Vertical collision avoidance,  Prev: Explicit staff and system positioning,  Up: Vertical spacing

4.4.3 Vertical collision avoidance
----------------------------------

Intuitively, there are some objects in musical notation that belong to
the staff and there are other objects that should be placed outside the
staff.  Objects belonging outside the staff include things such as
rehearsal marks, text and dynamic markings (from now on, these will be
called outside-staff objects).  LilyPond’s rule for the vertical
placement of outside-staff objects is to place them as close to the
staff as possible but not so close that they collide with another
object.

   LilyPond uses the ‘outside-staff-priority’ property to determine
whether a grob is an outside-staff object: if ‘outside-staff-priority’
is a number, the grob is an outside-staff object.  In addition,
‘outside-staff-priority’ tells LilyPond in which order the objects
should be placed.

   First, LilyPond places all the objects that do not belong outside the
staff.  Then it sorts the outside-staff objects according to their
‘outside-staff-priority’ (in increasing order).  One by one, LilyPond
takes the outside-staff objects and places them so that they do not
collide with any objects that have already been placed.  That is, if two
outside-staff grobs are competing for the same space, the one with the
lower ‘outside-staff-priority’ will be placed closer to the staff.

   A listing of outside-staff-priorities may be found in *note
(lilypond-learning)The outside-staff-priority property::.

     \relative c'' {
       c4_"Text"\pp
       r2.
       \once \override TextScript.outside-staff-priority = #1
       c4_"Text"\pp % this time the text will be closer to the staff
       r2.
       % by setting outside-staff-priority to a non-number,
       % we disable the automatic collision avoidance
       \once \override TextScript.outside-staff-priority = ##f
       \once \override DynamicLineSpanner.outside-staff-priority = ##f
       c4_"Text"\pp % now they will collide
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The vertical padding around outside-staff objects can be controlled
with ‘outside-staff-padding’.

     \relative {
       \once \override TextScript.outside-staff-padding = #0
       a'4-"outside-staff-padding = #0"
       \once \override TextScript.outside-staff-padding = #3
       d-"outside-staff-padding = #3"
       c-"default outside-staff-padding"
       b-"default outside-staff-padding"
       R1
     }
 [image src="" alt="[image of music]" text="image of music" ]

   By default, outside-staff objects are placed so they avoid a
horizontal collision with previously-positioned grobs.  This can lead to
situations in which objects are placed close to each other horizontally.
As shown in the example below, setting
‘outside-staff-horizontal-padding’ increases the horizontal spacing
required, and in this case moves the text up to prevent it from getting
too close to the ledger lines.

     \relative {
       c''4^"Word" c c''2
       R1
       \once \override TextScript.outside-staff-horizontal-padding = #1
       c,,4^"Word" c c''2
     }
 [image src="" alt="[image of music]" text="image of music" ]

See also
........

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Horizontal spacing,  Next: Fitting music onto fewer pages,  Prev: Vertical spacing,  Up: Spacing issues

4.5 Horizontal spacing
======================

* Menu:

* Horizontal spacing overview::
* New spacing section::
* Changing horizontal spacing::
* Line width::
* Proportional notation::


File: lilypond-notation.info,  Node: Horizontal spacing overview,  Next: New spacing section,  Up: Horizontal spacing

4.5.1 Horizontal spacing overview
---------------------------------

The spacing engine translates differences in durations into stretchable
distances (‘springs’) of differing lengths.  Longer durations get more
space, shorter durations get less.  The shortest durations get a fixed
amount of space (which is controlled by ‘shortest-duration-space’ in the
*note (lilypond-internals)SpacingSpanner:: object).  The longer the
duration, the more space it gets: doubling a duration adds
‘spacing-increment’ of space to the note.

   For example, the following piece contains lots of half, quarter, and
8th notes; the eighth note is followed by 1 note head width (NHW). The
quarter note is followed by 2 NHW, the half by 3 NHW, etc.

     \relative c' {
       c2 c4. c8
       c4. c8 c4. c8
       c8 c c4 c c
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Normally, ‘spacing-increment’ is set to 1.2 staff space, which is
approximately the width of a note head, and ‘shortest-duration-space’ is
set to 2.0, meaning that the shortest note gets 2.4 staff space (2.0
times the ‘spacing-increment’) of horizontal space.  This space is
counted from the left edge of the symbol, so the shortest notes are
generally followed by one NHW of space.

   If one would follow the above procedure exactly, then adding a single
32nd note to a score that uses 8th and 16th notes, would widen up the
entire score a lot.  The shortest note is no longer a 16th, but a 32nd,
thus adding 1 NHW to every note.  To prevent this, the shortest duration
for spacing is not the shortest note in the score, but rather the one
which occurs most frequently.

   The most common shortest duration is determined as follows: in every
measure, the shortest duration is determined.  The most common shortest
duration is taken as the basis for the spacing, with the stipulation
that this shortest duration should always be equal to or shorter than an
8th note.

   These durations may also be customized.  If you set the
‘common-shortest-duration’ in *note
(lilypond-internals)SpacingSpanner::, then this sets the base duration
for spacing.  The maximum duration for this base (normally an 8th), is
set through ‘base-shortest-duration’.

   Notes that are even shorter than the common shortest note are
followed by a space that is proportional to their duration relative to
the common shortest note.  So if we were to add only a few 16th notes to
the example above, they would be followed by half a NHW:

     \relative { c''2 c4. c8 | c4. c16[ c] c4. c8 | c8 c c4 c c }
 [image src="" alt="[image of music]" text="image of music" ]

   As explained in the _Essay on automated music engraving_, stem
directions will influence spacing (see *note (lilypond-essay)Optical
spacing::) and can be adjusted using the ‘stem-spacing-correction’
property of the *note (lilypond-internals)NoteSpacing:: object (which
are generated for every *note (lilypond-internals)Voice:: context).

   The ‘StaffSpacing’ object (generated in *note
(lilypond-internals)Staff:: context) contains the same property for
controlling the stem/bar line spacing.

   The following example shows this; once with the default settings and
once with an exaggerated adjustment:

 [image src="" alt="[image of music]" text="image of music" ]

   Proportional notation is supported; see *note Proportional
notation::.

See also
........

   Essay on automated music engraving: *note (lilypond-essay)Optical
spacing::.

   Snippets: *note (lilypond-snippets)Spacing::.

   Internals Reference: *note (lilypond-internals)SpacingSpanner::,
*note (lilypond-internals)NoteSpacing::, *note
(lilypond-internals)StaffSpacing::, *note
(lilypond-internals)NonMusicalPaperColumn::.

Known issues and warnings
.........................

There is no convenient mechanism to manually override spacing.  The
following work-around may be used to insert extra space into a score,
adjusting the padding value as necessary.

      \override Score.NonMusicalPaperColumn.padding = #10

   No work-around exists for decreasing the amount of space.


File: lilypond-notation.info,  Node: New spacing section,  Next: Changing horizontal spacing,  Prev: Horizontal spacing overview,  Up: Horizontal spacing

4.5.2 New spacing section
-------------------------

New sections with different spacing parameters can be started with the
‘newSpacingSection’ command.  This is useful for sections with different
notions of ‘long’ and ‘short’ notes.  The ‘\newSpacingSection’ command
creates a new ‘SpacingSpanner’ object at that musical moment.

   In the following example the time signature change introduces a new
section, and the 16ths notes are automatically spaced slightly wider
apart.

     \relative c' {
       \time 2/4
       c4 c8 c
       c8 c c4 c16[ c c8] c4
       \newSpacingSection
       \time 4/16
       c16[ c c8]
     }
 [image src="" alt="[image of music]" text="image of music" ]

   If the automatic spacing adjustments do not give the required
spacing, manual ‘\override’s may be applied to its properties.  These
must be applied at the same musical moment as the ‘\newSpacingSection’
command itself and will then affect the spacing of all the following
music until the properties are changed in a new spacing section, for
example:

     \relative c' {
       \time 4/16
       c16[ c c8]
       \newSpacingSection
       \override Score.SpacingSpanner.spacing-increment = #2
       c16[ c c8]
       \newSpacingSection
       \revert Score.SpacingSpanner.spacing-increment
       c16[ c c8]
     }
 [image src="" alt="[image of music]" text="image of music" ]

See also
........

   Snippets: *note (lilypond-snippets)Spacing::.

   Internals Reference: *note (lilypond-internals)SpacingSpanner::.


File: lilypond-notation.info,  Node: Changing horizontal spacing,  Next: Line width,  Prev: New spacing section,  Up: Horizontal spacing

4.5.3 Changing horizontal spacing
---------------------------------

Horizontal spacing may be altered with the ‘base-shortest-duration’
property.  Here we compare the same music; once without altering the
property, and then altered.  Larger values of ‘ly:make-moment’ will
produce smaller music.  Note that ‘ly:make-moment’ constructs a
duration, so ‘1 4’ is a longer duration than ‘1 16’.

\score {
  \relative {
    g'4 e e2 | f4 d d2 | c4 d e f | g4 g g2 |
    g4 e e2 | f4 d d2 | c4 e g g | c,1 |
    d4 d d d | d4 e f2 | e4 e e e | e4 f g2 |
    g4 e e2 | f4 d d2 | c4 e g g | c,1 |
  }
}
 [image src="" alt="[image of music]" text="image of music" ]

\score {
  \relative {
    g'4 e e2 | f4 d d2 | c4 d e f | g4 g g2 |
    g4 e e2 | f4 d d2 | c4 e g g | c,1 |
    d4 d d d | d4 e f2 | e4 e e e | e4 f g2 |
    g4 e e2 | f4 d d2 | c4 e g g | c,1 |
  }
  \layout {
    \context {
      \Score
      \override SpacingSpanner.base-shortest-duration = #(ly:make-moment 1/16)
    }
  }
}
 [image src="" alt="[image of music]" text="image of music" ]

Selected Snippets
.................

By default, spacing in tuplets depends on various non-duration factors
(such as accidentals, clef changes, etc).  To disregard such symbols and
force uniform equal-duration spacing, use
‘Score.SpacingSpanner.uniform-stretching’.  This property can only be
changed at the beginning of a score,

     \score {
       <<
         \new Staff {
           \tuplet 5/4 { c8 c c c c } c8 c c c
         }
         \new Staff {
           c8 c c c \tuplet 5/4 { c8 c c c c }
         }
       >>
       \layout {
         \context {
           \Score
           \override SpacingSpanner.uniform-stretching = ##t
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   When ‘strict-note-spacing’ is set, notes are spaced without regard
for clefs, bar lines, and grace notes,

     \override Score.SpacingSpanner.strict-note-spacing = ##t
     \new Staff \relative {
       c''8[ c \clef alto c \grace { c16 c } c8 c c]  c32[ c] }
 [image src="" alt="[image of music]" text="image of music" ]

See also
........

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Line width,  Next: Proportional notation,  Prev: Changing horizontal spacing,  Up: Horizontal spacing

4.5.4 Line width
----------------

The most basic settings influencing the spacing are ‘indent’ and
‘line-width’.  They are set in the ‘\layout’ block.  They control the
indentation of the first line of music, and the lengths of the lines.

   If ‘ragged-right’ is set to true in the ‘\layout’ block, then systems
ends at their natural horizontal length, instead of being spread
horizontally to fill the whole line.  This is useful for short
fragments, and for checking how tight the natural spacing is.  The
normal default setting is false, but if the score has only one system
the default value is true.

   The option ‘ragged-last’ is similar to ‘ragged-right’, but only
affects the last line of the piece.  No restrictions are put on that
line.  The result is similar to formatting text paragraphs.  In a
paragraph, the last line simply takes its natural horizontal length.

     \layout {
       indent = #0
       line-width = #150
       ragged-last = ##t
     }

See also
........

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Proportional notation,  Prev: Line width,  Up: Horizontal spacing

4.5.5 Proportional notation
---------------------------

LilyPond supports proportional notation, a type of horizontal spacing in
which each note consumes an amount of horizontal space exactly
equivalent to its rhythmic duration.  This type of proportional spacing
is comparable to horizontal spacing on top of graph paper.  Some late
20th- and early 21st-century scores use proportional notation to clarify
complex rhythmic relationships or to facilitate the placement of
timelines or other graphics directly in the score.

   LilyPond supports five different settings for proportional notation,
which may be used together or alone:

   • ‘proportionalNotationDuration’
   • ‘uniform-stretching’
   • ‘strict-note-spacing’
   • ‘\remove "Separating_line_group_engraver"’
   • ‘\override PaperColumn.used = ##t’

   In the examples that follow, we explore these five different
proportional notation settings and examine how these settings interact.

   We start with the following one-measure example, which uses classical
spacing with ragged-right turned on.

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
       >>
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Notice that the half note which begins the measure takes up far less
than half of the horizontal space of the measure.  Likewise, the
sixteenth notes and sixteenth-note quintuplets (or twentieth notes)
which end the measure together take up far more than half the horizontal
space of the measure.

   In classical engraving, this spacing may be exactly what we want
because we can borrow horizontal space from the half note and conserve
horizontal space across the measure as a whole.

   On the other hand, if we want to insert a measured timeline or other
graphic above or below our score, we need proportional notation.  We
turn proportional notation on with the proportionalNotationDuration
setting.

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
       >>
      \layout {
         \context {
           \Score
           proportionalNotationDuration = #(ly:make-moment 1/20)
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The half note at the beginning of the measure and the faster notes in
the second half of the measure now occupy equal amounts of horizontal
space.  We could place a measured timeline or graphic above or below
this example.

   The ‘proportionalNotationDuration’ setting is a context setting that
lives in ‘Score’.  Remember that context settings can appear in one of
three locations within our input file – in a ‘\with’ block, in a
‘\context’ block, or directly in music entry preceded by the ‘\set’
command.  As with all context settings, users can pick which of the
three different locations they would like to set
‘proportionalNotationDuration’ in to.

   The ‘proportionalNotationDuration’ setting takes a single argument,
which is the reference duration against that all music will be spaced.
The LilyPond Scheme function ‘make-moment’ takes two arguments – a
numerator and denominator which together express some fraction of a
whole note.  The call ‘(ly:make-moment 1/20)’ therefore produces a
reference duration of a twentieth note.  Values such as ‘(ly:make-moment
1/16)’, ‘(ly:make-moment 1/8)’, and ‘(ly:make-moment 3/97)’ are all
possible as well.

   How do we select the right reference duration to pass to
‘proportionalNotationDuration’?  Usually by a process of trial and
error, beginning with a duration close to the fastest (or smallest)
duration in the piece.  Smaller reference durations space music loosely;
larger reference durations space music tightly.

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
       >>
       \layout {
         \context {
           \Score
           proportionalNotationDuration = #(ly:make-moment 1/8)
         }
       }
     }

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
       >>
       \layout {
         \context {
           \Score
           proportionalNotationDuration = #(ly:make-moment 1/16)
         }
       }
     }

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
       >>
       \layout {
         \context {
           \Score
           proportionalNotationDuration = #(ly:make-moment 1/32)
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Note that too large a reference duration – such as the eighth note,
above – spaces music too tightly and can cause note head collisions.
Also that proportional notation in general takes up more horizontal
space than classical spacing.  Proportional spacing provides rhythmic
clarity at the expense of horizontal space.

   Next we examine how to optimally space overlapping tuplets.

   We start by examining what happens to our original example, with
classical spacing, when we add a second staff with a different type of
tuplet.

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
         \new RhythmicStaff {
           \tuplet 9/8 { c8 8 8 8 8 8 8 8 8 }
         }
       >>
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The spacing is bad because the evenly spaced notes of the bottom
staff do not stretch uniformly.  Classical engravings include very few
complex triplets and so classical engraving rules can generate this type
of result.  Setting ‘proportionalNotationDuration’ fixes this.

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
         \new RhythmicStaff {
           \tuplet 9/8 { c8 8 8 8 8 8 8 8 8 }
         }
       >>
       \layout {
         \context {
           \Score
           proportionalNotationDuration = #(ly:make-moment 1/20)
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   But if we look very carefully we can see that notes of the second
half of the 9-tuplet space ever so slightly more widely than the notes
of the first half of the 9-tuplet.  To ensure uniform stretching, we
turn on ‘uniform-stretching’, which is a property of ‘SpacingSpanner’.

     \score {
       <<
         \new RhythmicStaff {
           c2 16 16 16 16 \tuplet 5/4 { 16 16 16 16 16 }
         }
         \new RhythmicStaff {
           \tuplet 9/8 { c8 8 8 8 8 8 8 8 8 }
         }
       >>
       \layout {
         \context {
           \Score
           proportionalNotationDuration = #(ly:make-moment 1/20)
           \override SpacingSpanner.uniform-stretching = ##t
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Our two-staff example now spaces exactly, our rhythmic relationships
are visually clear, and we can include a measured timeline or graphic if
we want.

   Note that the LilyPond’s proportional notation package expects that
all proportional scores set the SpacingSpanner’s ’uniform-stretching
attribute to ##t.  Setting proportionalNotationDuration without also
setting the SpacingSpanner’s ’uniform-stretching attribute to ##t will,
for example, cause Skips to consume an incorrect amount of horizontal
space.

   The SpacingSpanner is an abstract grob that lives in the Score
context.  As with our settings of proportionalNotationDuration,
overrides to the SpacingSpanner can occur in any of three different
places in our input file – in the Score \with block, in a Score \context
block, or in note entry directly.

   There is by default only one ‘SpacingSpanner’ per ‘Score’.  This
means that, by default, ‘uniform-stretching’ is either turned on for the
entire score or turned off for the entire score.  We can, however,
override this behavior and turn on different spacing features at
different places in the score.  We do this with the command
‘\newSpacingSection’.  See *note New spacing section::, for more info.

   Next we examine the effects of the ‘Separating_line_group_engraver’
and see why proportional scores frequently remove this engraver.  The
following example shows that there is a small amount of “prefatory”
space just before the first note in each system.

     \paper {
       indent = #0
     }

     \new Staff {
       c'1
       \break
       c'1
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The amount of this prefatory space is the same whether after a time
signature, a key signature or a clef.  ‘Separating_line_group_engraver’
is responsible for this space.  Removing
‘Separating_line_group_engraver’ reduces this space to zero.

     \paper {
       indent = #0
     }

     \new Staff \with {
       \remove "Separating_line_group_engraver"
     } {
       c'1
       \break
       c'1
     }
 [image src="" alt="[image of music]" text="image of music" ]

   non-musical elements like time signatures, key signatures, clefs and
accidentals are problematic in proportional notation.  None of these
elements has rhythmic duration.  But all of these elements consume
horizontal space.  Different proportional scores approach these problems
differently.

   It may be possible to avoid spacing problems with key signatures
simply by not having any.  This is a valid option since most
proportional scores are contemporary music.  The same may be true of
time signatures, especially for those scores that include a measured
timeline or other graphic.  But these scores are exceptional and most
proportional scores include at least some time signatures.  Clefs and
accidentals are even more essential.

   So what strategies exist for spacing non-musical elements in a
proportional context?  One good option is the ‘strict-note-spacing’
property of ‘SpacingSpanner’.  Compare the two scores below:

     \new Staff {
       \set Score.proportionalNotationDuration = #(ly:make-moment 1/16)
       c''8 8 8 \clef alto d'2 2
     }

     \new Staff {
       \set Score.proportionalNotationDuration = #(ly:make-moment 1/16)
       \override Score.SpacingSpanner.strict-note-spacing = ##t
       c''8 8 8 \clef alto d'2 2
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Both scores are proportional, but the spacing in the first score is
too loose because of the clef change.  The spacing of the second score
remains strict, however, because strict-note-spacing is turned on.
Turning on strict-note-spacing causes the width of time signatures, key
signatures, clefs and accidentals to play no part in the spacing
algorithm.

   In addition to the settings given here, there are other settings that
frequently appear in proportional scores.  These include:

   • ‘\override SpacingSpanner.strict-grace-spacing = ##t’
   • ‘\set tupletFullLength = ##t’
   • ‘\override Beam.breakable = ##t’
   • ‘\override Glissando.breakable = ##t’
   • ‘\override TextSpanner.breakable = ##t’
   • ‘\remove "Forbid_line_break_engraver" in the Voice context’

   These settings space grace notes strictly, extend tuplet brackets to
mark both rhythmic start- and stop-points, and allow spanning elements
to break across systems and pages.  See the respective parts of the
manual for these related settings.

See also
........

   Notation Reference: *note New spacing section::.

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Fitting music onto fewer pages,  Prev: Horizontal spacing,  Up: Spacing issues

4.6 Fitting music onto fewer pages
==================================

Sometimes you can end up with one or two staves on a second (or third,
or fourth…) page.  This is annoying, especially if you look at previous
pages and it looks like there is plenty of room left on those.

   When investigating layout issues, ‘annotate-spacing’ is an invaluable
tool.  This command prints the values of various layout spacing
variables; for more details see the following section, *note Displaying
spacing::.

* Menu:

* Displaying spacing::
* Changing spacing::


File: lilypond-notation.info,  Node: Displaying spacing,  Next: Changing spacing,  Up: Fitting music onto fewer pages

4.6.1 Displaying spacing
------------------------

To graphically display the dimensions of vertical layout variables that
may be altered for page formatting, set ‘annotate-spacing’ in the
‘\paper’ block:

     \book {
       \score { { c4 } }
       \paper { annotate-spacing = ##t }
     }
 [image src="" alt="[image of music]" text="image of music" ]

All layout dimensions are displayed in staff-spaces, regardless of the
units specified in the ‘\paper’ or ‘\layout’ block.  In the above
example, ‘paper-height’ has a value of 59.75 ‘staff-spaces’, and the
‘staff-size’ is 20 points (the default value).  Note that:

1 point         = (25.4/72.27) mm
                
1 staff-space   = (‘staff-size’)/4 pts
                = (‘staff-size’)/4 *
                (25.4/72.27) mm
                

In this case, one ‘staff-space’ is approximately equal to 1.757mm.  Thus
the ‘paper-height’ measurement of 59.75 ‘staff-spaces’ is equivalent to
105 millimeters, the height of ‘a6’ paper in landscape orientation.  The
pairs (A,B) are intervals, where A is the lower edge and B the upper
edge of the interval.

See also
........

   Notation Reference: *note Setting the staff size::.

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Changing spacing,  Prev: Displaying spacing,  Up: Fitting music onto fewer pages

4.6.2 Changing spacing
----------------------

The output of ‘annotate-spacing’ reveals vertical dimensions in great
detail.  For details about modifying margins and other layout variables,
see *note Page layout::.

   Other than margins, there are a few other options to save space:

   • Force systems to move as close together as possible (to fit as many
     systems as possible onto a page) while being spaced so that there
     is no blank space at the bottom of the page.

          \paper {
            system-system-spacing = #'((basic-distance . 0.1) (padding . 0))
            ragged-last-bottom = ##f
            ragged-bottom = ##f
          }

   • Force the number of systems.  This can help in two ways.  Just
     setting a value, even the same value as the number of systems being
     typeset by default, will sometimes cause more systems to be fitted
     onto each page, as an estimation step is then bypassed, giving a
     more accurate fit to each page.  Also, forcing an actual reduction
     in the number of systems may save a further page.  For example, if
     the default layout has 11 systems, the following assignment will
     force a layout with 10 systems.

          \paper {
            system-count = #10
          }

   • Force the number of pages.  For example, the following assignment
     will force a layout with 2 pages.

          \paper {
            page-count = #2
          }

   • Avoid (or reduce) objects that increase the vertical size of a
     system.  For example, volta brackets for alternative repeat endings
     require extra space.  If these endings are spread over two systems,
     they take up more space than if they were on the same system.  As
     another example, dynamics that ‘stick out’ of a system can be moved
     closer to the staff:

          \relative e' {
            e4 c g\f c
            e4 c g-\tweak X-offset #-2.7 \f c
          }
 [image src="" alt="[image of music]" text="image of music" ]

   • Alter the horizontal spacing via ‘SpacingSpanner’.  For more
     details, see *note Changing horizontal spacing::.  The following
     example illustrates the default spacing:

          \score {
            \relative {
              g'4 e e2 |
              f4 d d2 |
              c4 d e f |
              g4 g g2 |
              g4 e e2 |
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     The next example modifies ‘common-shortest-duration’ from a value
     of ‘1/4’ to ‘1/2’.  The quarter note is the most common and
     shortest duration in this example, so by making this duration
     longer, a ‘squeezing’ effect occurs:

          \score {
            \relative {
              g'4 e e2 |
              f4 d d2 |
              c4 d e f |
              g4 g g2 |
              g4 e e2 |
            }
            \layout {
              \context {
                \Score
                \override SpacingSpanner.common-shortest-duration =
                  #(ly:make-moment 1/2)
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     The ‘common-shortest-duration’ property cannot be modified
     dynamically, so it must always be placed in a ‘\context’ block so
     that it applies to the whole score.

See also
........

   Notation Reference: *note Page layout::, *note Changing horizontal
spacing::.

   Snippets: *note (lilypond-snippets)Spacing::.


File: lilypond-notation.info,  Node: Changing defaults,  Next: Notation manual tables,  Prev: Spacing issues,  Up: Top

5 Changing defaults
*******************

The purpose of LilyPond’s design is to provide the finest quality output
by default.  Nevertheless, it may happen that you need to change this
default layout.  The layout is controlled through a large number of
‘knobs and switches’ collectively called ‘properties’.  A tutorial
introduction to accessing and modifying these properties can be found in
the Learning Manual, see *note (lilypond-learning)Tweaking output::.
This should be read first.  This chapter covers similar ground, but in a
style more appropriate to a reference manual.

   The definitive description of the controls available for tuning can
be found in a separate document: *note the Internals Reference:
(lilypond-internals)Top.  That manual lists all the variables, functions
and options available in LilyPond.  It is written as a HTML document,
which is available on-line
(http://lilypond.org/doc/stable/Documentation/internals/), and is also
included with the LilyPond documentation package.

   Internally, LilyPond uses Scheme (a LISP dialect) to provide
infrastructure.  Overriding layout decisions in effect accesses the
program internals, which requires Scheme input.  Scheme elements are
introduced in a ‘.ly’ file with the hash mark ‘#’.(1)

* Menu:

* Interpretation contexts::
* Explaining the Internals Reference::
* Modifying properties::
* Useful concepts and properties::
* Advanced tweaks::
* Using music functions::

   ---------- Footnotes ----------

   (1) *note (lilypond-extending)Scheme tutorial::, contains a short
tutorial on entering numbers, lists, strings, and symbols in Scheme.


File: lilypond-notation.info,  Node: Interpretation contexts,  Next: Explaining the Internals Reference,  Up: Changing defaults

5.1 Interpretation contexts
===========================

This section describes what contexts are, and how to modify them.

* Menu:

* Contexts explained::
* Creating and referencing contexts::
* Keeping contexts alive::
* Modifying context plug-ins::
* Changing context default settings::
* Defining new contexts::
* Context layout order::

See also
........

   Learning Manual: *note (lilypond-learning)Contexts and engravers::.

   Installed Files: ‘ly/engraver-init.ly’, ‘ly/performer-init.ly’.

   Snippets: *note (lilypond-snippets)Contexts and engravers::.

   Internals Reference: *note (lilypond-internals)Contexts::, *note
(lilypond-internals)Engravers and Performers::.


File: lilypond-notation.info,  Node: Contexts explained,  Next: Creating and referencing contexts,  Up: Interpretation contexts

5.1.1 Contexts explained
------------------------

Contexts are arranged hierarchically:

* Menu:

* Output definitions - blueprints for contexts::
* Score - the master of all contexts::
* Top-level contexts - staff containers::
* Intermediate-level contexts - staves::
* Bottom-level contexts - voices::


File: lilypond-notation.info,  Node: Output definitions - blueprints for contexts,  Next: Score - the master of all contexts,  Up: Contexts explained

Output definitions - blueprints for contexts
............................................

This section explains the relevance of output definitions when working
with contexts.  Examples for actual output definitions are given later
(see *note Changing all contexts of the same type::).

   While music written in a file may refer to context types and names,
contexts are created only when the music is actually being interpreted.
LilyPond interprets music under control of an ‘output definition’ and
may do so for several different output definitions, resulting in
different output.  The output definition relevant for printing music is
specified using ‘\layout’.

   A much simpler output definition used for producing Midi output is
specified using ‘\midi’.  Several other output definitions are used by
LilyPond internally, like when using the part combiner (*note Automatic
part combining::) or creating music quotes (*note Quoting other
voices::).

   Output definitions define the relation between contexts as well as
their respective default settings.  While most changes will usually be
made inside of a ‘\layout’ block, Midi-related settings will only have
an effect when made within a ‘\midi’ block.

   Some settings affect several outputs: for example, if ‘autoBeaming’
is turned off in some context, beams count as melismata for the purpose
of matching music to lyrics as described in *note Automatic syllable
durations::.  This matching is done both for printed output as well as
for Midi.  If changes made to ‘autoBeaming’ within a context definition
of a ‘\layout’ block are not repeated in the corresponding ‘\midi’
block, lyrics and music will get out of sync in Midi.

See also
........

   Installed Files: ‘ly/engraver-init.ly’.  ‘ly/performer-init.ly’.


File: lilypond-notation.info,  Node: Score - the master of all contexts,  Next: Top-level contexts - staff containers,  Prev: Output definitions - blueprints for contexts,  Up: Contexts explained

Score - the master of all contexts
..................................

This is the top level notation context.  No other context can contain a
Score context.  By default the Score context handles the administration
of time signatures and makes sure that items such as clefs, time
signatures, and key-signatures are aligned across staves.

   A Score context is instantiated implicitly when a ‘\score {…}’ block
is processed.


File: lilypond-notation.info,  Node: Top-level contexts - staff containers,  Next: Intermediate-level contexts - staves,  Prev: Score - the master of all contexts,  Up: Contexts explained

Top-level contexts - staff containers
.....................................

*_StaffGroup_*

   Groups staves while adding a bracket on the left side, grouping the
staves together.  The bar lines of the contained staves are connected
vertically.  ‘StaffGroup’ only consists of a collection of staves, with
a bracket in front and spanning bar lines.

   *_ChoirStaff_*

   Identical to ‘StaffGroup’ except that the bar lines of the contained
staves are not connected vertically.

   *_GrandStaff_*

   A group of staves, with a brace on the left side, grouping the staves
together.  The bar lines of the contained staves are connected
vertically.

   *_PianoStaff_*

   Just like ‘GrandStaff’, but with support for instrument names to the
left of each system.


File: lilypond-notation.info,  Node: Intermediate-level contexts - staves,  Next: Bottom-level contexts - voices,  Prev: Top-level contexts - staff containers,  Up: Contexts explained

Intermediate-level contexts - staves
....................................

*_Staff_*

   Handles clefs, bar lines, keys, accidentals.  It can contain ‘Voice’
contexts.

   *_RhythmicStaff_*

   Like ‘Staff’ but for printing rhythms.  Pitches are ignored when
engraving; the notes are printed on one line.  The MIDI rendition
retains pitches unchanged.

   *_TabStaff_*

   Context for generating tablature.  By default lays the music
expression out as a guitar tablature, printed on six lines.

   *_DrumStaff_*

   Handles typesetting for percussion.  Can contain ‘DrumVoice’.

   *_VaticanaStaff_*

   Same as ‘Staff’, except that it is designed for typesetting a piece
in gregorian style.

   *_MensuralStaff_*

   Same as ‘Staff’, except that it is designed for typesetting a piece
in mensural style.


File: lilypond-notation.info,  Node: Bottom-level contexts - voices,  Prev: Intermediate-level contexts - staves,  Up: Contexts explained

Bottom-level contexts - voices
..............................

Voice-level contexts initialise certain properties and start appropriate
engravers.  A bottom-level context is one without ‘defaultchild’.  While
it is possible to let it accept/contain subcontexts, they can only be
created and entered explicitly.

   *_Voice_*

   Corresponds to a voice on a staff.  This context handles the
conversion of dynamic signs, stems, beams, super- and sub-scripts,
slurs, ties, and rests.  You have to instantiate this explicitly if you
require multiple voices on the same staff.

   *_VaticanaVoice_*

   Same as ‘Voice’, except that it is designed for typesetting a piece
in gregorian style.

   *_MensuralVoice_*

   Same as ‘Voice’, with modifications for typesetting a piece in
mensural style.

   *_Lyrics_*

   Corresponds to a voice with lyrics.  Handles the printing of a single
line of lyrics.

   *_DrumVoice_*

   The voice context used in a percussion staff.

   *_FiguredBass_*

   The context in which ‘BassFigure’ objects are created from input
entered in ‘\figuremode’ mode.

   *_TabVoice_*

   The voice context used within a ‘TabStaff’ context.  Usually left to
be created implicitly.

   *_CueVoice_*

   A voice context used to render notes of a reduced size, intended
primarily for adding cue notes to a staff, see *note Formatting cue
notes::.  Usually left to be created implicitly.

   *_ChordNames_*

   Typesets chord names.


File: lilypond-notation.info,  Node: Creating and referencing contexts,  Next: Keeping contexts alive,  Prev: Contexts explained,  Up: Interpretation contexts

5.1.2 Creating and referencing contexts
---------------------------------------

LilyPond will create lower-level contexts automatically if a music
expression is encountered before a suitable context exists, but this is
usually successful only for simple scores or music fragments like the
ones in the documentation.  For more complex scores it is advisable to
specify all contexts explicitly with either the ‘\new’ or ‘\context’
command.  The syntax of these two commands is very similar:

     [\new | \context] CONTEXT [ = NAME] [MUSIC-EXPRESSION]

where either ‘\new’ or ‘\context’ may be specified.  CONTEXT is the type
of context which is to be created, NAME is an optional name to be given
to the particular context being created and MUSIC-EXPRESSION is a single
music expression that is to be interpreted by the engravers and
performers in this context.

   The ‘\new’ prefix without a name is commonly used to create scores
with many staves:

     <<
       \new Staff \relative {
         % leave the Voice context to be created implicitly
         c''4 c
       }
       \new Staff \relative {
         d''4 d
       }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

and to place several voices into one staff:

     \new Staff <<
       \new Voice \relative {
         \voiceOne
         c''8 c c4 c c
       }
       \new Voice \relative {
         \voiceTwo
         g'4 g g g
       }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

‘\new’ should always be used to specify unnamed contexts.

   The difference between ‘\new’ and ‘\context’ is in the action taken:

   • ‘\new’ with or without a name will always create a fresh, distinct,
     context, even if one with the same name already exists:

          \new Staff <<
            \new Voice = "A" \relative {
              \voiceOne
              c''8 c c4 c c
            }
            \new Voice = "A" \relative {
              \voiceTwo
              g'4 g g g
            }
          >>
 [image src="" alt="[image of music]" text="image of music" ]

   • ‘\context’ with a name specified will create a distinct context
     only if a context of the same type with the same name in the same
     context hierarchy does not already exist.  Otherwise it will be
     taken as a reference to that previously created context, and its
     music expression will be passed to that context for interpretation.

     One application of named contexts is in separating the score layout
     from the musical content.  Either of these two forms is valid:

          \score {
            <<
              % score layout
              \new Staff <<
                \new Voice = "one" {
                  \voiceOne
                }
                \new Voice = "two" {
                  \voiceTwo
                }
              >>

              % musical content
              \context Voice = "one" {
                \relative {
                  c''4 c c c
                }
              }
              \context Voice = "two" {
                \relative {
                  g'8 g g4 g g
                }
              }
            >>
          }
 [image src="" alt="[image of music]" text="image of music" ]

          \score {
            <<
              % score layout
              \new Staff <<
                \context Voice = "one" {
                  \voiceOne
                }
                \context Voice = "two" {
                  \voiceTwo
                }
              >>

              % musical content
              \context Voice = "one" {
                \relative {
                  c''4 c c c
                }
              }
              \context Voice = "two" {
                \relative {
                  g'8 g g4 g g
                }
              }
            >>
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Alternatively, variables may be employed to similar effect.  See
     *note (lilypond-learning)Organizing pieces with variables::.

   • ‘\context’ with no name will match the first of any previously
     created contexts of the same type in the same context heirarchy,
     even one that has been given a name, and its music expression will
     be passed to that context for interpretation.  This form is rarely
     useful.  However, ‘\context’ with no name and no music expression
     is used to set the context in which a Scheme procedure specified
     with ‘\applyContext’ is executed:

          \new Staff \relative {
            c'1
            \context Timing
            \applyContext #(lambda (ctx)
                             (newline)
                             (display (ly:context-current-moment ctx)))
            c1
          }

   A context must be named if it is to be referenced later, for example
when lyrics are associated with music:

     \new Voice = "tenor" MUSIC
     …
     \new Lyrics \lyricsto "tenor" LYRICS

For details of associating lyrics with music see *note Automatic
syllable durations::.

   The properties of all contexts of a particular type can be modified
in a ‘\layout’ block (with a different syntax), see *note Changing all
contexts of the same type::.  This construct also provides a means of
keeping layout instructions separate from the musical content.  If a
single context is to be modified, a ‘\with’ block must be used, see
*note Changing just one specific context::.

See also
........

   Learning Manual: *note (lilypond-learning)Organizing pieces with
variables::.

   Notation Reference: *note Changing just one specific context::, *note
Automatic syllable durations::.


File: lilypond-notation.info,  Node: Keeping contexts alive,  Next: Modifying context plug-ins,  Prev: Creating and referencing contexts,  Up: Interpretation contexts

5.1.3 Keeping contexts alive
----------------------------

Contexts are usually terminated at the first musical moment in which
they have nothing to do.  So ‘Voice’ contexts die as soon as they
contain no events; ‘Staff’ contexts die as soon as all the ‘Voice’
contexts within them contain no events; etc.  This can cause
difficulties if earlier contexts which have died have to be referenced,
for example, when changing staves with ‘\change’ commands, associating
lyrics with a voice with ‘\lyricsto’ commands, or when adding further
musical events to an earlier context.

   There is an exception to this general rule: inside of an ‘{…}’
construct (sequential music), the construct’s notion of the “current
context” will descend whenever an element of the sequence ends in a
subcontext of the previous current context.  This avoids spurious
creation of implicit contexts in a number of situations but means that
the first context descended into will be kept alive until the end of the
expression.

   In contrast, the contexts of a ‘<<…>>’ construct’s (simultaneous
music) expression are not carried forth, so enclosing a context creating
command in an extra pair of ‘<<…>>’ will keep the context from
persisting through all of the enclosing ‘{…}’ sequence.

   Any context can be kept alive by ensuring it has something to do at
every musical moment.  ‘Staff’ contexts are kept alive by ensuring one
of their voices is kept alive.  One way of doing this is to add spacer
rests to a voice in parallel with the real music.  These need to be
added to every ‘Voice’ context which needs to be kept alive.  If several
voices are to be used sporadically it is safest to keep them all alive
rather than attempting to rely on the exceptions mentioned above.

   In the following example, both voice A and voice B are kept alive in
this way for the duration of the piece:

     musicA = \relative { d''4 d d d }
     musicB = \relative { g'4 g g g }
     keepVoicesAlive = {
       <<
         \new Voice = "A" { s1*5 }  % Keep Voice "A" alive for 5 bars
         \new Voice = "B" { s1*5 }  % Keep Voice "B" alive for 5 bars
       >>
     }

     music = {
       \context Voice = "A" {
         \voiceOneStyle
         \musicA
       }
       \context Voice = "B" {
         \voiceTwoStyle
         \musicB
       }
       \context Voice = "A" { \musicA }
       \context Voice = "B" { \musicB }
       \context Voice = "A" { \musicA }
     }

     \score {
       \new Staff <<
         \keepVoicesAlive
         \music
       >>
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The following example shows how a sporadic melody line with lyrics
might be written using this approach.  In a real situation the melody
and accompaniment would consist of several different sections, of
course.

     melody = \relative { a'4 a a a }
     accompaniment = \relative { d'4 d d d }
     words = \lyricmode { These words fol -- low the mel -- o -- dy }
     \score {
       <<
         \new Staff = "music" {
           <<
             \new Voice = "melody" {
               \voiceOne
               s1*4  % Keep Voice "melody" alive for 4 bars
             }
             {
               \new Voice = "accompaniment" {
                 \voiceTwo
                 \accompaniment
               }
               <<
                 \context Voice = "melody" { \melody }
                 \context Voice = "accompaniment" { \accompaniment }
               >>
               \context Voice = "accompaniment" { \accompaniment }
               <<
                 \context Voice = "melody" { \melody }
                 \context Voice = "accompaniment" { \accompaniment }
               >>
             }
           >>
         }
         \new Lyrics \with { alignAboveContext = #"music" }
         \lyricsto "melody" { \words }
       >>
     }
 [image src="" alt="[image of music]" text="image of music" ]

   An alternative way, which may be better in many circumstances, is to
keep the melody line alive by simply including spacer notes to line it
up correctly with the accompaniment:

     melody = \relative {
       s1  % skip a bar
       a'4 a a a
       s1  % skip a bar
       a4 a a a
     }
     accompaniment = \relative {
       d'4 d d d
       d4 d d d
       d4 d d d
       d4 d d d
     }
     words = \lyricmode { These words fol -- low the mel -- o -- dy }

     \score {
       <<
         \new Staff = "music" {
           <<
             \new Voice = "melody" {
               \voiceOne
               \melody
             }
             \new Voice = "accompaniment" {
               \voiceTwo
               \accompaniment
             }
           >>
         }
         \new Lyrics \with { alignAboveContext = #"music" }
         \lyricsto "melody" { \words }
       >>
     }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Modifying context plug-ins,  Next: Changing context default settings,  Prev: Keeping contexts alive,  Up: Interpretation contexts

5.1.4 Modifying context plug-ins
--------------------------------

Notation contexts (like ‘Score’ and ‘Staff’) not only store properties,
they also contain plug-ins called ‘engravers’ that create notation
elements.  For example, the ‘Voice’ context contains a
‘Note_heads_engraver’ and the ‘Staff’ context contains a ‘Key_engraver’.

   For a full a description of each plug-in, see Internals Reference ↦
Translation ↦ Engravers.  Every context described in Internals Reference
↦ Translation ↦ Context.  lists the engravers used for that context.

   It can be useful to shuffle around these plug-ins.  This is done by
starting a new context with ‘\new’ or ‘\context’, and modifying it,

     \new CONTEXT \with {
       \consists …
       \consists …
       \remove …
       \remove …
       _etc._
     }
     {
       _…music…_
     }

where the … should be the name of an engraver.  Here is a simple example
which removes ‘Time_signature_engraver’ and ‘Clef_engraver’ from a
‘Staff’ context,

     <<
       \new Staff \relative {
         f'2 g
       }
       \new Staff \with {
          \remove "Time_signature_engraver"
          \remove "Clef_engraver"
       } \relative {
         f'2 g2
       }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   In the second staff there are no time signature or clef symbols.
This is a rather crude method of making objects disappear since it will
affect the entire staff.  This method also influences the spacing, which
may or may not be desirable.  More sophisticated methods of blanking
objects are shown in *note (lilypond-learning)Visibility and color of
objects::.

   The next example shows a practical application.  Bar lines and time
signatures are normally synchronized across the score.  This is done by
the ‘Timing_translator’ and ‘Default_bar_line_engraver’.  This plug-in
keeps an administration of time signature, location within the measure,
etc.  By moving these engraver from ‘Score’ to ‘Staff’ context, we can
have a score where each staff has its own time signature.

     \score {
       <<
         \new Staff \with {
           \consists "Timing_translator"
           \consists "Default_bar_line_engraver"
         }
         \relative {
             \time 3/4
             c''4 c c c c c
         }
       \new Staff \with {
         \consists "Timing_translator"
         \consists "Default_bar_line_engraver"
       }
       \relative {
           \time 2/4
           c''4 c c c c c
       }
     >>
     \layout {
       \context {
         \Score
         \remove "Timing_translator"
         \remove "Default_bar_line_engraver"
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

Known issues and warnings
.........................

The order in which the engravers are specified is the order in which
they are called to carry out their processing.  Usually the order in
which the engravers are specified does not matter, but in a few special
cases the order is important, for example where one engraver writes a
property and another reads it, or where one engraver creates a grob and
another must process it.

   The following orderings are important:

   • the ‘Bar_engraver’ must normally be first,

   • the ‘New_fingering_engraver’ must come before the
     ‘Script_column_engraver’,

   • the ‘Timing_translator’ must come before the ‘Bar_number_engraver’.

See also
........

   Installed Files: ‘ly/engraver-init.ly’.


File: lilypond-notation.info,  Node: Changing context default settings,  Next: Defining new contexts,  Prev: Modifying context plug-ins,  Up: Interpretation contexts

5.1.5 Changing context default settings
---------------------------------------

Context and grob properties can be changed with ‘\set’ and ‘\override’
commands, as described in *note Modifying properties::.  These commands
create music events, making the changes take effect at the point in time
the music is being processed.

   In contrast, this section explains how to change the _default_ values
of context and grob properties at the time the context is created.
There are two ways of doing this.  One modifies the default values in
all contexts of a particular type, the other modifies the default values
in just one particular instance of a context.

* Menu:

* Changing all contexts of the same type::
* Changing just one specific context::
* Order of precedence::


File: lilypond-notation.info,  Node: Changing all contexts of the same type,  Next: Changing just one specific context,  Up: Changing context default settings

Changing all contexts of the same type
......................................

The default context settings which are to be used for typesetting in
‘Score’, ‘Staff’, ‘Voice’ and other contexts may be specified in a
‘\context’ block within any ‘\layout’ block.

   Settings for Midi output as opposed to typesetting will have to be
separately specified in ‘\midi’ blocks (see *note Output definitions -
blueprints for contexts::).

   The ‘\layout’ block should be placed within the ‘\score’ block to
which it is to apply, after the music.

     \layout {
       \context {
         \Voice
         [context settings for all Voice contexts]
       }
       \context {
         \Staff
         [context settings for all Staff contexts]
       }
     }

   The following types of settings may be specified:

   • An ‘\override’ command, but with the context name omitted

          \score {
            \relative {
              a'4^"Thicker stems" a a a
              a4 a a\ff a
            }
            \layout {
              \context {
                \Staff
                \override Stem.thickness = #4.0
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

   • Directly setting a context property

          \score {
            \relative {
              a'4^"Smaller font" a a a
              a4 a a\ff a
            }
            \layout {
              \context {
                \Staff
                fontSize = #-4
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

   • A predefined command such as ‘\dynamicUp’ or a music expression
     like ‘\accidentalStyle dodecaphonic’

          \score {
            \relative {
              a'4^"Dynamics above" a a a
              a4 a a\ff a
            }
            \layout {
              \context {
                \Voice
                \dynamicUp
              }
              \context {
                \Staff
                \accidentalStyle dodecaphonic
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

   • A user-defined variable containing a ‘\with’ block; for details of
     the ‘\with’ block see *note Changing just one specific context::.

          StaffDefaults = \with {
            fontSize = #-4
          }

          \score {
            \new Staff {
              \relative {
                a'4^"Smaller font" a a a
                a4 a a a
              }
            }
            \layout {
              \context {
                \Staff
                \StaffDefaults
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

   Property-setting commands can be placed in a ‘\layout’ block without
being enclosed in a ‘\context’ block.  Such settings are equivalent to
including the same property-setting commands at the start of every
context of the type specified.  If no context is specified _every_
bottom-level context is affected, see *note Bottom-level contexts -
voices::.  The syntax of a property-setting command in a ‘\layout’ block
is the same as the same command written in the music stream.

     \score {
       \new Staff {
         \relative {
           a'4^"Smaller font" a a a
           a4 a a a
         }
       }
       \layout {
         \accidentalStyle dodecaphonic
         \set fontSize = #-4
         \override Voice.Stem.thickness = #4.0
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Changing just one specific context,  Next: Order of precedence,  Prev: Changing all contexts of the same type,  Up: Changing context default settings

Changing just one specific context
..................................

The context properties of just one specific context instance can be
changed in a ‘\with’ block.  All other context instances of the same
type retain the default settings built into LilyPond and modified by any
‘\layout’ block within scope.  The ‘\with’ block must be placed
immediately after the ‘\new’ CONTEXT-TYPE command:

     \new Staff \with { [context settings for this context instance only] }
     {
       …
     }

   Since such a ‘context modification’ is specified inside of music, it
will affect _all_ outputs (typesetting _and_ Midi) as opposed to changes
within an output definition.

   The following types of settings may be specified:

   • An ‘\override’ command, but with the context name omitted

          \score {
            \new Staff {
              \new Voice \with { \override Stem.thickness = #4.0 }
              {
                \relative {
                  a'4^"Thick stems" a a a
                  a4 a a a
                }
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

   • Directly setting a context property

          \score {
            <<
              \new Staff {
                \relative {
                  a'4^"Default font" a a a
                  a4 a a a
                }
              }
              \new Staff \with { fontSize = #-4 }
              {
                \relative {
                  a'4^"Smaller font" a a a
                  a4 a a a
                }
              }
            >>
          }
 [image src="" alt="[image of music]" text="image of music" ]

   • A predefined command such as ‘\dynamicUp’

          \score {
            <<
              \new Staff {
                \new Voice {
                  \relative {
                    a'4^"Dynamics below" a a a
                    a4 a a\ff a
                  }
                }
              }
              \new Staff \with { \accidentalStyle dodecaphonic }
              {
                \new Voice \with { \dynamicUp }
                {
                  \relative {
                    a'4^"Dynamics above" a a a
                    a4 a a\ff a
                  }
                }
              }
            >>
          }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Order of precedence,  Prev: Changing just one specific context,  Up: Changing context default settings

Order of precedence
...................

The value of a property which applies at a particular time is determined
as follows:

   • if an ‘\override’ or ‘\set’ command in the input stream is in
     effect that value is used,

   • otherwise the default value taken from a ‘\with’ statement on the
     context initiation statement is used,

   • otherwise the default value taken from the most recent appropriate
     ‘\context’ block in the ‘\layout’ or ‘\midi’ blocks is used,

   • otherwise the LilyPond built-in default is used.

See also
........

   Learning Manual: *note (lilypond-learning)Modifying context
properties::.

   Notation Reference: *note Contexts explained::, *note Bottom-level
contexts - voices::, *note The set command::, *note The override
command::, *note The ‘\layout’ block: The layout block.


File: lilypond-notation.info,  Node: Defining new contexts,  Next: Context layout order,  Prev: Changing context default settings,  Up: Interpretation contexts

5.1.6 Defining new contexts
---------------------------

Specific contexts, like ‘Staff’ and ‘Voice’, are made from simple
building blocks.  It is possible to create new types of contexts with
different combinations of engraver plug-ins.

   The next example shows how to build a different type of ‘Voice’
context from scratch.  It will be similar to ‘Voice’, but only prints
centered slash note heads.  It can be used to indicate improvisation in
jazz pieces,

 [image src="" alt="[image of music]" text="image of music" ]

   These settings are defined within a ‘\context’ block inside a
‘\layout’ block,

     \layout {
       \context {
         …
       }
     }

   In the following discussion, the example input shown should go in
place of the … in the previous fragment.

   First it is necessary to define a name for the new context:

     \name ImproVoice

   Since it is similar to the ‘Voice’ context, we want commands that
work in (existing) ‘Voice’ contexts to continue working.  This is
achieved by giving the new context an alias of ‘Voice’,

     \alias Voice

   The context will print notes and instructive texts, so we need to add
the engravers which provide this functionality, plus the engraver which
groups notes, stems and rests which occur at the same musical moment
into columns,

     \consists "Note_heads_engraver"
     \consists "Text_engraver"
     \consists "Rhythmic_column_engraver"

   The note heads should all be placed on the center line,

     \consists "Pitch_squash_engraver"
     squashedPosition = #0

   The ‘Pitch_squash_engraver’ modifies note heads (created by the
‘Note_heads_engraver’) and sets their vertical position to the value of
‘squashedPosition’, in this case ‘0’, the center line.

   The notes look like a slash, and have no stem,

     \override NoteHead.style = #'slash
     \hide Stem

   All these plug-ins have to communicate under the control of the
context.  The mechanisms with which contexts communicate are established
by declaring the context ‘\type’.  Within a ‘\layout’ block, most
contexts will be of type ‘Engraver_group’.  Some special contexts and
contexts in ‘\midi’ blocks use other context types.  Copying and
modifying an existing context definition will also fill in the type.
Since this example creates a definition from scratch, it needs to be
specified explicitly.

     \type "Engraver_group"

   Put together, we get

     \context {
       \name ImproVoice
       \type "Engraver_group"
       \consists "Note_heads_engraver"
       \consists "Text_engraver"
       \consists "Rhythmic_column_engraver"
       \consists "Pitch_squash_engraver"
       squashedPosition = #0
       \override NoteHead.style = #'slash
       \hide Stem
       \alias Voice
     }

   Contexts form hierarchies.  We want to place the ‘ImproVoice’ context
within the ‘Staff’ context, just like normal ‘Voice’ contexts.
Therefore, we modify the ‘Staff’ definition with the ‘\accepts’ command,

     \context {
       \Staff
       \accepts ImproVoice
     }

   Often when reusing an existing context definition, the resulting
context can be used anywhere where the original context would have been
useful.

     \layout {
       …
       \inherit-acceptability TO FROM
     }

will arrange to have contexts of type TO accepted by all contexts also
accepting FROM.  For example, using

     \layout {
       …
       \inherit-acceptability "ImproVoice" "Voice"
     }

will add an ‘\accepts’ for ‘ImproVoice’ to both ‘Staff’ and
‘RhythmicStaff’ definitions.

   The opposite of ‘\accepts’ is ‘\denies’, which is sometimes needed
when reusing existing context definitions.

   Arranging the required pieces into a ‘\layout’ block leaves us with

     \layout {
       \context {
         \name ImproVoice
         …
       }
       \inherit-acceptability "ImproVoice" "Voice"
     }

   Then the output at the start of this subsection can be entered as

     \relative {
       a'4 d8 bes8
       \new ImproVoice {
         c4^"ad lib" c
         c4 c^"undress"
         c c_"while playing :)"
       }
       a1
     }

   To complete this example, changes affecting the context hierarchy
should be repeated in a ‘\midi’ block so that Midi output depends on the
same context relations.

See also
........

Internals Reference: *note (lilypond-internals)Note_heads_engraver::,
*note (lilypond-internals)Text_engraver::, *note
(lilypond-internals)Rhythmic_column_engraver::, *note
(lilypond-internals)Pitch_squash_engraver::.


File: lilypond-notation.info,  Node: Context layout order,  Prev: Defining new contexts,  Up: Interpretation contexts

5.1.7 Context layout order
--------------------------

Contexts are normally positioned in a system from top to bottom in the
order in which they are encountered in the input file.  When contexts
are nested, the outer context will include inner nested contexts as
specified in the input file, provided the inner contexts are included in
the outer context’s “accepts” list.  Nested contexts which are not
included in the outer context’s “accepts” list will be repositioned
below the outer context rather than nested within it.

   The “accepts” list of a context can be changed with the ‘\accepts’ or
‘\denies’ commands.  ‘\accepts’ adds a context to the “accepts” list and
‘\denies’ removes a context from the list.

   For example, a square-braced staff group is not usually found within
a curved-braced staff with connecting staff bars, and a ‘GrandStaff’
does not accept a ‘StaffGroup’ inside it by default.

     \score {
       \new GrandStaff <<
         \new StaffGroup <<
           \new Staff { c'1 }
           \new Staff { d'1 }
         >>
         \new Staff { \set Staff.instrumentName = bottom f'1 }
       >>
     }
 [image src="" alt="[image of music]" text="image of music" ]

   However, by using the ‘\accepts’ command, ‘StaffGroup’ can be added
to the ‘GrandStaff’ context:

     \score {
       \new GrandStaff <<
         \new StaffGroup <<
           \new Staff { c'1 }
           \new Staff { d'1 }
         >>
         \new Staff { \set Staff.instrumentName = bottom f'1 }
       >>
       \layout {
         \context {
           \GrandStaff
           \accepts "StaffGroup"
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

   ‘\denies’ is mainly used when a new context is being based on
another, but the required nesting differs.  For example, the
‘VaticanaStaff’ context is based on the ‘Staff’ context, but with the
‘VaticanaVoice’ context substituted for the ‘Voice’ context in the
“accepts” list.

   Note that a context will be silently created implicitly if a command
is encountered when there is no suitable context available to contain
it.

   Within a context definition, the type of subcontext to be implicitly
created is specified using ‘\defaultchild’.  A number of music events
require a ‘Bottom’ context: when such an event is encountered,
subcontexts are created recursively until reaching a context with no
‘defaultchild’ setting.

   Implicit context creation can at times give rise to unexpected new
staves or scores.  Using ‘\new’ to create contexts explicitly avoids
those problems.

   Sometimes a context is required to exist for just a brief period, a
good example being the staff context for an ossia.  This is usually
achieved by introducing the context definition at the appropriate place
in parallel with corresponding section of the main music.  By default,
the temporary context will be placed below all the existing contexts.
To reposition it above the context called “main”, it should be defined
like this:

     \new Staff \with { alignAboveContext = #"main" } 

   A similar situation arises when positioning a temporary lyrics
context within a multi-staved layout such as a ‘ChoirStaff’, for
example, when adding a second verse to a repeated section.  By default
the temporary lyrics context will be placed beneath the lower staves.
By defining the temporary lyrics context with ‘alignBelowContext’ it can
be positioned correctly beneath the (named) lyrics context containing
the first verse.

   Examples showing this repositioning of temporary contexts can be
found elsewhere — see *note (lilypond-learning)Nesting music
expressions::, *note Modifying single staves:: and *note Techniques
specific to lyrics::.

See also
........

   Learning Manual: *note (lilypond-learning)Nesting music
expressions::.

   Notation Reference: *note Modifying single staves::, *note Techniques
specific to lyrics::.

   Application Usage: *note (lilypond-usage)An extra staff appears::.

   Installed Files: ‘ly/engraver-init.ly’.


File: lilypond-notation.info,  Node: Explaining the Internals Reference,  Next: Modifying properties,  Prev: Interpretation contexts,  Up: Changing defaults

5.2 Explaining the Internals Reference
======================================

* Menu:

* Navigating the program reference::
* Layout interfaces::
* Determining the grob property::
* Naming conventions::


File: lilypond-notation.info,  Node: Navigating the program reference,  Next: Layout interfaces,  Up: Explaining the Internals Reference

5.2.1 Navigating the program reference
--------------------------------------

Suppose we want to move the fingering indication in the fragment below:

     c''-2
 [image src="" alt="[image of music]" text="image of music" ]

   If you visit the documentation on fingering instructions (in *note
Fingering instructions::), you will notice:

     *See also*

     Internals Reference: *note (lilypond-internals)Fingering::.

   The programmer’s reference is available as an HTML document.  It is
highly recommended that you read it in HTML form, either online or by
downloading the HTML documentation.  This section will be much more
difficult to understand if you are using the PDF manual.

   Follow the link to *note (lilypond-internals)Fingering::.  At the top
of the page, you will see

     Fingering objects are created by: *note
     (lilypond-internals)Fingering_engraver:: and *note
     (lilypond-internals)New_fingering_engraver::.

   By following related links inside the program reference, we can
follow the flow of information within the program:

   • *note (lilypond-internals)Fingering::: *note
     (lilypond-internals)Fingering:: objects are created by: *note
     (lilypond-internals)Fingering_engraver::

   • *note (lilypond-internals)Fingering_engraver::: Music types
     accepted: *note (lilypond-internals)fingering-event::

   • *note (lilypond-internals)fingering-event::: Music event type
     ‘fingering-event’ is in Music expressions named *note
     (lilypond-internals)FingeringEvent::

   This path goes against the flow of information in the program: it
starts from the output, and ends at the input event.  You could also
start at an input event, and read with the flow of information,
eventually ending up at the output object(s).

   The program reference can also be browsed like a normal document.  It
contains chapters on ‘Music definitions’ on *note
(lilypond-internals)Translation::, and the *note
(lilypond-internals)Backend::.  Every chapter lists all the definitions
used and all properties that may be tuned.


File: lilypond-notation.info,  Node: Layout interfaces,  Next: Determining the grob property,  Prev: Navigating the program reference,  Up: Explaining the Internals Reference

5.2.2 Layout interfaces
-----------------------

The HTML page that we found in the previous section describes the layout
object called *note (lilypond-internals)Fingering::.  Such an object is
a symbol within the score.  It has properties that store numbers (like
thicknesses and directions), but also pointers to related objects.  A
layout object is also called a _Grob_, which is short for Graphical
Object.  For more details about Grobs, see *note
(lilypond-internals)grob-interface::.

   The page for ‘Fingering’ lists the definitions for the ‘Fingering’
object.  For example, the page says

     ‘padding’ (dimension, in staff space):

     ‘0.5’

which means that the number will be kept at a distance of at least 0.5
of the note head.

   Each layout object may have several functions as a notational or
typographical element.  For example, the Fingering object has the
following aspects

   • Its size is independent of the horizontal spacing, unlike slurs or
     beams.

   • It is a piece of text.  Granted, it is usually a very short text.

   • That piece of text is typeset with a font, unlike slurs or beams.

   • Horizontally, the center of the symbol should be aligned to the
     center of the note head.

   • Vertically, the symbol is placed next to the note and the staff.

   • The vertical position is also coordinated with other superscript
     and subscript symbols.

   Each of these aspects is captured in so-called _interface_s, which
are listed on the *note (lilypond-internals)Fingering:: page at the
bottom

     This object supports the following interfaces: *note
     (lilypond-internals)item-interface::, *note
     (lilypond-internals)self-alignment-interface::, *note
     (lilypond-internals)side-position-interface::, *note
     (lilypond-internals)text-interface::, *note
     (lilypond-internals)text-script-interface::, *note
     (lilypond-internals)font-interface::, *note
     (lilypond-internals)finger-interface::, and *note
     (lilypond-internals)grob-interface::.

   Clicking any of the links will take you to the page of the respective
object interface.  Each interface has a number of properties.  Some of
them are not user-serviceable (‘Internal properties’), but others can be
modified.

   We have been talking of _the_ ‘Fingering’ object, but actually it
does not amount to much.  The initialization file (see *note
(lilypond-learning)Other sources of information::)
‘scm/define-grobs.scm’ shows the soul of the ‘object’,

     (Fingering
       . ((padding . 0.5)
          (avoid-slur . around)
          (slur-padding . 0.2)
          (staff-padding . 0.5)
          (self-alignment-X . 0)
          (self-alignment-Y . 0)
          (script-priority . 100)
          (stencil . ,ly:text-interface::print)
          (direction . ,ly:script-interface::calc-direction)
          (font-encoding . fetaText)
          (font-size . -5) 		; don't overlap when next to heads.
          (meta . ((class . Item)
          (interfaces . (finger-interface
                         font-interface
                         text-script-interface
                         text-interface
                         side-position-interface
                         self-alignment-interface
                         item-interface))))))

As you can see, the ‘Fingering’ object is nothing more than a bunch of
variable settings, and the webpage in the Internals Reference is
directly generated from this definition.


File: lilypond-notation.info,  Node: Determining the grob property,  Next: Naming conventions,  Prev: Layout interfaces,  Up: Explaining the Internals Reference

5.2.3 Determining the grob property
-----------------------------------

Recall that we wanted to change the position of the 2 in

     c''-2
 [image src="" alt="[image of music]" text="image of music" ]

   Since the 2 is vertically positioned next to its note, we have to
meddle with the interface associated with this positioning.  This is
done using ‘side-position-interface’.  The page for this interface says

     ‘side-position-interface’

     Position a victim object (this one) next to other objects (the
     support).  The property ‘direction’ signifies where to put the
     victim object relative to the support (left or right, up or down?)

Below this description, the variable ‘padding’ is described as

     ‘padding’
          (dimension, in staff space)

          Add this much extra space between objects that are next to
          each other.

   By increasing the value of ‘padding’, we can move the fingering away
from the note head.  The following command will insert “three staff
spaces” worth of distance between the note and a fingering mark:

     \once \override Voice.Fingering.padding = #3

   Inserting the padding before the fingering object is created results
in the following:

     \once \override Voice.Fingering.padding = #3
     c''-2
 [image src="" alt="[image of music]" text="image of music" ]

   In this case, the context for this tweak is ‘Voice’.  See *note
(lilypond-internals)Fingering_engraver:: plug-in, which says:

     Fingering_engraver is part of contexts: … *note
     (lilypond-internals)Voice::


File: lilypond-notation.info,  Node: Naming conventions,  Prev: Determining the grob property,  Up: Explaining the Internals Reference

5.2.4 Naming conventions
------------------------

Another thing that is needed, is an overview of the various naming
conventions:

   • scheme functions: lowercase-with-hyphens (also includes one-word
     names)

   • LilyPond-specific scheme functions: ly:plus-scheme-style

   • music events, music classes and music properties:
     as-scheme-functions

   • Grob interfaces: scheme-style

   • backend properties: scheme-style (but X and Y!)

   • contexts (and MusicExpressions and grobs): Capitalized or CamelCase

   • context properties: lowercaseFollowedByCamelCase

   • engravers: Capitalized_followed_by_lowercase_and_with_underscores

   Questions to be answered:

   • Which of these are conventions and which are rules?

   • Which are rules of the underlying language, and which are
     LilyPond-specific?


File: lilypond-notation.info,  Node: Modifying properties,  Next: Useful concepts and properties,  Prev: Explaining the Internals Reference,  Up: Changing defaults

5.3 Modifying properties
========================

* Menu:

* Overview of modifying properties::
* The set command::
* The override command::
* The tweak command::
* set versus override::
* Modifying alists::


File: lilypond-notation.info,  Node: Overview of modifying properties,  Next: The set command,  Up: Modifying properties

5.3.1 Overview of modifying properties
--------------------------------------

Each context is responsible for creating certain types of graphical
objects.  The settings used for printing these objects are also stored
by context.  By changing these settings, the appearance of objects can
be altered.

   There are two different kinds of properties stored in contexts:
context properties and grob properties.  Context properties are
properties that apply to the context as a whole and control how the
context itself is displayed.  In contrast, grob properties apply to
specific grob types that will be displayed in the context.

   The ‘\set’ and ‘\unset’ commands are used to change values for
context properties.  The ‘\override’ and ‘\revert’ commands are used to
change values for grob properties.

See also
........

   Internals Reference: *note (lilypond-internals)Backend::, *note
(lilypond-internals)All layout objects::, *note
(lilypond-internals)OverrideProperty::, *note
(lilypond-internals)RevertProperty::, *note
(lilypond-internals)PropertySet::.

Known issues and warnings
.........................

The back-end is not very strict in type-checking object properties.
Cyclic references in Scheme values for properties can cause hangs or
crashes, or both.


File: lilypond-notation.info,  Node: The set command,  Next: The override command,  Prev: Overview of modifying properties,  Up: Modifying properties

5.3.2 The ‘\set’ command
------------------------

Each context has a set of _properties_, variables contained in that
context.  Context properties are changed with the ‘\set’ command, which
has the following syntax:

     \set CONTEXT.PROPERTY = #VALUE

   VALUE is a Scheme object, which is why it must be preceded by the
‘#’ character.

   Contexts properties are usually named in ‘studlyCaps’.  They mostly
control the translation from music to notation, e.g.  ‘localAlterations’
(for determining whether to print accidentals), or ‘measurePosition’
(for determining when to print a bar line).  Context properties can
change value over time while interpreting a piece of music;
‘measurePosition’ is an obvious example of this.  Context properties are
modified with ‘\set’.

   For example, multimeasure rests will be combined into a single bar if
the context property ‘skipBars’ is set to ‘#t’:

     R1*2
     \set Score.skipBars = ##t
     R1*2
 [image src="" alt="[image of music]" text="image of music" ]

   If the CONTEXT argument is left out, then the property will be set in
the current bottom context (typically ‘ChordNames’, ‘Voice’, ‘TabVoice’,
or ‘Lyrics’).

     \set Score.autoBeaming = ##f
     \relative {
       e''8 e e e
       \set autoBeaming = ##t
       e8 e e e
     } \\
     \relative {
       c''8 c c c c8 c c c
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The change is applied ‘on-the-fly’, during the music, so that the
setting only affects the second group of eighth notes.

   Note that the bottom-most context does not always contain the
property that you wish to change – for example, attempting to set the
‘skipBars’ property of the default bottom context, in this case ‘Voice’,
will have no effect, because skipBars is a property of the ‘Score’
context.

     R1*2
     \set skipBars = ##t
     R1*2
 [image src="" alt="[image of music]" text="image of music" ]

   Contexts are hierarchical, so if an enclosing context was specified,
for example ‘Staff’, then the change would also apply to all ‘Voice’s in
the current staff.

   The ‘\unset’ command:

     \unset CONTEXT.PROPERTY

is used to remove the definition of PROPERTY from CONTEXT.  This command
removes the definition only if it is set in CONTEXT.  Properties that
have been set in enclosing contexts will not be altered by an unset in
an enclosed context:

     \set Score.autoBeaming = ##t
     \relative {
       \unset autoBeaming
       e''8 e e e
       \unset Score.autoBeaming
       e8 e e e
     } \\
     \relative {
       c''8 c c c c8 c c c
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Like ‘\set’, the CONTEXT argument does not have to be specified for a
bottom context, so the two statements

     \set Voice.autoBeaming = ##t
     \set autoBeaming = ##t

are equivalent if the current bottom context is ‘Voice’.

   Preceding a ‘\set’ or ‘\unset’ command by ‘\once’ makes the setting
apply to only a single time-step:

     c''4
     \once \set fontSize = #4.7
     c''4
     c''4
 [image src="" alt="[image of music]" text="image of music" ]

   A full description of all available context properties is in the
internals reference, see Translation ↦ Tunable context properties.

See also
........

   Internals Reference: *note (lilypond-internals)Tunable context
properties::.


File: lilypond-notation.info,  Node: The override command,  Next: The tweak command,  Prev: The set command,  Up: Modifying properties

5.3.3 The ‘\override’ command
-----------------------------

There is a special type of context property: the grob description.  Grob
descriptions are named in ‘StudlyCaps’ (starting with capital letters).
They contain the ‘default settings’ for a particular kind of grob as an
association list.  See ‘scm/define-grobs.scm’ to see the settings for
each grob description.  Grob descriptions are modified with ‘\override’.

   The syntax for the ‘\override’ command is

     \override [CONTEXT.]GROBNAME.PROPERTY = #VALUE

   For example, we can increase the thickness of a note stem by
overriding the ‘thickness’ property of the ‘Stem’ object:

     c''4 c''
     \override Voice.Stem.thickness = #3.0
     c''4 c''
 [image src="" alt="[image of music]" text="image of music" ]

   If no context is specified in an ‘\override’, the bottom context is
used:

     \override Staff.Stem.thickness = #3.0
     <<
       \relative {
         e''4 e
         \override Stem.thickness = #0.5
         e4 e
       } \\
       \relative {
         c''4 c c c
       }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   Some tweakable options are called ‘subproperties’ and reside inside
properties.  To tweak those, use commands in the form

     \override Stem.details.beamed-lengths = #'(4 4 3)

   or to modify the ends of spanners, use a form like these

     \override TextSpanner.bound-details.left.text = #"left text"
     \override TextSpanner.bound-details.right.text = #"right text"

   The effects of ‘\override’ can be undone by ‘\revert’.

   The syntax for the ‘\revert’ command is

     \revert [CONTEXT.]GROBNAME.PROPERTY

   For example,

     \relative {
       c''4
       \override Voice.Stem.thickness = #3.0
       c4 c
       \revert Voice.Stem.thickness
       c4
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The effects of ‘\override’ and ‘\revert’ apply to all grobs in the
affected context from the current time forward:

     <<
       \relative {
         e''4
         \override Staff.Stem.thickness = #3.0
         e4 e e
       } \\
       \relative {
         c''4 c c
         \revert Staff.Stem.thickness
         c4
       }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   ‘\once’ can be used with ‘\override’ or ‘\revert’ to affect only the
current time step:

     <<
       \relative c {
         \override Stem.thickness = #3.0
         e''4 e e e
       } \\
       \relative {
         c''4
         \once \override Stem.thickness = #3.0
         c4 c c
       }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

See also
........

   Internals Reference: *note (lilypond-internals)Backend::


File: lilypond-notation.info,  Node: The tweak command,  Next: set versus override,  Prev: The override command,  Up: Modifying properties

5.3.4 The ‘\tweak’ command
--------------------------

Changing grob properties with ‘\override’ causes the changes to apply to
all of the given grobs in the context at the moment the change applies.
Sometimes, however, it is desirable to have changes apply to just one
grob, rather than to all grobs in the affected context.  This is
accomplished with the ‘\tweak’ command, which has the following syntax:

     \tweak [LAYOUT-OBJECT.]GROB-PROPERTY VALUE

   Specifying LAYOUT-OBJECT is optional.  The ‘\tweak’ command applies
to the music object that immediately follows VALUE in the music stream.

   For an introduction to the syntax and uses of the tweak command see
*note (lilypond-learning)Tweaking methods::.

   When several similar items are placed at the same musical moment, the
‘\override’ command cannot be used to modify just one of them – this is
where the ‘\tweak’ command must be used.  Items which may appear more
than once at the same musical moment include the following:

   • note heads of notes inside a chord
   • articulation signs on a single note
   • ties between notes in a chord
   • tuplet brackets starting at the same time

   In this example, the color of one note head and the type of another
note head are modified within a single chord:

     < c''
       \tweak color #red
       d''
       g''
       \tweak duration-log #1
       a''
     > 4
 [image src="" alt="[image of music]" text="image of music" ]

   ‘\tweak’ can be used to modify slurs:

     \relative { c'-\tweak thickness #5 ( d e f) }
 [image src="" alt="[image of music]" text="image of music" ]

   For the ‘\tweak’ command to work, it must remain immediately adjacent
to the object to which it is to apply after the input file has been
converted to a music stream.  Tweaking a whole chord does not do
anything since its music event only acts as a container, and all layout
objects are created from events inside of the ‘EventChord’:

     \tweak color #red c''4
     \tweak color #red <c'' e''>4
     <\tweak color #red c'' e''>4
 [image src="" alt="[image of music]" text="image of music" ]

   The simple ‘\tweak’ command cannot be used to modify any object that
is not directly created from the input.  In particular it will not
affect stems, automatic beams or accidentals, since these are generated
later by ‘NoteHead’ layout objects rather than by music elements in the
input stream.

   Such indirectly created layout objects can be tweaked using the form
of the ‘\tweak’ command in which the grob name is specified explicitly:

     \tweak Stem.color #red
     \tweak Beam.color #green c''8 e''
     <c'' e'' \tweak Accidental.font-size #-3 ges''>4
 [image src="" alt="[image of music]" text="image of music" ]

   ‘\tweak’ cannot be used to modify clefs or time signatures, since
these become separated from any preceding ‘\tweak’ command in the input
stream by the automatic insertion of extra elements required to specify
the context.

   Several ‘\tweak’ commands may be placed before a notational element –
all affect it:

     c'
       -\tweak style #'dashed-line
       -\tweak dash-fraction #0.2
       -\tweak thickness #3
       -\tweak color #red
       \glissando
     f''
 [image src="" alt="[image of music]" text="image of music" ]

   The music stream which is generated from a section of an input file,
including any automatically inserted elements, may be examined, see
*note (lilypond-extending)Displaying music expressions::.  This may be
helpful in determining what may be modified by a ‘\tweak’ command, or in
determining how to adjust the input to make a ‘\tweak’ apply.

See also
........

   Learning Manual: *note (lilypond-learning)Tweaking methods::.

   Extending LilyPond: *note (lilypond-extending)Displaying music
expressions::.

Known issues and warnings
.........................

The ‘\tweak’ command cannot be used to modify the control points of just
one of several ties in a chord, other than the first one encountered in
the input file.


File: lilypond-notation.info,  Node: set versus override,  Next: Modifying alists,  Prev: The tweak command,  Up: Modifying properties

5.3.5 ‘\set’ vs. ‘\override’
----------------------------

The ‘\set’ and ‘\override’ commands manipulate properties associated
with contexts.  In both cases, the properties follow a _hierarchy of
contexts_; properties that are not set themselves in a context will
still show the values of their respective parent’s context.

   The lifetime and value of a context property is dynamic and only
available when music is being interpreted (i.e.  ‘iterated’).  At the
time of the context’s creation, properties are initialized from its
corresponding definitions (along with any other modifications) of that
context.  Any subsequent changes are achieved with any
‘property-setting’ commands that are within the music itself.

   Graphical Object (or “grob”) definitions are a _special_ category of
context properties as their structure and use is different from that of
normal context properties.  Unlike normal context properties, grob
definitions are subdivided into _grob properties_.

   Also, in contrast to normal context properties, grob definitions have
their own internal ‘bookkeeping’ used to keep track of their own
individual grob properties and any sub-properties.  This means that it
is possible to define those parts within different contexts and yet
still have the overall grob definition at the time of grob creation from
all the pieces provided amongst the current context and its parent(s).

   A grob is usually created by an engraver at the time of interpreting
a music expression and receives its initial properties from the current
grob definition of the engraver’s context.  The engraver (or other
‘backend’ parts of LilyPond) can then change (or add to) the grob’s
initial properties.  However, this does not affect the context’s own
grob definition.

   What LilyPond calls _grob properties_ in the context of ‘user-level’
tweaks are really the properties of a _context’s_ own grob definition.

   Grob definitions are accessed with a different set of commands and
are manipulated using ‘\override’ and ‘\revert’ and have a name starting
with a capital letter (e.g.  ‘NoteHead’); whereas normal context
properties are manipulated using ‘\set’ and ‘\unset’ and are named
starting with a lowercase letter.

   The commands ‘\tweak’ and ‘\overrideProperty’ change grob properties
by bypassing all context properties completely and, instead, catch grobs
as they are being created, setting properties on them for a music event
(‘\tweak’) or, in the case of ‘\overrideProperty’ for a specific
override.


File: lilypond-notation.info,  Node: Modifying alists,  Prev: set versus override,  Up: Modifying properties

5.3.6 Modifying alists
----------------------

Some user-configurable properties are internally represented as _alists_
(association lists), which store pairs of _keys_ and _values_.  The
structure of an alist is:

     '((KEY1 . VALUE1)
       (KEY2 . VALUE2)
       (KEY3 . VALUE3)
       …)

   If an alist is a grob property or ‘\paper’ variable, its keys can be
modified individually without affecting other keys.

   For example, to reduce the space between adjacent staves in a
staff-group, use the ‘staff-staff-spacing’ property of the
‘StaffGrouper’ grob.  The property is an alist with four keys:
‘basic-distance’, ‘minimum-distance’, ‘padding’, and ‘stretchability’.
The standard settings for this property are listed in the “Backend”
section of the Internals Reference (see *note
(lilypond-internals)StaffGrouper::):

     '((basic-distance . 9)
       (minimum-distance . 7)
       (padding . 1)
       (stretchability . 5))

   One way to bring the staves closer together is by reducing the value
of the ‘basic-distance’ key (‘9’) to match the value of
‘minimum-distance’ (‘7’).  To modify a single key individually, use a
_nested declaration_:

     % default space between staves
     \new PianoStaff <<
       \new Staff { \clef treble c''1 }
       \new Staff { \clef bass   c1   }
     >>

     % reduced space between staves
     \new PianoStaff \with {
       % this is the nested declaration
       \override StaffGrouper.staff-staff-spacing.basic-distance = #7
     } <<
       \new Staff { \clef treble c''1 }
       \new Staff { \clef bass   c1   }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   Using a nested declaration will update the specified key (such as
‘basic-distance’ in the above example) without altering any other keys
already set for the same property.

   Now suppose we want the staves to be as close as possible without
overlapping.  The simplest way to do this is to set all four alist keys
to zero.  However, it is not necessary to enter four nested
declarations, one for each key.  Instead, the property can be completely
re-defined with one declaration, as an alist:

     \new PianoStaff \with {
       \override StaffGrouper.staff-staff-spacing =
         #'((basic-distance . 0)
            (minimum-distance . 0)
            (padding . 0)
            (stretchability . 0))
     } <<
       \new Staff { \clef treble c''1 }
       \new Staff { \clef bass   c1   }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   Note that any keys not explicitly listed in the alist definition will
be reset to their _default-when-unset_ values.  In the case of
‘staff-staff-spacing’, any unset key-values would be reset to zero
(except ‘stretchability’, which takes the value of ‘basic-distance’ when
unset).  Thus the following two declarations are equivalent:

     \override StaffGrouper.staff-staff-spacing =
       #'((basic-distance . 7))

     \override StaffGrouper.staff-staff-spacing =
       #'((basic-distance . 7)
          (minimum-distance . 0)
          (padding . 0)
          (stretchability . 7))

   One (possibly unintended) consequence of this is the removal of any
standard settings that are set in an initialization file and loaded each
time an input file is compiled.  In the above example, the standard
settings for ‘padding’ and ‘minimum-distance’ (defined in
‘scm/define-grobs.scm’) are reset to their default-when-unset values
(zero for both keys).  Defining a property or variable as an alist (of
any size) will always reset all unset key-values to their
default-when-unset values.  Unless this is the intended result, it is
safer to update key-values individually with a nested declaration.

          Note: Nested declarations will not work for context property
          alists (such as ‘beamExceptions’, ‘keyAlterations’,
          ‘timeSignatureSettings’, etc.).  These properties can only be
          modified by completely re-defining them as alists.


File: lilypond-notation.info,  Node: Useful concepts and properties,  Next: Advanced tweaks,  Prev: Modifying properties,  Up: Changing defaults

5.4 Useful concepts and properties
==================================

* Menu:

* Input modes::
* Direction and placement::
* Distances and measurements::
* Dimensions::
* Staff symbol properties::
* Spanners::
* Visibility of objects::
* Line styles::
* Rotating objects::


File: lilypond-notation.info,  Node: Input modes,  Next: Direction and placement,  Up: Useful concepts and properties

5.4.1 Input modes
-----------------

The way in which the notation contained within an input file is
interpreted is determined by the current input mode.

Chord mode
..........

This is activated with the ‘\chordmode’ command, and causes input to be
interpreted with the syntax of chord notation, see *note Chord
notation::.  Chords are rendered as notes on a staff.

   Chord mode is also activated with the ‘\chords’ command.  This also
creates a new ‘ChordNames’ context and causes the following input to be
interpreted with the syntax of chord notation and rendered as chord
names in the ‘ChordNames’ context, see *note Printing chord names::.

Drum mode
.........

This is activated with the ‘\drummode’ command, and causes input to be
interpreted with the syntax of drum notation, see *note Basic percussion
notation::.

   Drum mode is also activated with the ‘\drums’ command.  This also
creates a new ‘DrumStaff’ context and causes the following input to be
interpreted with the syntax of drum notation and rendered as drum
symbols on a drum staff, see *note Basic percussion notation::.

Figure mode
...........

This is activated with the ‘\figuremode’ command, and causes input to be
interpreted with the syntax of figured bass, see *note Entering figured
bass::.

   Figure mode is also activated with the ‘\figures’ command.  This also
creates a new ‘FiguredBass’ context and causes the following input to be
interpreted with the figured bass syntax and rendered as figured bass
symbols in the ‘FiguredBass’ context, see *note Introduction to figured
bass::.

Fret and tab modes
..................

There are no special input modes for entering fret and tab symbols.

   To create tab diagrams, enter notes or chords in note mode and render
them in a ‘TabStaff’ context, see *note Default tablatures::.

   To create fret diagrams above a staff, you have two choices.  You can
either use the ‘FretBoards’ context (see *note Automatic fret
diagrams::) or you can enter them as a markup above the notes using the
‘\fret-diagram’ command (see *note Fret diagram markups::).

Lyrics mode
...........

This is activated with the ‘\lyricmode’ command, and causes input to be
interpreted as lyric syllables with optional durations and associated
lyric modifiers, see *note Vocal music::.

   Lyric mode is also activated with the ‘\addlyrics’ command.  This
also creates a new ‘Lyrics’ context and an implicit ‘\lyricsto’ command
which associates the following lyrics with the preceding music.

Markup mode
...........

This is activated with the ‘\markup’ command, and causes input to be
interpreted with the syntax of markup, see *note Text markup commands::.

Note mode
.........

This is the default mode or it may be activated with the ‘\notemode’
command.  Input is interpreted as pitches, durations, markup, etc and
typeset as musical notation on a staff.

   It is not normally necessary to specify note mode explicitly, but it
may be useful to do so in certain situations, for example if you are in
lyric mode, chord mode or any other mode and want to insert something
that only can be done with note mode syntax.


File: lilypond-notation.info,  Node: Direction and placement,  Next: Distances and measurements,  Prev: Input modes,  Up: Useful concepts and properties

5.4.2 Direction and placement
-----------------------------

In typesetting music the direction and placement of many items is a
matter of choice.  For example, the stems of notes can be directed up or
down; lyrics, dynamics, and other expressive marks may be placed above
or below the staff; text may be aligned left, right or center; etc.
Most of these choices may be left to be determined automatically by
LilyPond, but in some cases it may be desirable to force a particular
direction or placement.

* Menu:

* Articulation direction indicators::
* The direction property::


File: lilypond-notation.info,  Node: Articulation direction indicators,  Next: The direction property,  Up: Direction and placement

Articulation direction indicators
.................................

By default some directions are always up or always down (e.g.  dynamics
or fermata), while other things can alternate between up or down based
on the stem direction (like slurs or accents).

   The default action may be overridden by prefixing the articulation by
a _direction indicator_.  Three direction indicators are available: ‘^’
(meaning “up”), ‘_’ (meaning “down”) and ‘-’ (meaning “use default
direction”).  The direction indicator can usually be omitted, in which
case ‘-’ is assumed, but a direction indicator is *always* required
before

   • ‘\tweak’ commands
   • ‘\markup’ commands
   • ‘\tag’ commands
   • string markups, e.g.  -"string"
   • fingering instructions, e.g.  ‘-1’
   • articulation shortcuts, e.g.  ‘-.’, ‘->’, ‘--’

   Direction indicators affect only the next note:

     \relative {
       c''2( c)
       c2_( c)
       c2( c)
       c2^( c)
     }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: The direction property,  Prev: Articulation direction indicators,  Up: Direction and placement

The direction property
......................

The position or direction of many layout objects is controlled by the
‘direction’ property.

   The value of the ‘direction’ property may be set to ‘1’, meaning “up”
or “above”, or to ‘-1’, meaning “down” or “below”.  The symbols ‘UP’ and
‘DOWN’ may be used instead of ‘1’ and ‘-1’ respectively.  The default
direction may be specified by setting ‘direction’ to ‘0’ or ‘CENTER’.
Alternatively, in many cases predefined commands exist to specify the
direction.  These are of the form

     \xxxUp, \xxxDown or \xxxNeutral

where ‘\xxxNeutral’ means “use the default” direction.  See *note
(lilypond-learning)Within-staff objects::.

   In a few cases, arpeggio for example, the value of the ‘direction’
property can specify whether the object is to be placed to the right or
left of the parent.  In this case ‘-1’ or ‘LEFT’ means “to the left” and
‘1’ or ‘RIGHT’ means “to the right”.  ‘0’ or ‘CENTER’ means “use the
default” direction.

   These indications affect all notes until they are canceled.

     \relative {
       c''2( c)
       \slurDown
       c2( c)
       c2( c)
       \slurNeutral
       c2( c)
     }
 [image src="" alt="[image of music]" text="image of music" ]

   In polyphonic music, it is generally better to specify an explicit
‘voice’ than change an object’s direction.  For more information, see
*note Multiple voices::.

See also
........

   Learning Manual: *note (lilypond-learning)Within-staff objects::.

   Notation Reference: *note Multiple voices::.


File: lilypond-notation.info,  Node: Distances and measurements,  Next: Dimensions,  Prev: Direction and placement,  Up: Useful concepts and properties

5.4.3 Distances and measurements
--------------------------------

Distances in LilyPond are of two types: absolute and scaled.

   Absolute distances are used for specifying margins, indents, and
other page layout details, and are by default specified in millimeters.
Distances may be specified in other units by following the quantity by
‘\mm’, ‘\cm’, ‘\in’ (inches), or ‘\pt’ (points, 1/72.27 of an inch).
Page layout distances can also be specified in scalable units (see the
following paragraph) by appending ‘\staff-space’ to the quantity.  Page
layout is described in detail in *note Page layout::.

   Scaled distances are always specified in units of the staff-space or,
rarely, the half staff-space.  The staff-space is the distance between
two adjacent staff lines.  The default value can be changed globally by
setting the global staff size, or it can be overridden locally by
changing the ‘staff-space’ property of ‘StaffSymbol’.  Scaled distances
automatically scale with any change to the either the global staff size
or the ‘staff-space’ property of ‘StaffSymbol’, but fonts scale
automatically only with changes to the global staff size.  The global
staff size thus enables the overall size of a rendered score to be
easily varied.  For the methods of setting the global staff size see
*note Setting the staff size::.

   If just a section of a score needs to be rendered to a different
scale, for example an ossia section or a footnote, the global staff size
cannot simply be changed as this would affect the entire score.  In such
cases the change in size is made by overriding both the ‘staff-space’
property of ‘StaffSymbol’ and the size of the fonts.  A Scheme function,
‘magstep’, is available to convert from a font size change to the
equivalent change in ‘staff-space’.  For an explanation and an example
of its use, see *note (lilypond-learning)Length and thickness of
objects::.

See also
........

   Learning Manual: *note (lilypond-learning)Length and thickness of
objects::.

   Notation Reference: *note Page layout::, *note Setting the staff
size::.


File: lilypond-notation.info,  Node: Dimensions,  Next: Staff symbol properties,  Prev: Distances and measurements,  Up: Useful concepts and properties

5.4.4 Dimensions
----------------

The dimensions of a graphical object specify the positions of the left
and right edges and the bottom and top edges of the objects’ bounding
box as distances from the objects’ reference point in units of
staff-spaces.  These positions are usually coded as two Scheme pairs.
For example, the text markup command ‘\with-dimensions’ takes three
arguments, the first two of which are a Scheme pair giving the left and
right edge positions and a Scheme pair giving the bottom and top edge
positions:

     \with-dimensions #'(-5 . 10) #'(-3 . 15) ARG

   This specifies a bounding box for ARG with its left edge at -5, its
right edge at 10, its bottom edge at -3 and its top edge at 15, all
measured from the objects’ reference point in units of staff-spaces.

See also
........

   Notation Reference: *note Distances and measurements::.


File: lilypond-notation.info,  Node: Staff symbol properties,  Next: Spanners,  Prev: Dimensions,  Up: Useful concepts and properties

5.4.5 Staff symbol properties
-----------------------------

The vertical position of staff lines and the number of staff lines can
be defined at the same time.  As the following example shows, note
positions are not influenced by the staff line positions.

          Note: The ‘'line-positions’ property overrides the
          ‘'line-count’ property.  The number of staff lines is
          implicitly defined by the number of elements in the list of
          values for ‘'line-positions’.

     \new Staff \with {
       \override StaffSymbol.line-positions = #'(7 3 0 -4 -6 -7)
     }
     \relative { a4 e' f b | d1 }
 [image src="" alt="[image of music]" text="image of music" ]

   The width of a staff can be modified.  The units are staff spaces.
The spacing of objects inside the staff is not affected by this setting.

     \new Staff \with {
       \override StaffSymbol.width = #23
     }
     \relative { a4 e' f b | d1 }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Spanners,  Next: Visibility of objects,  Prev: Staff symbol properties,  Up: Useful concepts and properties

5.4.6 Spanners
--------------

Many objects of musical notation extend over several notes or even
several bars.  Examples are slurs, beams, tuplet brackets, volta repeat
brackets, crescendi, trills, and glissandi.  Such objects are
collectively called “spanners”, and have special properties to control
their appearance and behaviour.  Some of these properties are common to
all spanners; others are restricted to a sub-set of the spanners.

   All spanners support the ‘spanner-interface’.  A few, essentially
those that draw a straight line between the two objects, support in
addition the ‘line-spanner-interface’.

* Menu:

* Using the spanner-interface::
* Using the line-spanner-interface::


File: lilypond-notation.info,  Node: Using the spanner-interface,  Next: Using the line-spanner-interface,  Up: Spanners

Using the ‘spanner-interface’
.............................

This interface provides two properties that apply to several spanners.

The ‘minimum-length’ property
.............................

The minimum length of the spanner is specified by the ‘minimum-length’
property.  Increasing this usually has the necessary effect of
increasing the spacing of the notes between the two end points.
However, this override has no effect on many spanners, as their length
is determined by other considerations.  A few examples where it is
effective are shown below.

     a'~ a'
     a'
     % increase the length of the tie
     -\tweak minimum-length #5
     ~ a'
 [image src="" alt="[image of music]" text="image of music" ]

     \relative \compressMMRests {
       a'1
       R1*23
       % increase the length of the rest bar
       \once \override MultiMeasureRest.minimum-length = #20
       R1*23
       a1
     }
 [image src="" alt="[image of music]" text="image of music" ]

     \relative {
       a' \< a a a \!
       % increase the length of the hairpin
       \override Hairpin.minimum-length = #20
       a \< a a a \!
     }
 [image src="" alt="[image of music]" text="image of music" ]

   This override can also be used to increase the length of slurs and
phrasing slurs:

     \relative {
       a'( g)
       a
       -\tweak minimum-length #5
       ( g)

       a\( g\)
       a
       -\tweak minimum-length #5
       \( g\)
     }
 [image src="" alt="[image of music]" text="image of music" ]

   For some layout objects, the ‘minimum-length’ property becomes
effective only if the ‘set-spacing-rods’ procedure is called explicitly.
To do this, the ‘springs-and-rods’ property should be set to
‘ly:spanner::set-spacing-rods’.  For example, the minimum length of a
glissando has no effect unless the ‘springs-and-rods’ property is set:

     % default
     e' \glissando c''

     % not effective alone
     \once \override Glissando.minimum-length = #20
     e' \glissando c''

     % effective only when both overrides are present
     \once \override Glissando.minimum-length = #20
     \once \override Glissando.springs-and-rods = #ly:spanner::set-spacing-rods
     e' \glissando c''
 [image src="" alt="[image of music]" text="image of music" ]

   The same is true of the ‘Beam’ object:

     % not effective alone
     \once \override Beam.minimum-length = #20
     e'8 e' e' e'

     % effective only when both overrides are present
     \once \override Beam.minimum-length = #20
     \once \override Beam.springs-and-rods = #ly:spanner::set-spacing-rods
     e'8 e' e' e'
 [image src="" alt="[image of music]" text="image of music" ]

The ‘to-barline’ property
.........................

The second useful property of the ‘spanner-interface’ is ‘to-barline’.
By default this is true, causing hairpins and other spanners which are
terminated on the first note of a measure to end instead on the
immediately preceding bar line.  If set to false, the spanner will
extend beyond the bar line and end on the note itself:

     \relative {
       a' \< a a a a \! a a a \break
       \override Hairpin.to-barline = ##f
       a \< a a a a \! a a a
     }
 [image src="" alt="[image of music]" text="image of music" ]

   This property is not effective for all spanners.  For example,
setting it to ‘#t’ has no effect on slurs or phrasing slurs or on other
spanners for which terminating on the bar line would not be meaningful.


File: lilypond-notation.info,  Node: Using the line-spanner-interface,  Prev: Using the spanner-interface,  Up: Spanners

Using the ‘line-spanner-interface’
..................................

Objects which support the ‘line-spanner-interface’ include

   • ‘DynamicTextSpanner’
   • ‘Glissando’
   • ‘TextSpanner’
   • ‘TrillSpanner’
   • ‘VoiceFollower’

   The routine responsible for drawing the stencils for these spanners
is ‘ly:line-spanner::print’.  This routine determines the exact location
of the two end points and draws a line between them, in the style
requested.  The locations of the two end points of the spanner are
computed on-the-fly, but it is possible to override their Y-coordinates.
The properties which need to be specified are nested two levels down
within the property hierarchy, but the syntax of the ‘\override’ command
is quite simple:

     e''2 \glissando b'
     \once \override Glissando.bound-details.left.Y = #3
     \once \override Glissando.bound-details.right.Y = #-2
     e''2 \glissando b'
 [image src="" alt="[image of music]" text="image of music" ]

   The units for the ‘Y’ property are ‘staff-space’s, with the center
line of the staff being the zero point.  For the glissando, this is the
value for ‘Y’ at the X-coordinate corresponding to the center point of
each note head, if the line is imagined to be extended to there.

   If ‘Y’ is not set, the value is computed from the vertical position
of the corresponding attachment point of the spanner.

   In case of a line break, the values for the end points are specified
by the ‘left-broken’ and ‘right-broken’ sub-lists of ‘bound-details’.
For example:

     \override Glissando.breakable = ##t
     \override Glissando.bound-details.right-broken.Y = #-3
     c''1 \glissando \break
     f''1
 [image src="" alt="[image of music]" text="image of music" ]

   A number of further properties of the ‘left’ and ‘right’ sub-lists of
the ‘bound-details’ property may be modified in the same way as ‘Y’:

‘Y’
     This sets the Y-coordinate of the end point, in ‘staff-space’s
     offset from the staff center line.  By default, it is the center of
     the bound object, so a glissando points to the vertical center of
     the note head.

     For horizontal spanners, such as text spanners and trill spanners,
     it is hardcoded to 0.

‘attach-dir’
     This determines where the line starts and ends in the X-direction,
     relative to the bound object.  So, a value of ‘-1’ (or ‘LEFT’)
     makes the line start/end at the left side of the note head it is
     attached to.

‘X’
     This is the absolute X-coordinate of the end point.  It is usually
     computed on the fly, and overriding it has little useful effect.

‘stencil’
     Line spanners may have symbols at the beginning or end, which is
     contained in this sub-property.  This is for internal use; it is
     recommended that ‘text’ be used instead.

‘text’
     This is a markup that is evaluated to yield the stencil.  It is
     used to put cresc., tr and other text on horizontal spanners.

          \override TextSpanner.bound-details.left.text
             = \markup { \small \bold Slower }
          \relative { c''2\startTextSpan b c a\stopTextSpan }
 [image src="" alt="[image of music]" text="image of music" ]

‘stencil-align-dir-y’
‘stencil-offset’
     Without setting one of these, the stencil is simply put at the
     end-point, centered on the line, as defined by the ‘X’ and ‘Y’
     sub-properties.  Setting either ‘stencil-align-dir-y’ or
     ‘stencil-offset’ will move the symbol at the edge vertically
     relative to the end point of the line:

          \override TextSpanner.bound-details.left.stencil-align-dir-y = #-2
          \override TextSpanner.bound-details.right.stencil-align-dir-y = #UP

          \override TextSpanner.bound-details.left.text = #"ggg"
          \override TextSpanner.bound-details.right.text = #"hhh"

          \relative { c'4^\startTextSpan c c c \stopTextSpan }
 [image src="" alt="[image of music]" text="image of music" ]

     Note that negative values move the text _up_, contrary to the
     effect that might be expected, as a value of ‘-1’ or ‘DOWN’ means
     align the _bottom_ edge of the text with the spanner line.  A value
     of ‘1’ or ‘UP’ aligns the top edge of the text with the spanner
     line.

‘arrow’
     Setting this sub-property to ‘#t’ produces an arrowhead at the
     end-points of the line.

‘padding’
     This sub-property controls the space between the specified end
     point of the line and the actual end.  Without padding, a glissando
     would start and end in the center of each note head.

   The music function ‘\endSpanners’ terminates the spanner which starts
on the immediately following note prematurely.  It is terminated after
exactly one note, or at the following bar line if ‘to-barline’ is true
and a bar line occurs before the next note.

     \relative c'' {
       \endSpanners
       c2 \startTextSpan c2 c2
       \endSpanners
       c2 \< c2 c2
     }
 [image src="" alt="[image of music]" text="image of music" ]

   When using ‘\endSpanners’ it is not necessary to close \startTextSpan
with \stopTextSpan, nor is it necessary to close hairpins with ‘\!’.

See also
........

   Internals Reference: *note (lilypond-internals)TextSpanner::, *note
(lilypond-internals)Glissando::, *note
(lilypond-internals)VoiceFollower::, *note
(lilypond-internals)TrillSpanner::, *note
(lilypond-internals)line-spanner-interface::.


File: lilypond-notation.info,  Node: Visibility of objects,  Next: Line styles,  Prev: Spanners,  Up: Useful concepts and properties

5.4.7 Visibility of objects
---------------------------

There are four main ways in which the visibility of layout objects can
be controlled: their stencil can be removed, they can be made
transparent, they can be colored white, or their ‘break-visibility’
property can be overridden.  The first three apply to all layout
objects; the last to just a few – the _breakable_ objects.  The Learning
Manual introduces these four techniques, see *note
(lilypond-learning)Visibility and color of objects::.

   There are also a few other techniques which are specific to certain
layout objects.  These are covered under Special considerations.

* Menu:

* Removing the stencil::
* Making objects transparent::
* Painting objects white::
* Using break-visibility::
* Special considerations::


File: lilypond-notation.info,  Node: Removing the stencil,  Next: Making objects transparent,  Up: Visibility of objects

Removing the stencil
....................

Every layout object has a stencil property.  By default this is set to
the specific function which draws that object.  If this property is
overridden to ‘#f’ no function will be called and the object will not be
drawn.  The default action can be recovered with ‘\revert’.

     a1 a
     \override Score.BarLine.stencil = ##f
     a a
     \revert Score.BarLine.stencil
     a a a
 [image src="" alt="[image of music]" text="image of music" ]

   This rather common operation has a shortcut ‘\omit’:

     a1 a
     \omit Score.BarLine
     a a
     \undo \omit Score.BarLine
     a a a
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Making objects transparent,  Next: Painting objects white,  Prev: Removing the stencil,  Up: Visibility of objects

Making objects transparent
..........................

Every layout object has a transparent property which by default is set
to ‘#f’.  If set to ‘#t’ the object still occupies space but is made
invisible.

     a'4 a'
     \once \override NoteHead.transparent = ##t
     a' a'
 [image src="" alt="[image of music]" text="image of music" ]

   This rather common operation has a shortcut ‘\hide’:

     a'4 a'
     \once \hide NoteHead
     a' a'
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Painting objects white,  Next: Using break-visibility,  Prev: Making objects transparent,  Up: Visibility of objects

Painting objects white
......................

Every layout object has a color property which by default is set to
‘black’.  If this is overridden to ‘white’ the object will be
indistinguishable from the white background.  However, if the object
crosses other objects the color of the crossing points will be
determined by the order in which they are drawn, and this may leave a
ghostly image of the white object, as shown here:

     \override Staff.Clef.color = #white
     a'1
 [image src="" alt="[image of music]" text="image of music" ]

   This may be avoided by changing the order of printing the objects.
All layout objects have a ‘layer’ property which should be set to an
integer.  Objects with the lowest value of ‘layer’ are drawn first, then
objects with progressively higher values are drawn, so objects with
higher values overwrite objects with lower values.  By default most
objects are assigned a ‘layer’ value of ‘1’, although a few objects,
including ‘StaffSymbol’ and ‘BarLine’, are assigned a value of ‘0’.  The
order of printing objects with the same value of ‘layer’ is
indeterminate.

   In the example above the white clef, with a default ‘layer’ value of
‘1’, is drawn after the staff lines (default ‘layer’ value ‘0’), so
overwriting them.  To change this, the ‘Clef’ object must be given in a
lower value of ‘layer’, say ‘-1’, so that it is drawn earlier:

     \override Staff.Clef.color = #white
     \override Staff.Clef.layer = #-1
     a'1
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Using break-visibility,  Next: Special considerations,  Prev: Painting objects white,  Up: Visibility of objects

Using break-visibility
......................

Most layout objects are printed only once, but some like bar lines,
clefs, time signatures and key signatures, may need to be printed twice
when a line break occurs – once at the end of the line and again at the
start of the next line.  Such objects are called _breakable_, and have a
property, the ‘break-visibility’ property to control their visibility at
the three positions in which they may appear – at the start of a line,
within a line if they are changed, and at the end of a line if a change
takes place there.

   For example, the time signature by default will be printed at the
start of the first line, but nowhere else unless it changes, when it
will be printed at the point at which the change occurs.  If this change
occurs at the end of a line the new time signature will be printed at
the start of the next line and a cautionary time signature will be
printed at the end of the previous line as well.

   This behaviour is controlled by the ‘break-visibility’ property,
which is explained in *note (lilypond-learning)Visibility and color of
objects::.  This property takes a vector of three booleans which, in
order, determine whether the object is printed at the end of, within the
body of, or at the beginning of a line.  Or to be more precise, before a
line break, where there is no line break, or after a line break.

   Alternatively, these eight combinations may be specified by
pre-defined functions, defined in ‘scm/output-lib.scm’, where the last
three columns indicate whether the layout objects will be visible in the
positions shown at the head of the columns:

Function                    Vector          Before   At no   After
---------------------------------------------------------------------
form                        form            break    break   break
                                                             
---------------------------------------------------------------------
‘all-visible’               ‘#(#t #t #t)’   yes      yes     yes
‘begin-of-line-visible’     ‘#(#f #f #t)’   no       no      yes
‘center-visible’            ‘#(#f #t #f)’   no       yes     no
‘end-of-line-visible’       ‘#(#t #f #f)’   yes      no      no
‘begin-of-line-invisible’   ‘#(#t #t #f)’   yes      yes     no
‘center-invisible’          ‘#(#t #f #t)’   yes      no      yes
‘end-of-line-invisible’     ‘#(#f #t #t)’   no       yes     yes
‘all-invisible’             ‘#(#f #f #f)’   no       no      no

   The default settings of ‘break-visibility’ depend on the layout
object.  The following table shows all the layout objects of interest
which are affected by ‘break-visibility’ and the default setting of this
property:

Layout object          Usual context          Default setting
                                              
----------------------------------------------------------------------------
‘BarLine’              ‘Score’                calculated
‘BarNumber’            ‘Score’                ‘begin-of-line-visible’
‘BreathingSign’        ‘Voice’                ‘begin-of-line-invisible’
‘Clef’                 ‘Staff’                ‘begin-of-line-visible’
‘Custos’               ‘Staff’                ‘end-of-line-visible’
‘DoublePercentRepeat’  ‘Voice’                ‘begin-of-line-invisible’
‘KeyCancellation’      ‘Staff’                ‘begin-of-line-invisible’
‘KeySignature’         ‘Staff’                ‘begin-of-line-visible’
‘ClefModifier’         ‘Staff’                ‘begin-of-line-visible’
‘RehearsalMark’        ‘Score’                ‘end-of-line-invisible’
‘TimeSignature’        ‘Staff’                ‘all-visible’
                                              

   The example below shows the use of the vector form to control the
visibility of bar lines:

     \relative {
       f'4 g a b
       f4 g a b
       % Remove bar line at the end of the current line
       \once \override Score.BarLine.break-visibility = ##(#f #t #t)
       \break
       f4 g a b
       f4 g a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Although all three components of the vector used to override
‘break-visibility’ must be present, not all of them are effective with
every layout object, and some combinations may even give errors.  The
following limitations apply:

   • Bar lines cannot be printed at the start of line.

   • A bar number cannot be printed at the start of the _first_ line
     unless it is set to be different from ‘1’.

   • Clef – see the next section.

   • Double percent repeats are either _all printed_ or _all
     suppressed_.  Use ‘begin-of-line-invisible’ to print them and
     ‘all-invisible’ to suppress them.

   • Key signature – see the next section.

   • ClefModifier – see the next section.


File: lilypond-notation.info,  Node: Special considerations,  Prev: Using break-visibility,  Up: Visibility of objects

Special considerations
......................

Visibility following explicit changes
.....................................

The ‘break-visibility’ property controls the visibility of key
signatures and changes of clef only at the start of lines, i.e.  after a
break.  It has no effect on the visibility of the key signature or clef
following an explicit key change or an explicit clef change within or at
the end of a line.  In the following example the key signature following
the explicit change to B-flat major is still visible, even though
‘all-invisible’ is set.

     \relative {
       \key g \major
       f'4 g a b
       % Try to remove all key signatures
       \override Staff.KeySignature.break-visibility = #all-invisible
       \key bes \major
       f4 g a b
       \break
       f4 g a b
       f4 g a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The visibility of such explicit key signature and clef changes is
controlled by the ‘explicitKeySignatureVisibility’ and
‘explicitClefVisibility’ properties.  These are the equivalent of the
‘break-visibility’ property and both take a vector of three booleans or
the predefined functions listed above, exactly like ‘break-visibility’.
Both are properties of the Staff context, not the layout objects
themselves, and so they are set using the ‘\set’ command.  Both are set
by default to ‘all-visible’.  These properties control only the
visibility of key signatures and clefs resulting from explicit changes
and do not affect key signatures and clefs at the beginning of lines;
‘break-visibility’ must still be overridden in the appropriate object to
remove these.

     \relative {
       \key g \major
       f'4 g a b
       \set Staff.explicitKeySignatureVisibility = #all-invisible
       \override Staff.KeySignature.break-visibility = #all-invisible
       \key bes \major
       f4 g a b \break
       f4 g a b
       f4 g a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

Visibility of cancelling accidentals
....................................

To remove the cancelling accidentals printed at an explicit key change,
set the Staff context property ‘printKeyCancellation’ to ‘#f’:

     \relative {
       \key g \major
       f'4 g a b
       \set Staff.explicitKeySignatureVisibility = #all-invisible
       \set Staff.printKeyCancellation = ##f
       \override Staff.KeySignature.break-visibility = #all-invisible
       \key bes \major
       f4 g a b \break
       f4 g a b
       f4 g a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

   With these overrides only the accidentals before the notes remain to
indicate the change of key.

   Note that when changing the key to C major or A minor the cancelling
accidentals would be the _only_ indication of the key change.  In this
case setting ‘printKeyCancellation’ to ‘#f’ has no effect:

     \relative {
       \key g \major
       f'4 g a b
       \set Staff.explicitKeySignatureVisibility = #all-invisible
       \set Staff.printKeyCancellation = ##f
       \key c \major
       f4 g a b \break
       f4 g a b
       f4 g a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

   To suppress the cancelling accidentals even when the key is changed
to C major or A minor, override the visibility of the ‘KeyCancellation’
grob instead:

     \relative {
       \key g \major
       f'4 g a b
       \set Staff.explicitKeySignatureVisibility = #all-invisible
       \override Staff.KeyCancellation.break-visibility = #all-invisible
       \key c \major
       f4 g a b \break
       f4 g a b
       f4 g a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

Automatic bars
..............

As a special case, the printing of bar lines can also be turned off by
setting the ‘automaticBars’ property in the Score context.  If set to
‘#f’, bar lines will not be printed automatically; they must be
explicitly created with a ‘\bar’ command.  Unlike the ‘\cadenzaOn’
predefined command, measures are still counted.  Bar generation will
resume according to that count if this property is later set to ‘#t’.
When set to ‘#f’, line breaks can occur only at explicit ‘\bar’
commands.

Transposed clefs
................

The small transposition symbol on transposed clefs is produced by the
‘ClefModifier’ layout object.  Its visibility is automatically inherited
from the ‘Clef’ object, so it is not necessary to apply any required
‘break-visibility’ overrides to the ‘ClefModifier’ layout objects to
suppress transposition symbols for invisible clefs.

   For explicit clef changes, the ‘explicitClefVisibility’ property
controls both the clef symbol and any transposition symbol associated
with it.

See also
........

   Learning Manual: *note (lilypond-learning)Visibility and color of
objects::.


File: lilypond-notation.info,  Node: Line styles,  Next: Rotating objects,  Prev: Visibility of objects,  Up: Useful concepts and properties

5.4.8 Line styles
-----------------

Some performance indications, e.g., rallentando and accelerando and
trills are written as text and are extended over many measures with
lines, sometimes dotted or wavy.

   These all use the same routines as the glissando for drawing the
texts and the lines, and tuning their behavior is therefore also done in
the same way.  It is done with a spanner, and the routine responsible
for drawing the spanners is ‘ly:line-spanner::print’.  This routine
determines the exact location of the two span points and draws a line
between them, in the style requested.

   Here is an example showing the different line styles available, and
how to tune them.

     \relative {
       d''2 \glissando d'2
       \once \override Glissando.style = #'dashed-line
       d,2 \glissando d'2
       \override Glissando.style = #'dotted-line
       d,2 \glissando d'2
       \override Glissando.style = #'zigzag
       d,2 \glissando d'2
       \override Glissando.style = #'trill
       d,2 \glissando d'2
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The locations of the end-points of the spanner are computed
on-the-fly for every graphic object, but it is possible to override
these:

     \relative {
       e''2 \glissando f
       \once \override Glissando.bound-details.right.Y = #-2
       e2 \glissando f
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The value for ‘Y’ is set to ‘-2’ for the right end point.  The left
side may be similarly adjusted by specifying ‘left’ instead of ‘right’.

   If ‘Y’ is not set, the value is computed from the vertical position
of the left and right attachment points of the spanner.

   Other adjustments of spanners are possible, for details, see *note
Spanners::.


File: lilypond-notation.info,  Node: Rotating objects,  Prev: Line styles,  Up: Useful concepts and properties

5.4.9 Rotating objects
----------------------

Both layout objects and elements of markup text can be rotated by any
angle about any point, but the method of doing so differs.

* Menu:

* Rotating layout objects::
* Rotating markup::


File: lilypond-notation.info,  Node: Rotating layout objects,  Next: Rotating markup,  Up: Rotating objects

Rotating layout objects
.......................

All layout objects which support the ‘grob-interface’ can be rotated by
setting their ‘rotation’ property.  This takes a list of three items:
the angle of rotation counter-clockwise, and the x and y coordinates of
the point relative to the object’s reference point about which the
rotation is to be performed.  The angle of rotation is specified in
degrees and the coordinates in staff-spaces.

   The angle of rotation and the coordinates of the rotation point must
be determined by trial and error.

   There are only a few situations where the rotation of layout objects
is useful; the following example shows one situation where they may be:

     g4\< e' d'' f''\!
     \override Hairpin.rotation = #'(20 -1 0)
     g4\< e' d'' f''\!
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Rotating markup,  Prev: Rotating layout objects,  Up: Rotating objects

Rotating markup
...............

All markup text can be rotated to lie at any angle by prefixing it with
the ‘\rotate’ command.  The command takes two arguments: the angle of
rotation in degrees counter-clockwise and the text to be rotated.  The
extents of the text are not rotated: they take their values from the
extremes of the x and y coordinates of the rotated text.  In the
following example the ‘outside-staff-priority’ property for text is set
to ‘#f’ to disable the automatic collision avoidance, which would push
some of the text too high.

     \override TextScript.outside-staff-priority = ##f
     g4^\markup { \rotate #30 "a G" }
     b^\markup { \rotate #30 "a B" }
     des'^\markup { \rotate #30 "a D-Flat" }
     fis'^\markup { \rotate #30 "an F-Sharp" }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Advanced tweaks,  Next: Using music functions,  Prev: Useful concepts and properties,  Up: Changing defaults

5.5 Advanced tweaks
===================

This section discusses various approaches to fine tuning the appearance
of the printed score.

* Menu:

* Aligning objects::
* Vertical grouping of grobs::
* Modifying stencils::
* Modifying shapes::
* Modifying broken spanners::
* Unpure-pure containers::

See also
........

   Learning Manual: *note (lilypond-learning)Tweaking output::, *note
(lilypond-learning)Other sources of information::.

   Notation Reference: *note Explaining the Internals Reference::, *note
Modifying properties::.

   Extending LilyPond: *note (lilypond-extending)Interfaces for
programmers::.

   Installed Files: ‘scm/define-grobs.scm’.

   Snippets: *note (lilypond-snippets)Tweaks and overrides::.

   Internals Reference: *note (lilypond-internals)All layout objects::.


File: lilypond-notation.info,  Node: Aligning objects,  Next: Vertical grouping of grobs,  Up: Advanced tweaks

5.5.1 Aligning objects
----------------------

Graphical objects which support the ‘self-alignment-interface’ and/or
the ‘side-position-interface’ can be aligned to a previously placed
object in a variety of ways.  For a list of these objects, see *note
(lilypond-internals)self-alignment-interface:: and *note
(lilypond-internals)side-position-interface::.

   All graphical objects have a reference point, a horizontal extent and
a vertical extent.  The horizontal extent is a pair of numbers giving
the displacements from the reference point of the left and right edges,
displacements to the left being negative.  The vertical extent is a pair
of numbers giving the displacement from the reference point to the
bottom and top edges, displacements down being negative.

   An object’s position on a staff is given by the values of the
‘X-offset’ and ‘Y-offset’ properties.  The value of ‘X-offset’ gives the
displacement from the X coordinate of the reference point of the parent
object, and the value of ‘Y-offset’ gives the displacement from the
center line of the staff.  The values of ‘X-offset’ and ‘Y-offset’ may
be set directly or may be set to be calculated by procedures in order to
achieve alignment with the parent object.

          Note: Many objects have special positioning considerations
          which cause any setting of ‘X-offset’ or ‘Y-offset’ to be
          ignored or modified, even though the object supports the
          ‘self-alignment-interface’.  Overriding the ‘X-offset’ or
          ‘Y-offset’ properties to a fixed value causes the respective
          ‘self-alignment’ property to be disregarded.

   For example, an accidental can be repositioned vertically by setting
‘Y-offset’ but any changes to ‘X-offset’ have no effect.

   Rehearsal marks may be aligned with breakable objects such as bar
lines, clef symbols, time signature symbols and key signatures.  There
are special properties to be found in the ‘break-aligned-interface’ for
positioning rehearsal marks on such objects.

See also
........

   Notation Reference: *note Using the break-alignable-interface::.

   Extending LilyPond: *note (lilypond-extending)Callback functions::.

* Menu:

* Setting X-offset and Y-offset directly::
* Using the side-position-interface::
* Using the self-alignment-interface::
* Using the break-alignable-interface::


File: lilypond-notation.info,  Node: Setting X-offset and Y-offset directly,  Next: Using the side-position-interface,  Up: Aligning objects

Setting ‘X-offset’ and ‘Y-offset’ directly
..........................................

Numerical values may be given to the ‘X-offset’ and ‘Y-offset’
properties of many objects.  The following example shows three notes
with the default fingering position and the positions with ‘X-offset’
and ‘Y-offset’ modified.

     a'-3
     a'
     -\tweak X-offset #0
     -\tweak Y-offset #0
     -3
     a'
     -\tweak X-offset #-1
     -\tweak Y-offset #1
     -3
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Using the side-position-interface,  Next: Using the self-alignment-interface,  Prev: Setting X-offset and Y-offset directly,  Up: Aligning objects

Using the ‘side-position-interface’
...................................

An object which supports the ‘side-position-interface’ can be placed
next to its parent object so that the specified edges of the two objects
touch.  The object may be placed above, below, to the right or to the
left of the parent.  The parent cannot be specified; it is determined by
the order of elements in the input stream.  Most objects have the
associated note head as their parent.

   The values of the ‘side-axis’ and ‘direction’ properties determine
where the object is to be placed, as follows:

‘side-axis’            ‘direction’
---------------------------------------------------------------------
property               property               Placement
                                              
---------------------------------------------------------------------
‘0’                    ‘-1’                   left
‘0’                    ‘1’                    right
‘1’                    ‘-1’                   below
‘1’                    ‘1’                    above
                                              

   When ‘side-axis’ is ‘0’, ‘X-offset’ should be set to the procedure
‘ly:side-position-interface::x-aligned-side’.  This procedure will
return the correct value of ‘X-offset’ to place the object to the left
or right side of the parent according to value of ‘direction’.

   When ‘side-axis’ is ‘1’, ‘Y-offset’ should be set to the procedure
‘ly:side-position-interface::y-aligned-side’.  This procedure will
return the correct value of ‘Y-offset’ to place the object to the top or
bottom of the parent according to value of ‘direction’.


File: lilypond-notation.info,  Node: Using the self-alignment-interface,  Next: Using the break-alignable-interface,  Prev: Using the side-position-interface,  Up: Aligning objects

Using the ‘self-alignment-interface’
....................................

Self-aligning objects horizontally
..................................

The horizontal alignment of an object which supports the
‘self-alignment-interface’ is controlled by the value of the
‘self-alignment-X’ property, provided the object’s ‘X-offset’ property
is set to ‘ly:self-alignment-interface::x-aligned-on-self’.
‘self-alignment-X’ may be given any real value, in units of half the
total X extent of the object.  Negative values move the object to the
right, positive to the left.  A value of ‘0’ centers the object on the
reference point of its parent, a value of ‘-1’ aligns the left edge of
the object on the reference point of its parent, and a value of ‘1’
aligns the right edge of the object on the reference point of its
parent.  The symbols ‘LEFT’, ‘CENTER’, and ‘RIGHT’ may be used instead
of the values ‘-1’, ‘0’, and ‘1’, respectively.

   Normally the ‘\override’ command would be used to modify the value of
‘self-alignment-X’, but the ‘\tweak’ command can be used to separately
align several annotations on a single note:

     a'
     -\tweak self-alignment-X #-1
     ^"left-aligned"
     -\tweak self-alignment-X #0
     ^"center-aligned"
     -\tweak self-alignment-X #RIGHT
     ^"right-aligned"
     -\tweak self-alignment-X #-2.5
     ^"aligned further to the right"
 [image src="" alt="[image of music]" text="image of music" ]

Self-aligning objects vertically
................................

Objects may be aligned vertically in an analogous way to aligning them
horizontally if the ‘Y-offset’ property is set to
‘ly:self-alignment-interface::y-aligned-on-self’.  However, other
mechanisms are often involved in vertical alignment: the value of
‘Y-offset’ is just one variable taken into account.  This may make
adjusting the value of some objects tricky.  The units are just half the
vertical extent of the object, which is usually quite small, so quite
large numbers may be required.  A value of ‘-1’ aligns the lower edge of
the object with the reference point of the parent object, a value of ‘0’
aligns the center of the object with the reference point of the parent,
and a value of ‘1’ aligns the top edge of the object with the reference
point of the parent.  The symbols ‘DOWN’, ‘CENTER’, and ‘UP’ may be
substituted for ‘-1’, ‘0’, and ‘1’, respectively.

Self-aligning objects in both directions
........................................

By setting both ‘X-offset’ and ‘Y-offset’, an object may be aligned in
both directions simultaneously.

   The following example shows how to adjust a fingering mark so that it
nestles close to the note head.

     a'
     -\tweak self-alignment-X #0.5  % move horizontally left
     -\tweak Y-offset #ly:self-alignment-interface::y-aligned-on-self
     -\tweak self-alignment-Y #-1  % move vertically up
     -3  % third finger
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Using the break-alignable-interface,  Prev: Using the self-alignment-interface,  Up: Aligning objects

Using the ‘break-alignable-interface’
.....................................

Rehearsal marks and bar numbers may be aligned with notation objects
other than bar lines.  These objects include ‘ambitus’,
‘breathing-sign’, ‘clef’, ‘custos’, ‘staff-bar’, ‘left-edge’,
‘key-cancellation’, ‘key-signature’, and ‘time-signature’.

   Each type of object has its own default reference point, to which
rehearsal marks are aligned:

     % The rehearsal mark will be aligned to the right edge of the Clef
     \override Score.RehearsalMark.break-align-symbols = #'(clef)
     \key a \major
     \clef treble
     \mark "↓"
     e'1
     % The rehearsal mark will be aligned to the left edge of the Time Signature
     \override Score.RehearsalMark.break-align-symbols = #'(time-signature)
     \key a \major
     \clef treble
     \time 3/4
     \mark "↓"
     e'2.
     % The rehearsal mark will be centered above the Breath Mark
     \override Score.RehearsalMark.break-align-symbols = #'(breathing-sign)
     \key a \major
     \clef treble
     \time 4/4
     e'1
     \breathe
     \mark "↓"
 [image src="" alt="[image of music]" text="image of music" ]

   A list of possible target alignment objects may be specified.  If
some of the objects are invisible at that point due to the setting of
‘break-visibility’ or the explicit visibility settings for keys and
clefs, the rehearsal mark or bar number is aligned to the first object
in the list which is visible.  If no objects in the list are visible the
object is aligned to the bar line.  If the bar line is invisible the
object is aligned to the place where the bar line would be.

     % The rehearsal mark will be aligned to the right edge of the Key Signature
     \override Score.RehearsalMark.break-align-symbols = #'(key-signature clef)
     \key a \major
     \clef treble
     \mark "↓"
     e'1
     % The rehearsal mark will be aligned to the right edge of the Clef
     \set Staff.explicitKeySignatureVisibility = #all-invisible
     \override Score.RehearsalMark.break-align-symbols = #'(key-signature clef)
     \key a \major
     \clef bass
     \mark "↓"
     gis,1
     % The rehearsal mark will be centered above the Bar Line
     \set Staff.explicitKeySignatureVisibility = #all-invisible
     \set Staff.explicitClefVisibility = #all-invisible
     \override Score.RehearsalMark.break-align-symbols = #'(key-signature clef)
     \key a \major
     \clef treble
     \mark "↓"
     e'1
 [image src="" alt="[image of music]" text="image of music" ]

   The alignment of the rehearsal mark relative to the notation object
can be changed, as shown in the following example.  In a score with
multiple staves, this setting should be done for all the staves.

     % The RehearsalMark will be aligned with the right edge of the Key Signature
     \override Score.RehearsalMark.break-align-symbols = #'(key-signature)
     \key a \major
     \clef treble
     \time 4/4
     \mark "↓"
     e'1
     % The RehearsalMark will be centered above the Key Signature
     \once \override Score.KeySignature.break-align-anchor-alignment = #CENTER
     \mark "↓"
     \key a \major
     e'1
     % The RehearsalMark will be aligned with the left edge of the Key Signature
     \once \override Score.KeySignature.break-align-anchor-alignment = #LEFT
     \key a \major
     \mark "↓"
     e'1
 [image src="" alt="[image of music]" text="image of music" ]

   The rehearsal mark can also be offset to the right or left of the
left edge by an arbitrary amount.  The units are staff-spaces:

     % The RehearsalMark will be aligned with the left edge of the Key Signature
     % and then shifted right by 3.5 staff-spaces
     \override Score.RehearsalMark.break-align-symbols = #'(key-signature)
     \once \override Score.KeySignature.break-align-anchor = #3.5
     \key a \major
     \mark "↓"
     e'1
     % The RehearsalMark will be aligned with the left edge of the Key Signature
     % and then shifted left by 2 staff-spaces
     \once \override Score.KeySignature.break-align-anchor = #-2
     \key a \major
     \mark "↓"
     e'1
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Vertical grouping of grobs,  Next: Modifying stencils,  Prev: Aligning objects,  Up: Advanced tweaks

5.5.2 Vertical grouping of grobs
--------------------------------

The VerticalAlignment and VerticalAxisGroup grobs work together.
VerticalAxisGroup groups together different grobs like Staff, Lyrics,
etc.  VerticalAlignment then vertically aligns the different grobs
grouped together by VerticalAxisGroup.  There is usually only one
VerticalAlignment per score but every Staff, Lyrics, etc.  has its own
VerticalAxisGroup.


File: lilypond-notation.info,  Node: Modifying stencils,  Next: Modifying shapes,  Prev: Vertical grouping of grobs,  Up: Advanced tweaks

5.5.3 Modifying stencils
------------------------

All layout objects have a ‘stencil’ property which is part of the
‘grob-interface’.  By default, this property is usually set to a
function specific to the object that is tailor-made to render the symbol
which represents it in the output.  For example, the standard setting
for the ‘stencil’ property of the ‘MultiMeasureRest’ object is
‘ly:multi-measure-rest::print’.

   The standard symbol for any object can be replaced by modifying the
‘stencil’ property to reference a different, specially-written,
procedure.  This requires a high level of knowledge of the internal
workings of LilyPond, but there is an easier way which can often produce
adequate results.

   This is to set the ‘stencil’ property to the procedure which prints
text – ‘ly:text-interface::print’ – and to add a ‘text’ property to the
object which is set to contain the markup text which produces the
required symbol.  Due to the flexibility of markup, much can be achieved
– see in particular *note Graphic notation inside markup::.

   The following example demonstrates this by changing the note head
symbol to a cross within a circle.

     XinO = {
       \once \override NoteHead.stencil = #ly:text-interface::print
       \once \override NoteHead.text = \markup {
         \combine
           \halign #-0.7 \draw-circle #0.85 #0.2 ##f
           \musicglyph #"noteheads.s2cross"
       }
     }
     \relative {
       a' a \XinO a a
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Any of the glyphs in the Feta Font can be supplied to the
‘\musicglyph’ markup command – see *note The Feta font::.

   ‘EPS’ files and Postscript commands can both be inserted inline using
the ‘\epsfile’ and ‘\postscript’ markup commands respectively – see
*note Graphic::.

See also
........

   Notation Reference: *note Graphic notation inside markup::, *note
Formatting text::, *note Text markup commands::, *note The Feta font::,
*note Graphic::.


File: lilypond-notation.info,  Node: Modifying shapes,  Next: Modifying broken spanners,  Prev: Modifying stencils,  Up: Advanced tweaks

5.5.4 Modifying shapes
----------------------

* Menu:

* Modifying ties and slurs::


File: lilypond-notation.info,  Node: Modifying ties and slurs,  Up: Modifying shapes

Modifying ties and slurs
........................

‘Tie’s, ‘Slur’s, ‘PhrasingSlur’s, ‘LaissezVibrerTie’s and ‘RepeatTie’s
are all drawn as third-order Bézier curves.  If the shape of the tie or
slur which is calculated automatically is not optimum, the shape may be
modified manually in two ways:

  a. by specifying the displacements to be made to the control points of
     the automatically calculated Bézier curve, or

  b. by explicitly specifying the positions of the four control points
     required to define the wanted curve.

   Both methods are explained below.  The first method is more suitable
if only slight adjustments to the curve are required; the second may be
better for creating curves which are related to just a single note.

Cubic Bézier curves
...................

Third-order or cubic Bézier curves are defined by four control points.
The first and fourth control points are precisely the starting and
ending points of the curve.  The intermediate two control points define
the shape.  Animations showing how the curve is drawn can be found on
the web, but the following description may be helpful.  The curve starts
from the first control point heading directly towards the second,
gradually bending over to head towards the third and continuing to bend
over to head towards the fourth, arriving there travelling directly from
the third control point.  The curve is entirely contained in the
quadrilateral defined by the four control points.  Translations,
rotations and scaling of the control points all result in exactly the
same operations on the curve.

Specifying displacements from current control points
....................................................

In this example the automatic placement of the tie is not optimum, and
‘\tieDown’ would not help.

     <<
       { e'1~ 1 }
     \\
       \relative { r4 <g' c,> <g c,> <g c,> }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   Adjusting the control points of the tie with ‘\shape’ allows the
collisions to be avoided.

   The syntax of ‘\shape’ is

     [-]\shape DISPLACEMENTS ITEM

   This will reposition the control-points of ITEM by the amounts given
by DISPLACEMENTS.  The DISPLACEMENTS argument is a list of number pairs
or a list of such lists.  Each element of a pair represents the
displacement of one of the coordinates of a control-point.  If ITEM is a
string, the result is ‘\once\override’ for the specified grob type.  If
ITEM is a music expression, the result is the same music expression with
an appropriate tweak applied.

   In other words, the ‘\shape’ function can act as either a
‘\once\override’ command or a ‘\tweak’ command depending on whether the
ITEM argument is a grob name, like “Slur”, or a music expression, like
“(”.  The DISPLACEMENTS argument specifies the displacements of the four
control points as a list of four pairs of (dx .  dy) values in units of
staff-spaces (or a list of such lists if the curve has more than one
segment).

   The leading hyphen is required if and only if the ‘\tweak’ form is
being used.

   So, using the same example as above and the ‘\once\override’ form of
‘\shape’, this will raise the tie by half a staff-space:

     <<
       {
         \shape #'((0 . 0.5) (0 . 0.5) (0 . 0.5) (0 . 0.5)) Tie
         e'1~ 1
       }
     \\
       \relative { r4 <g' c,> <g c,> <g c,> }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   This positioning of the tie is better, but maybe it should be raised
more in the center.  The following example does this, this time using
the alternative ‘\tweak’ form:

     <<
       {
         e'1-\shape #'((0 . 0.5) (0 . 1) (0 . 1) (0 . 0.5)) ~ e'
       }
     \\
       \relative { r4 <g' c,> <g c,> <g c,> }
     >>
 [image src="" alt="[image of music]" text="image of music" ]

   Changes to the horizontal positions of the control points may be made
in the same way, and two different curves starting at the same musical
moment may also be shaped:

     \relative {
       c''8(\( a) a'4 e c\)
       \shape #'((0.7 . -0.4) (0.5 . -0.4) (0.3 . -0.3) (0 . -0.2)) Slur
       \shape #'((0 . 0) (0 . 0.5) (0 . 0.5) (0 . 0)) PhrasingSlur
       c8(\( a) a'4 e c\)
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The ‘\shape’ function can also displace the control points of curves
which stretch across line breaks.  Each piece of the broken curve can be
given its own list of offsets.  If changes to a particular segment are
not needed, the empty list can serve as a placeholder.  In this example
the line break makes the single slur look like two:

     \relative {
       c'4( f g c
       \break
       d,4 c' f, c)
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Changing the shapes of the two halves of the slur makes it clearer
that the slur continues over the line break:

     % () may be used as a shorthand for ((0 . 0) (0 . 0) (0 . 0) (0 . 0))
     % if any of the segments does not need to be changed
     \relative c' {
       \shape #'(
                  (( 0 . 0) (0 . 0) (0 . 0) (0 . 1))
                  ((0.5 . 1.5) (1 . 0) (0 . 0) (0 . -1.5))
                ) Slur
       c4( f g c
       \break
       d,4 c' f, c)
     }
 [image src="" alt="[image of music]" text="image of music" ]

   If an S-shaped curve is required the control points must always be
adjusted manually — LilyPond will never select such shapes
automatically.

     \relative c'' {
       c8( e b-> f d' a e-> g)
       \shape #'((0 . -1) (5.5 . -0.5) (-5.5 . -10.5) (0 . -5.5)) PhrasingSlur
       c8\( e b-> f d' a e-> g\)
     }
 [image src="" alt="[image of music]" text="image of music" ]

Specifying control points explicitly
....................................

The coordinates of the Bézier control points are specified in units of
staff-spaces.  The X coordinate is relative to the reference point of
the note to which the tie or slur is attached, and the Y coordinate is
relative to the staff center line.  The coordinates are specified as a
list of four pairs of decimal numbers (reals).  One approach is to
estimate the coordinates of the two end points, and then guess the two
intermediate points.  The optimum values are then found by trial and
error.  Be aware that these values may need to be manually adjusted if
any further changes are made to the music or the layout.

   One situation where specifying the control points explicitly is
preferable to specifying displacements is when they need to be specified
relative to a single note.  Here is an example of this.  It shows one
way of indicating a slur extending into alternative sections of a volta
repeat.

     \relative {
       c''1
       \repeat volta 3 { c4 d( e f }
       \alternative {
         { g2) d }
         {
           g2
           % create a slur and move it to a new position
           % the <> is just an empty chord to carry the slur termination
           -\tweak control-points #'((-2 . 3.8) (-1 . 3.9) (0 . 4) (1 . 3.4)) ( <> )
           f,
         }
         {
           e'2
           % create a slur and move it to a new position
           -\tweak control-points #'((-2 . 3) (-1 . 3.1) (0 . 3.2) (1 . 2.4)) ( <> )
           f,
         }
       }
     }
 [image src="" alt="[image of music]" text="image of music" ]

Known issues and warnings
.........................

It is not possible to modify shapes of ties or slurs by changing the
‘control-points’ property if there are multiple ties or slurs at the
same musical moment – the ‘\tweak’ command will also not work in this
case.  However, the ‘tie-configuration’ property of ‘TieColumn’ can be
overridden to set start line and direction as required.

See also
........

   Internals Reference: *note (lilypond-internals)TieColumn::.


File: lilypond-notation.info,  Node: Modifying broken spanners,  Next: Unpure-pure containers,  Prev: Modifying shapes,  Up: Advanced tweaks

5.5.5 Modifying broken spanners
-------------------------------

* Menu:

* Using alterBroken::


File: lilypond-notation.info,  Node: Using alterBroken,  Up: Modifying broken spanners

Using ‘\alterBroken’
....................

When a spanner crosses a line break or breaks, each piece inherits the
attributes of the original spanner.  Thus, ordinary tweaking of a broken
spanner applies the same modifications to each of its segments.  In the
example below, overriding ‘thickness’ affects the slur on either side of
the line break.

     \relative c'' {
       r2
       \once\override Slur.thickness = 10
       c8( d e f
       \break
       g8 f e d) r2
     }
 [image src="" alt="[image of music]" text="image of music" ]

   Independently modifying the appearance of individual pieces of a
broken spanner is possible with the ‘\alterBroken’ command.  This
command can produce either an ‘\override’ or a ‘\tweak’ of a spanner
property.

   The syntax for ‘\alterBroken’ is

     [-]\alterBroken PROPERTY VALUES ITEM

   The argument VALUES is a list of values, one for each broken piece.
If ITEM is a grob name like ‘Slur’ or ‘Staff.PianoPedalBracket’, the
result is an ‘\override’ of the specified grob type.  If ITEM is a music
expression such as “(” or “[” the result is the same music expression
with an appropriate tweak applied.

   The leading hyphen must be used with the ‘\tweak’ form.  Do not add
it when ‘\alterBroken’ is used as an ‘\override’.

   In its ‘\override’ usage, ‘\alterBroken’ may be prefaced by ‘\once’
or ‘\temporary’ and reverted by using ‘\revert’ with PROPERTY.

   The following code applies an independent ‘\override’ to each of the
slur segments in the previous example:

     \relative c'' {
       r2
       \alterBroken thickness #'(10 1) Slur
       c8( d e f
       \break
       g8 f e d) r2
     }
 [image src="" alt="[image of music]" text="image of music" ]

   The ‘\alterBroken’ command may be used with any spanner object,
including ‘Tie’, ‘PhrasingSlur’, ‘Beam’ and ‘TextSpanner’.  For example,
an editor preparing a scholarly edition may wish to indicate the absence
of part of a phrasing slur in a source by dashing only the segment which
has been added.  The following example illustrates how this can be done,
in this case using the ‘\tweak’ form of the command:

     % The empty list is conveniently used below, because it is the
     % default setting of dash-definition, resulting in a solid curve.
     \relative {
       c''2-\alterBroken dash-definition #'(() ((0 1.0 0.4 0.75))) \(e
       \break
       g2 e\)
     }
 [image src="" alt="[image of music]" text="image of music" ]

   It is important to understand that ‘\alterBroken’ will set each piece
of a broken spanner to the corresponding value in VALUES.  When there
are fewer values than pieces, any additional piece will be assigned the
empty list.  This may lead to undesired results if the layout property
is not set to the empty list by default.  In such cases, each segment
should be assigned an appropriate value.

Known issues and warnings
.........................

Line breaks may occur in different places following changes in layout.
Settings chosen for ‘\alterBroken’ may be unsuitable for a spanner that
is no longer broken or is split into more segments than before.
Explicit use of ‘\break’ can guard against this situation.

   The ‘\alterBroken’ command is ineffective for spanner properties
accessed before line-breaking such as ‘direction’.

See also
........

   Extending LilyPond: *note (lilypond-extending)Difficult tweaks::.


File: lilypond-notation.info,  Node: Unpure-pure containers,  Prev: Modifying broken spanners,  Up: Advanced tweaks

5.5.6 Unpure-pure containers
----------------------------

Unpure-pure containers are useful for overriding _Y-axis_ spacing
calculations - specifically ‘Y-offset’ and ‘Y-extent’ - with a Scheme
function instead of a literal (i.e.  a number or pair).

   For certain grobs, the ‘Y-extent’ is based on the ‘stencil’ property,
overriding the stencil property of one of these will require an
additional ‘Y-extent’ override with an unpure-pure container.  When a
function overrides a ‘Y-offset’ and/or ‘Y-extent’ it is assumed that
this will trigger line breaking calculations too early during
compilation.  So the function is not evaluated at all (usually returning
a value of ‘0’ or ‘'(0 . 0)’) which can result in collisions.  A ‘pure’
function will not affect properties, objects or grob suicides and
therefore will always have its Y-axis-related evaluated correctly.

   Currently, there are about thirty functions that are already
considered ‘pure’ and Unpure-pure containers are a way to set functions
not on this list as ‘pure’.  The ‘pure’ function is evaluated _before_
any line-breaking and so the horizontal spacing can be adjusted ‘in
time’.  The ‘unpure’ function is then evaluated _after_ line breaking.

          Note: As it is difficult to always know which functions are on
          this list we recommend that any ‘pure’ functions you create do
          not use ‘Beam’ or ‘VerticalAlignment’ grobs.

   An unpure-pure container is constructed as follows;

   ‘(ly:make-unpure-pure-container f0 f1)’

   where ‘f0’ is a function taking N arguments (N >= 1) and the first
argument must always be the grob.  This is the function that gives the
actual result.  F1 is the function being labeled as ‘pure’ that takes N
+ 2 arguments.  Again, the first argument must always still be the grob
but the second and third are ‘start’ and ‘end’ arguments.

   START and END are, for all intents and purposes, dummy values that
only matter for ‘Spanners’ (i.e ‘Hairpin’ or ‘Beam’), that can return
different height estimations based on a starting and ending column.

   The rest are the other arguments to the first function (which may be
none if N = 1).

   The results of the second function are used as an approximation of
the value needed which is then used by the first function to get the
real value which is then used for fine-tuning much later during the
spacing process.

     #(define (square-line-circle-space grob)
     (let* ((pitch (ly:event-property (ly:grob-property grob 'cause) 'pitch))
           (notename (ly:pitch-notename pitch)))
      (if (= 0 (modulo notename 2))
          (make-circle-stencil 0.5 0.0 #t)
          (make-filled-box-stencil '(0 . 1.0)
                                   '(-0.5 . 0.5)))))

     squareLineCircleSpace = {
       \override NoteHead.stencil = #square-line-circle-space
     }

     smartSquareLineCircleSpace = {
       \squareLineCircleSpace
       \override NoteHead.Y-extent =
        #(ly:make-unpure-pure-container
           ly:grob::stencil-height
           (lambda (grob start end) (ly:grob::stencil-height grob)))
     }

     \new Voice \with { \remove "Stem_engraver" }
     \relative c'' {
       \squareLineCircleSpace
       cis4 ces disis d
       \smartSquareLineCircleSpace
       cis4 ces disis d
     }
 [image src="" alt="[image of music]" text="image of music" ]

   In the first measure, without the unpure-pure container, the spacing
engine does not know the width of the note head and lets it collide with
the accidentals.  In the second measure, with unpure-pure containers,
the spacing engine knows the width of the note heads and avoids the
collision by lengthening the line accordingly.

   Usually for simple calculations nearly-identical functions for both
the ‘unpure’ and ‘pure’ parts can be used, by only changing the number
of arguments passed to, and the scope of, the function.  This use case
is frequent enough that ‘ly:make-unpure-pure-container’ constructs such
a second function by default when called with only one function
argument.

          Note: If a function is labeled as ‘pure’ and it turns out not
          to be, the results can be unexpected.


File: lilypond-notation.info,  Node: Using music functions,  Prev: Advanced tweaks,  Up: Changing defaults

5.6 Using music functions
=========================

Where tweaks need to be reused with different music expressions, it is
often convenient to make the tweak part of a _music function_.  In this
section, we discuss only _substitution_ functions, where the object is
to substitute a variable into a piece of LilyPond input code.  Other
more complex functions are described in *note (lilypond-extending)Music
functions::.

* Menu:

* Substitution function syntax::
* Substitution function examples::


File: lilypond-notation.info,  Node: Substitution function syntax,  Next: Substitution function examples,  Up: Using music functions

5.6.1 Substitution function syntax
----------------------------------

Making a function that substitutes a variable into LilyPond code is
easy.  The general form of these functions is

     function =
     #(define-music-function
          (ARG1 ARG2 …)
          (TYPE1? TYPE2? …)
        #{
          …MUSIC…
        #})

where

‘ARGN’                   Nth argument
                         
‘TYPEN?’                 a scheme _type predicate_ for which ‘ARGN’
                         must return ‘#t’.
                         
‘…MUSIC…’                normal LilyPond input, using ‘$’ (in places
                         where only Lilypond constructs are allowed) or
                         ‘#’ (to use it as a Scheme value or music
                         function argument or music inside of music
                         lists) to reference arguments (eg.  ‘#arg1’).

   The list of type predicates is required.  Some of the most common
type predicates used in music functions are:

     boolean?
     cheap-list?  _(use instead of _‘list?’_ for faster processing)_
     ly:duration?
     ly:music?
     ly:pitch?
     markup?
     number?
     pair?
     string?
     symbol?

For a list of available type predicates, see *note Predefined type
predicates::.  User-defined type predicates are also allowed.

See also
........

   Notation Reference: *note Predefined type predicates::.

   Extending Lilypond: *note (lilypond-extending)Music functions::.

   Installed Files: ‘lily/music-scheme.cc’, ‘scm/c++.scm’,
‘scm/lily.scm’.


File: lilypond-notation.info,  Node: Substitution function examples,  Prev: Substitution function syntax,  Up: Using music functions

5.6.2 Substitution function examples
------------------------------------

This section introduces some substitution function examples.  These are
not intended to be exhaustive, but rather to demonstrate some of the
possibilities of simple substitution functions.

   In the first example, a function is defined that simplifies setting
the padding of a TextScript:

     padText =
     #(define-music-function
          (padding)
          (number?)
        #{
          \once \override TextScript.padding = #padding
        #})

     \relative {
       c''4^"piu mosso" b a b
       \padText #1.8
       c4^"piu mosso" b a b
       \padText #2.6
       c4^"piu mosso" b a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

   In addition to numbers, we can use music expressions such as notes
for arguments to music functions:

     custosNote =
     #(define-music-function
          (note)
          (ly:music?)
        #{
          \tweak NoteHead.stencil #ly:text-interface::print
          \tweak NoteHead.text
             \markup \musicglyph #"custodes.mensural.u0"
          \tweak Stem.stencil ##f
          #note
        #})

     \relative { c'4 d e f \custosNote g }
 [image src="" alt="[image of music]" text="image of music" ]

   Both of those functions are simple single expressions where only the
last element of a function call or override is missing.  For those
particular function definitions, there is a simpler alternative syntax,
namely just writing out the constant part of the expression and
replacing its final missing element with ‘\etc’:

     padText =
       \once \override TextScript.padding = \etc

     \relative {
       c''4^"piu mosso" b a b
       \padText #1.8
       c4^"piu mosso" b a b
       \padText #2.6
       c4^"piu mosso" b a b
     }
 [image src="" alt="[image of music]" text="image of music" ]

     custosNote =
       \tweak NoteHead.stencil #ly:text-interface::print
       \tweak NoteHead.text
          \markup \musicglyph #"custodes.mensural.u0"
       \tweak Stem.stencil ##f
       \etc

     \relative { c'4 d e f \custosNote g }
 [image src="" alt="[image of music]" text="image of music" ]

   Substitution functions with multiple arguments can be defined:

     tempoPadded =
     #(define-music-function
          (padding tempotext)
          (number? markup?)
        #{
          \once \override Score.MetronomeMark.padding = #padding
          \tempo \markup { \bold #tempotext }
        #})

     \relative {
       \tempo \markup { "Low tempo" }
       c''4 d e f g1
       \tempoPadded #4.0 "High tempo"
       g4 f e d c1
     }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Notation manual tables,  Next: Cheat sheet,  Prev: Changing defaults,  Up: Top

Appendix A Notation manual tables
*********************************

* Menu:

* Chord name chart::
* Common chord modifiers::
* Predefined string tunings::
* Predefined fretboard diagrams::
* Predefined paper sizes::
* MIDI instruments::
* List of colors::
* The Feta font::
* Note head styles::
* Clef styles::
* Text markup commands::
* Text markup list commands::
* List of special characters::
* List of articulations::
* Percussion notes::
* Technical glossary::
* All context properties::
* Layout properties::
* Available music functions::
* Context modification identifiers::
* Predefined type predicates::
* Scheme functions::


File: lilypond-notation.info,  Node: Chord name chart,  Next: Common chord modifiers,  Up: Notation manual tables

A.1 Chord name chart
====================

The following chart shows two standard systems for printing chord names,
along with the pitches they represent.

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Common chord modifiers,  Next: Predefined string tunings,  Prev: Chord name chart,  Up: Notation manual tables

A.2 Common chord modifiers
==========================

The following table shows chord modifiers that can be used to generate
standard chord structures.

Type           Interval           Modifier       Example     Output
                                                             
Major          Major third,       ‘5’ or         ‘c1:5’       [image src="" alt="[image of music]" text="image of music" ]
               perfect fifth      nothing                    
Minor          Minor third,       ‘m’ or ‘m5’    ‘c1:m’       [image src="" alt="[image of music]" text="image of music" ]
               perfect fifth                                 
Augmented      Major third,       ‘aug’          ‘c1:aug’     [image src="" alt="[image of music]" text="image of music" ]
               augmented fifth                               
Diminished     Minor third,       ‘dim’          ‘c1:dim’     [image src="" alt="[image of music]" text="image of music" ]
               diminished fifth                              
Dominant       Major triad,       ‘7’            ‘c1:7’       [image src="" alt="[image of music]" text="image of music" ]
seventh        minor seventh                                 
Major          Major triad,       ‘maj7’ or      ‘c1:maj7’    [image src="" alt="[image of music]" text="image of music" ]
seventh        major seventh      ‘maj’                      
Minor          Minor triad,       ‘m7’           ‘c1:m7’      [image src="" alt="[image of music]" text="image of music" ]
seventh        minor seventh                                 
Diminished     Diminished         ‘dim7’         ‘c1:dim7’    [image src="" alt="[image of music]" text="image of music" ]
seventh        triad,                                        
               diminished
               seventh
Augmented      Augmented triad,   ‘aug7’         ‘c1:aug7’    [image src="" alt="[image of music]" text="image of music" ]
seventh                                                      
               minor seventh
Half-diminishedDiminished         ‘m7.5-’        ‘c1:m7.5-’   [image src="" alt="[image of music]" text="image of music" ]
seventh        triad,                                        
               minor seventh
Minor-major    Minor triad,       ‘m7+’          ‘c1:m7+’     [image src="" alt="[image of music]" text="image of music" ]
seventh        major seventh                                 
Major sixth    Major triad,       ‘6’            ‘c1:6’       [image src="" alt="[image of music]" text="image of music" ]
               sixth                                         
Minor sixth    Minor triad,       ‘m6’           ‘c1:m6’      [image src="" alt="[image of music]" text="image of music" ]
               sixth                                         
Dominant       Dominant           ‘9’            ‘c1:9’       [image src="" alt="[image of music]" text="image of music" ]
ninth          seventh,                                      
               major ninth
Major ninth    Major seventh,     ‘maj9’         ‘c1:maj9’    [image src="" alt="[image of music]" text="image of music" ]
               major ninth                                   
Minor ninth    Minor seventh,     ‘m9’           ‘c1:m9’      [image src="" alt="[image of music]" text="image of music" ]
               major ninth                                   
Dominant       Dominant ninth,    ‘11’           ‘c1:11’      [image src="" alt="[image of music]" text="image of music" ]
eleventh       perfect eleventh                              
Major          Major ninth,       ‘maj11’        ‘c1:maj11’   [image src="" alt="[image of music]" text="image of music" ]
eleventh       perfect eleventh                              
Minor          Minor ninth,       ‘m11’          ‘c1:m11’     [image src="" alt="[image of music]" text="image of music" ]
eleventh       perfect eleventh                              
Dominant       Dominant ninth,    ‘13’           ‘c1:13’      [image src="" alt="[image of music]" text="image of music" ]
thirteenth     major thirteenth                              
Dominant       Dominant           ‘13.11’        ‘c1:13.11’   [image src="" alt="[image of music]" text="image of music" ]
thirteenth     eleventh,                                     
               major thirteenth
Major          Major eleventh,    ‘maj13.11’     ‘c1:maj13.11’ [image src="" alt="[image of music]" text="image of music" ]
thirteenth     major thirteenth                              
Minor          Minor eleventh,    ‘m13.11’       ‘c1:m13.11’  [image src="" alt="[image of music]" text="image of music" ]
thirteenth     major thirteenth                              
Suspended      Major second,      ‘sus2’         ‘c1:sus2’    [image src="" alt="[image of music]" text="image of music" ]
second         perfect fifth                                 
Suspended      Perfect fourth,    ‘sus4’         ‘c1:sus4’    [image src="" alt="[image of music]" text="image of music" ]
fourth         perfect fifth                                 
Power chord    Perfect fifth      ‘1.5’          ‘\powerChords [image src="" alt="[image of music]" text="image of music" ]
(two-voiced)                                     c1:5’       
Power chord    Perfect fifth,     ‘1.5.8’        ‘\powerChords [image src="" alt="[image of music]" text="image of music" ]
(three-voiced) octave                            c1:5.8’     


File: lilypond-notation.info,  Node: Predefined string tunings,  Next: Predefined fretboard diagrams,  Prev: Common chord modifiers,  Up: Notation manual tables

A.3 Predefined string tunings
=============================

The chart below shows the predefined string tunings.

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Predefined fretboard diagrams,  Next: Predefined paper sizes,  Prev: Predefined string tunings,  Up: Notation manual tables

A.4 Predefined fretboard diagrams
=================================

* Menu:

* Diagrams for Guitar::
* Diagrams for Ukulele::
* Diagrams for Mandolin::


File: lilypond-notation.info,  Node: Diagrams for Guitar,  Next: Diagrams for Ukulele,  Up: Predefined fretboard diagrams

Diagrams for Guitar
-------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Diagrams for Ukulele,  Next: Diagrams for Mandolin,  Prev: Diagrams for Guitar,  Up: Predefined fretboard diagrams

Diagrams for Ukulele
--------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Diagrams for Mandolin,  Prev: Diagrams for Ukulele,  Up: Predefined fretboard diagrams

Diagrams for Mandolin
---------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Predefined paper sizes,  Next: MIDI instruments,  Prev: Predefined fretboard diagrams,  Up: Notation manual tables

A.5 Predefined paper sizes
==========================

Paper sizes are defined in ‘scm/paper.scm’

*The “ISO 216” A Series*
‘"a10"’
     (26 x 37 mm)
‘"a9"’
     (37 x 52 mm)
‘"a8"’
     (52 x 74 mm)
‘"a7"’
     (74 x 105 mm)
‘"a6"’
     (105 x 148 mm)
‘"a5"’
     (148 x 210 mm)
‘"a4"’
     (210 x 297 mm)
‘"a3"’
     (297 x 420 mm)
‘"a2"’
     (420 x 594 mm)
‘"a1"’
     (594 x 841 mm)
‘"a0"’
     (841 x 1189 mm)

*The “ISO 216” B Series*
‘"b10"’
     (31 x 44 mm)
‘"b9"’
     (44 x 62 mm)
‘"b8"’
     (62 x 88 mm)
‘"b7"’
     (88 x 125 mm)
‘"b6"’
     (125 x 176 mm)
‘"b5"’
     (176 x 250 mm)
‘"b4"’
     (250 x 353 mm)
‘"b3"’
     (353 x 500 mm)
‘"b2"’
     (500 x 707 mm)
‘"b1"’
     (707 x 1000 mm)
‘"b0"’
     (1000 x 1414 mm)

*Two extended sizes as defined in “DIN 476”*
‘"4a0"’
     (1682 x 2378 mm)
‘"2a0"’
     (1189 x 1682 mm)

*“ISO 269” standard C series*
‘"c10"’
     (28 x 40 mm)
‘"c9"’
     (40 x 57 mm)
‘"c8"’
     (57 x 81 mm)
‘"c7"’
     (81 x 114 mm)
‘"c6"’
     (114 x 162 mm)
‘"c5"’
     (162 x 229 mm)
‘"c4"’
     (229 x 324 mm)
‘"c3"’
     (324 x 458 mm)
‘"c2"’
     (458 x 648 mm)
‘"c1"’
     (648 x 917 mm)
‘"c0"’
     (917 x 1297 mm)

*North American paper sizes*
‘"junior-legal"’
     (8.0 x 5.0 in)
‘"legal"’
     (8.5 x 14.0 in)
‘"ledger"’
     (17.0 x 11.0 in)
‘"letter"’
     (8.5 x 11.0 in)
‘"tabloid"’
     (11.0 x 17.0 in)
‘"11x17"’
     (11.0 x 17.0 in)
‘"17x11"’
     (17.0 x 11.0 in)

*Government-letter by IEEE Printer Working Group, for children’s
writing*
‘"government-letter"’
     (8 x 10.5 in)
‘"government-legal"’
     (8.5 x 13.0 in)
‘"philippine-legal"’
     (8.5 x 13.0 in)

*ANSI sizes*
‘"ansi a"’
     (8.5 x 11.0 in)
‘"ansi b"’
     (17.0 x 11.0 in)
‘"ansi c"’
     (17.0 x 22.0 in)
‘"ansi d"’
     (22.0 x 34.0 in)
‘"ansi e"’
     (34.0 x 44.0 in)
‘"engineering f"’
     (28.0 x 40.0 in)

*North American Architectural sizes*
‘"arch a"’
     (9.0 x 12.0 in)
‘"arch b"’
     (12.0 x 18.0 in)
‘"arch c"’
     (18.0 x 24.0 in)
‘"arch d"’
     (24.0 x 36.0 in)
‘"arch e"’
     (36.0 x 48.0 in)
‘"arch e1"’
     (30.0 x 42.0 in)

*Antique sizes still used in the United Kingdom*
‘"statement"’
     (5.5 x 8.5 in)
‘"half letter"’
     (5.5 x 8.5 in)
‘"quarto"’
     (8.0 x 10.0 in)
‘"octavo"’
     (6.75 x 10.5 in)
‘"executive"’
     (7.25 x 10.5 in)
‘"monarch"’
     (7.25 x 10.5 in)
‘"foolscap"’
     (8.27 x 13.0 in)
‘"folio"’
     (8.27 x 13.0 in)
‘"super-b"’
     (13.0 x 19.0 in)
‘"post"’
     (15.5 x 19.5 in)
‘"crown"’
     (15.0 x 20.0 in)
‘"large post"’
     (16.5 x 21.0 in)
‘"demy"’
     (17.5 x 22.5 in)
‘"medium"’
     (18.0 x 23.0 in)
‘"broadsheet"’
     (18.0 x 24.0 in)
‘"royal"’
     (20.0 x 25.0 in)
‘"elephant"’
     (23.0 x 28.0 in)
‘"double demy"’
     (22.5 x 35.0 in)
‘"quad demy"’
     (35.0 x 45.0 in)
‘"atlas"’
     (26.0 x 34.0 in)
‘"imperial"’
     (22.0 x 30.0 in)
‘"antiquarian"’
     (31.0 x 53.0 in)

*PA4 based sizes*
‘"pa0"’
     (840 x 1120 mm)
‘"pa1"’
     (560 x 840 mm)
‘"pa2"’
     (420 x 560 mm)
‘"pa3"’
     (280 x 420 mm)
‘"pa4"’
     (210 x 280 mm)
‘"pa5"’
     (140 x 210 mm)
‘"pa6"’
     (105 x 140 mm)
‘"pa7"’
     (70 x 105 mm)
‘"pa8"’
     (52 x 70 mm)
‘"pa9"’
     (35 x 52 mm)
‘"pa10"’
     (26 x 35 mm)

*Used in Southeast Asia and Australia*
‘"f4"’
     (210 x 330 mm)

*Used for very small ‘@lilypond’ examples in the documentation based on
a8 landscape.*
‘"a8landscape"’
     (74 x 52 mm)


File: lilypond-notation.info,  Node: MIDI instruments,  Next: List of colors,  Prev: Predefined paper sizes,  Up: Notation manual tables

A.6 MIDI instruments
====================

The following is a list of names that can be used for the
‘midiInstrument’ property.  The order of the instruments below, starting
in the left-hand column moving down, corresponds to the General MIDI
Standard’s 128 Program Numbers.

     acoustic grand            contrabass           lead 7 (fifths)
     bright acoustic           tremolo strings      lead 8 (bass+lead)
     electric grand            pizzicato strings    pad 1 (new age)
     honky-tonk                orchestral harp      pad 2 (warm)
     electric piano 1          timpani              pad 3 (polysynth)
     electric piano 2          string ensemble 1    pad 4 (choir)
     harpsichord               string ensemble 2    pad 5 (bowed)
     clav                      synthstrings 1       pad 6 (metallic)
     celesta                   synthstrings 2       pad 7 (halo)
     glockenspiel              choir aahs           pad 8 (sweep)
     music box                 voice oohs           fx 1 (rain)
     vibraphone                synth voice          fx 2 (soundtrack)
     marimba                   orchestra hit        fx 3 (crystal)
     xylophone                 trumpet              fx 4 (atmosphere)
     tubular bells             trombone             fx 5 (brightness)
     dulcimer                  tuba                 fx 6 (goblins)
     drawbar organ             muted trumpet        fx 7 (echoes)
     percussive organ          french horn          fx 8 (sci-fi)
     rock organ                brass section        sitar
     church organ              synthbrass 1         banjo
     reed organ                synthbrass 2         shamisen
     accordion                 soprano sax          koto
     harmonica                 alto sax             kalimba
     concertina                tenor sax            bagpipe
     acoustic guitar (nylon)   baritone sax         fiddle
     acoustic guitar (steel)   oboe                 shanai
     electric guitar (jazz)    english horn         tinkle bell
     electric guitar (clean)   bassoon              agogo
     electric guitar (muted)   clarinet             steel drums
     overdriven guitar         piccolo              woodblock
     distorted guitar          flute                taiko drum
     guitar harmonics          recorder             melodic tom
     acoustic bass             pan flute            synth drum
     electric bass (finger)    blown bottle         reverse cymbal
     electric bass (pick)      shakuhachi           guitar fret noise
     fretless bass             whistle              breath noise
     slap bass 1               ocarina              seashore
     slap bass 2               lead 1 (square)      bird tweet
     synth bass 1              lead 2 (sawtooth)    telephone ring
     synth bass 2              lead 3 (calliope)    helicopter
     violin                    lead 4 (chiff)       applause
     viola                     lead 5 (charang)     gunshot
     cello                     lead 6 (voice)


File: lilypond-notation.info,  Node: List of colors,  Next: The Feta font,  Prev: MIDI instruments,  Up: Notation manual tables

A.7 List of colors
==================

Normal colors
.............

Usage syntax is detailed in *note Coloring objects::.

black       white          red         green
blue        cyan           magenta     yellow
grey        darkred        darkgreen   darkblue
darkcyan    darkmagenta    darkyellow

X color names
.............

X color names come several variants:

   Any name that is spelled as a single word with capitalization (e.g.
‘LightSlateBlue’) can also be spelled as space separated words without
capitalization (e.g.  ‘light slate blue’).

   The word ‘grey’ can always be spelled ‘gray’ (e.g.  ‘DarkSlateGray’).

   Some names can take a numerical suffix (e.g.  ‘LightSalmon4’).

Color Names without a numerical suffix:
.......................................

snow		GhostWhite	WhiteSmoke	gainsboro	FloralWhite
OldLace		linen		AntiqueWhite	PapayaWhip	BlanchedAlmond
bisque		PeachPuff	NavajoWhite	moccasin	cornsilk
ivory		LemonChiffon	seashell	honeydew	MintCream
azure		AliceBlue	lavender	LavenderBlush	MistyRose
white		black		DarkSlateGrey	DimGrey		SlateGrey
LightSlateGrey	grey		LightGrey	MidnightBlue	navy
NavyBlue	CornflowerBlue	DarkSlateBlue	SlateBlue	MediumSlateBlue
LightSlateBlue	MediumBlue	RoyalBlue	blue		DodgerBlue
DeepSkyBlue	SkyBlue		LightSkyBlue	SteelBlue	LightSteelBlue
LightBlue	PowderBlue	PaleTurquoise	DarkTurquoise	MediumTurquoise
turquoise	cyan		LightCyan	CadetBlue	MediumAquamarine
aquamarine	DarkGreen	DarkOliveGreen	DarkSeaGreen	SeaGreen
MediumSeaGreen	LightSeaGreen	PaleGreen	SpringGreen	LawnGreen
green		chartreuse	MediumSpringGreen	GreenYellow	LimeGreen
YellowGreen	ForestGreen	OliveDrab	DarkKhaki	khaki
PaleGoldenrod	LightGoldenrodYellow	LightYellow	yellow	gold
LightGoldenrod	goldenrod	DarkGoldenrod	RosyBrown	IndianRed
SaddleBrown	sienna		peru		burlywood	beige
wheat		SandyBrown	tan		chocolate	firebrick
brown		DarkSalmon	salmon		LightSalmon	orange
DarkOrange	coral		LightCoral	tomato		OrangeRed
red		HotPink		DeepPink	pink		LightPink
PaleVioletRed	maroon		MediumVioletRed	VioletRed	magenta
violet		plum		orchid		MediumOrchid	DarkOrchid
DarkViolet	BlueViolet	purple		MediumPurple	thistle
DarkGrey	DarkBlue	DarkCyan	DarkMagenta	DarkRed
LightGreen

Color names with a numerical suffix
...................................

In the following names the suffix N can be a number in the range 1-4:

snowN		seashellN	AntiqueWhiteN	bisqueN		PeachPuffN
NavajoWhiteN	LemonChiffonN	cornsilkN	ivoryN		honeydewN
LavenderBlushN	MistyRoseN	azureN		SlateBlueN	RoyalBlueN
blueN		DodgerBlueN	SteelBlueN	DeepSkyBlueN	SkyBlueN
LightSkyBlueN	LightSteelBlueN	LightBlueN	LightCyanN	PaleTurquoiseN
CadetBlueN	turquoiseN	cyanN		aquamarineN	DarkSeaGreenN
SeaGreenN	PaleGreenN	SpringGreenN	greenN		chartreuseN
OliveDrabN	DarkOliveGreenN	khakiN		LightGoldenrodN	LightYellowN
yellowN		goldN		goldenrodN	DarkGoldenrodN	RosyBrownN
IndianRedN	siennaN		burlywoodN	wheatN		tanN
chocolateN	firebrickN	brownN		salmonN		LightSalmonN
orangeN		DarkOrangeN	coralN		tomatoN		OrangeRedN
redN		DeepPinkN	HotPinkN	pinkN		LightPinkN
PaleVioletRedN	maroonN		VioletRedN	magentaN	orchidN
plumN		MediumOrchidN	DarkOrchidN	purpleN		MediumPurpleN
thistleN

Grey Scale
..........

A grey scale can be obtained using:

     greyN

Where N is in the range 0-100.


File: lilypond-notation.info,  Node: The Feta font,  Next: Note head styles,  Prev: List of colors,  Up: Notation manual tables

A.8 The Feta font
=================

The following symbols are available in the Emmentaler font and may be
accessed directly using text markup with the name of the glyph as shown
in the tables below, such as ‘g^\markup {\musicglyph #"scripts.segno" }’
or ‘\markup {\musicglyph #"five"}’.  For more information, see *note
Formatting text::.

* Menu:

* Clef glyphs::
* Time Signature glyphs::
* Number glyphs::
* Accidental glyphs::
* Default Notehead glyphs::
* Special Notehead glyphs::
* Shape-note Notehead glyphs::
* Rest glyphs::
* Flag glyphs::
* Dot glyphs::
* Dynamic glyphs::
* Script glyphs::
* Arrowhead glyphs::
* Bracket-tip glyphs::
* Pedal glyphs::
* Accordion glyphs::
* Tie glyphs::
* Vaticana glyphs::
* Medicaea glyphs::
* Hufnagel glyphs::
* Mensural glyphs::
* Neomensural glyphs::
* Petrucci glyphs::
* Solesmes glyphs::
* Kievan Notation glyphs::


File: lilypond-notation.info,  Node: Clef glyphs,  Next: Time Signature glyphs,  Up: The Feta font

Clef glyphs
-----------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Time Signature glyphs,  Next: Number glyphs,  Prev: Clef glyphs,  Up: The Feta font

Time Signature glyphs
---------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Number glyphs,  Next: Accidental glyphs,  Prev: Time Signature glyphs,  Up: The Feta font

Number glyphs
-------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Accidental glyphs,  Next: Default Notehead glyphs,  Prev: Number glyphs,  Up: The Feta font

Accidental glyphs
-----------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Default Notehead glyphs,  Next: Special Notehead glyphs,  Prev: Accidental glyphs,  Up: The Feta font

Default Notehead glyphs
-----------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Special Notehead glyphs,  Next: Shape-note Notehead glyphs,  Prev: Default Notehead glyphs,  Up: The Feta font

Special Notehead glyphs
-----------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Shape-note Notehead glyphs,  Next: Rest glyphs,  Prev: Special Notehead glyphs,  Up: The Feta font

Shape-note Notehead glyphs
--------------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Rest glyphs,  Next: Flag glyphs,  Prev: Shape-note Notehead glyphs,  Up: The Feta font

Rest glyphs
-----------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Flag glyphs,  Next: Dot glyphs,  Prev: Rest glyphs,  Up: The Feta font

Flag glyphs
-----------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Dot glyphs,  Next: Dynamic glyphs,  Prev: Flag glyphs,  Up: The Feta font

Dot glyphs
----------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Dynamic glyphs,  Next: Script glyphs,  Prev: Dot glyphs,  Up: The Feta font

Dynamic glyphs
--------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Script glyphs,  Next: Arrowhead glyphs,  Prev: Dynamic glyphs,  Up: The Feta font

Script glyphs
-------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Arrowhead glyphs,  Next: Bracket-tip glyphs,  Prev: Script glyphs,  Up: The Feta font

Arrowhead glyphs
----------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Bracket-tip glyphs,  Next: Pedal glyphs,  Prev: Arrowhead glyphs,  Up: The Feta font

Bracket-tip glyphs
------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Pedal glyphs,  Next: Accordion glyphs,  Prev: Bracket-tip glyphs,  Up: The Feta font

Pedal glyphs
------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Accordion glyphs,  Next: Tie glyphs,  Prev: Pedal glyphs,  Up: The Feta font

Accordion glyphs
----------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Tie glyphs,  Next: Vaticana glyphs,  Prev: Accordion glyphs,  Up: The Feta font

Tie glyphs
----------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Vaticana glyphs,  Next: Medicaea glyphs,  Prev: Tie glyphs,  Up: The Feta font

Vaticana glyphs
---------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Medicaea glyphs,  Next: Hufnagel glyphs,  Prev: Vaticana glyphs,  Up: The Feta font

Medicaea glyphs
---------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Hufnagel glyphs,  Next: Mensural glyphs,  Prev: Medicaea glyphs,  Up: The Feta font

Hufnagel glyphs
---------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Mensural glyphs,  Next: Neomensural glyphs,  Prev: Hufnagel glyphs,  Up: The Feta font

Mensural glyphs
---------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Neomensural glyphs,  Next: Petrucci glyphs,  Prev: Mensural glyphs,  Up: The Feta font

Neomensural glyphs
------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Petrucci glyphs,  Next: Solesmes glyphs,  Prev: Neomensural glyphs,  Up: The Feta font

Petrucci glyphs
---------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Solesmes glyphs,  Next: Kievan Notation glyphs,  Prev: Petrucci glyphs,  Up: The Feta font

Solesmes glyphs
---------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Kievan Notation glyphs,  Prev: Solesmes glyphs,  Up: The Feta font

Kievan Notation glyphs
----------------------

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Note head styles,  Next: Clef styles,  Prev: The Feta font,  Up: Notation manual tables

A.9 Note head styles
====================

The following styles may be used for note heads.

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Clef styles,  Next: Text markup commands,  Prev: Note head styles,  Up: Notation manual tables

A.10 Clef styles
================

The following table shows all the different clef styles possible
(including where _middle C_ sits relative to the clef).

Example                Output         Example                Output
                                                             
----------------------------------------------------------------------------
‘\clef G’               [image src="" alt="[image of music]" text="image of music" ]‘\clef "G2"’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef treble’          [image src="" alt="[image of music]" text="image of music" ]‘\clef violin’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef french’          [image src="" alt="[image of music]" text="image of music" ]‘\clef GG’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef tenorG’          [image src="" alt="[image of music]" text="image of music" ]‘\clef soprano’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef mezzosoprano’    [image src="" alt="[image of music]" text="image of music" ]‘\clef C’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef alto’            [image src="" alt="[image of music]" text="image of music" ]‘\clef tenor’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef baritone’        [image src="" alt="[image of music]" text="image of music" ]‘\clef varC’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef altovarC’        [image src="" alt="[image of music]" text="image of music" ]‘\clef tenorvarC’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef baritonevarC’    [image src="" alt="[image of music]" text="image of music" ]‘\clef varbaritone’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef baritonevarF’    [image src="" alt="[image of music]" text="image of music" ]‘\clef F’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef bass’            [image src="" alt="[image of music]" text="image of music" ]‘\clef subbass’ [image src="" alt="[image of music]" text="image of music" ]
                                                             
‘\clef percussion’      [image src="" alt="[image of music]" text="image of music" ]‘ \new TabStaff { [image src="" alt="[image of music]" text="image of music" ]
                                        \clef tab            
                                      } ’
‘ \new TabStaff {       [image src="" alt="[image of music]" text="image of music" ]
  \clef moderntab      
} ’


File: lilypond-notation.info,  Node: Text markup commands,  Next: Text markup list commands,  Prev: Clef styles,  Up: Notation manual tables

A.11 Text markup commands
=========================

The following commands can all be used inside ‘\markup { }’.

* Menu:

* Font::                         
* Align::                        
* Graphic::                      
* Music::                        
* Instrument Specific Markup::   
* Accordion Registers::          
* Other::                        


File: lilypond-notation.info,  Node: Font,  Next: Align,  Up: Text markup commands

A.11.1 Font
-----------

‘\abs-fontsize’ SIZE (number) ARG (markup)

     Use SIZE as the absolute font size (in points) to display ARG.
     Adjusts ‘baseline-skip’ and ‘word-space’ accordingly.

          \markup {
            default text font size
            \hspace #2
            \abs-fontsize #16 { text font size 16 }
            \hspace #2
            \abs-fontsize #12 { text font size 12 }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\bold’ ARG (markup)

     Switch to bold font-series.

          \markup {
            default
            \hspace #2
            \bold
            bold
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\box’ ARG (markup)

     Draw a box round ARG.  Looks at ‘thickness’, ‘box-padding’ and
     ‘font-size’ properties to determine line thickness and padding
     around the markup.

          \markup {
            \override #'(box-padding . 0.5)
            \box
            \line { V. S. }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘box-padding’ (0.2)
        • ‘font-size’ (0)
        • ‘thickness’ (1)

‘\caps’ ARG (markup)

     Copy of the ‘\smallCaps’ command.

          \markup {
            default
            \hspace #2
            \caps {
              Text in small caps
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\dynamic’ ARG (markup)

     Use the dynamic font.  This font only contains s, f, m, z, p, and
     r.  When producing phrases, like ‘più f’, the normal words (like
     ‘più’) should be done in a different font.  The recommended font
     for this is bold and italic.
          \markup {
            \dynamic {
              sfzp
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\finger’ ARG (markup)

     Set ARG as small numbers.

          \markup {
            \finger {
              1 2 3 4 5
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\fontCaps’ ARG (markup)

     Set ‘font-shape’ to ‘caps’

     Note: ‘\fontCaps’ requires the installation and selection of fonts
     which support the ‘caps’ font shape.

‘\fontsize’ INCREMENT (number) ARG (markup)

     Add INCREMENT to the font-size.  Adjusts ‘baseline-skip’
     accordingly.

          \markup {
            default
            \hspace #2
            \fontsize #-1.5
            smaller
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’ (2)
        • ‘word-space’ (1)
        • ‘font-size’ (0)

‘\huge’ ARG (markup)

     Set font size to +2.

          \markup {
            default
            \hspace #2
            \huge
            huge
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\italic’ ARG (markup)

     Use italic ‘font-shape’ for ARG.

          \markup {
            default
            \hspace #2
            \italic
            italic
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\large’ ARG (markup)

     Set font size to +1.

          \markup {
            default
            \hspace #2
            \large
            large
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\larger’ ARG (markup)

     Increase the font size relative to the current setting.

          \markup {
            default
            \hspace #2
            \larger
            larger
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\magnify’ SZ (number) ARG (markup)

     Set the font magnification for its argument.  In the following
     example, the middle A is 10% larger:

          A \magnify #1.1 { A } A

     Note: Magnification only works if a font name is explicitly
     selected.  Use ‘\fontsize’ otherwise.

          \markup {
            default
            \hspace #2
            \magnify #1.5 {
              50% larger
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\medium’ ARG (markup)

     Switch to medium font-series (in contrast to bold).

          \markup {
            \bold {
              some bold text
              \hspace #2
              \medium {
                medium font series
              }
              \hspace #2
              bold again
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\normal-size-sub’ ARG (markup)

     Set ARG in subscript with a normal font size.

          \markup {
            default
            \normal-size-sub {
              subscript in standard size
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\normal-size-super’ ARG (markup)

     Set ARG in superscript with a normal font size.

          \markup {
            default
            \normal-size-super {
              superscript in standard size
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\normal-text’ ARG (markup)

     Set all font related properties (except the size) to get the
     default normal text font, no matter what font was used earlier.

          \markup {
            \huge \bold \sans \caps {
              huge bold sans caps
              \hspace #2
              \normal-text {
                huge normal
              }
              \hspace #2
              as before
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\normalsize’ ARG (markup)

     Set font size to default.

          \markup {
            \teeny {
              this is very small
              \hspace #2
              \normalsize {
                normal size
              }
              \hspace #2
              teeny again
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\number’ ARG (markup)

     Set font family to ‘number’, which yields the font used for time
     signatures and fingerings.  This font contains numbers and some
     punctuation; it has no letters.

          \markup {
            \number {
              0 1 2 3 4 5 6 7 8 9 . ,
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\overtie’ ARG (markup)

     Overtie ARG.

          \markup \line {
            \overtie "overtied"
            \override #'(offset . 5)
            \override #'(thickness . 1)
            \overtie "overtied"
            \override #'(offset . 1)
            \override #'(thickness . 5)
            \overtie "overtied"
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘shorten-pair’ ((0 .  0))
        • ‘direction’ (1)
        • ‘offset’ (2)
        • ‘thickness’ (1)

‘\replace’ REPLACEMENTS (list) ARG (markup)

     Used to automatically replace a string by another in the markup
     ARG.  Each pair of the alist REPLACEMENTS specifies what should be
     replaced.  The ‘key’ is the string to be replaced by the ‘value’
     string.

          \markup \replace #'(("thx" . "Thanks!")) thx
 [image src="" alt="[image of music]" text="image of music" ]

‘\roman’ ARG (markup)

     Set font family to ‘roman’.

          \markup {
            \sans \bold {
              sans serif, bold
              \hspace #2
              \roman {
                text in roman font family
              }
              \hspace #2
              return to sans
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\sans’ ARG (markup)

     Switch to the sans serif font family.

          \markup {
            default
            \hspace #2
            \sans {
              sans serif
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\simple’ STR (string)

     A simple text string; ‘\markup { foo }’ is equivalent with ‘\markup
     { \simple #"foo" }’.

     Note: for creating standard text markup or defining new markup
     commands, the use of ‘\simple’ is unnecessary.

          \markup {
            \simple #"simple"
            \simple #"text"
            \simple #"strings"
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\small’ ARG (markup)

     Set font size to -1.

          \markup {
            default
            \hspace #2
            \small
            small
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\smallCaps’ ARG (markup)

     Emit ARG as small caps.

     Note: ‘\smallCaps’ does not support accented characters.

          \markup {
            default
            \hspace #2
            \smallCaps {
              Text in small caps
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\smaller’ ARG (markup)

     Decrease the font size relative to the current setting.

          \markup {
            \fontsize #3.5 {
              some large text
              \hspace #2
              \smaller {
                a bit smaller
              }
              \hspace #2
              more large text
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\sub’ ARG (markup)

     Set ARG in subscript.

          \markup {
            \concat {
              H
              \sub {
                2
              }
              O
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\super’ ARG (markup)

     Set ARG in superscript.

          \markup {
            E =
            \concat {
              mc
              \super
              2
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\teeny’ ARG (markup)

     Set font size to -3.

          \markup {
            default
            \hspace #2
            \teeny
            teeny
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\text’ ARG (markup)

     Use a text font instead of music symbol or music alphabet font.

          \markup {
            \number {
              1, 2,
              \text {
                three, four,
              }
              5
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\tie’ ARG (markup)

     Adds a horizontal bow created with ‘make-tie-stencil’ at bottom or
     top of ARG.  Looks at ‘thickness’ to determine line thickness, and
     ‘offset’ to determine y-offset.  The added bow fits the extent of
     ARG, ‘shorten-pair’ may be used to modify this.  DIRECTION may be
     set using an ‘override’ or direction-modifiers or ‘voiceOne’, etc.

          \markup {
            \override #'(direction . 1)
            \tie "above"
            \override #'(direction . -1)
            \tie "below"
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘shorten-pair’ ((0 .  0))
        • ‘direction’ (1)
        • ‘offset’ (2)
        • ‘thickness’ (1)

‘\tiny’ ARG (markup)

     Set font size to -2.

          \markup {
            default
            \hspace #2
            \tiny
            tiny
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\typewriter’ ARG (markup)

     Use ‘font-family’ typewriter for ARG.

          \markup {
            default
            \hspace #2
            \typewriter
            typewriter
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\underline’ ARG (markup)

     Underline ARG.  Looks at ‘thickness’ to determine line thickness,
     and ‘offset’ to determine line y-offset.

          \markup \fill-line {
            \underline "underlined"
            \override #'(offset . 5)
            \override #'(thickness . 1)
            \underline "underlined"
            \override #'(offset . 1)
            \override #'(thickness . 5)
            \underline "underlined"
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘offset’ (2)
        • ‘thickness’ (1)

‘\undertie’ ARG (markup)

          \markup \line {
            \undertie "undertied"
            \override #'(offset . 5)
            \override #'(thickness . 1)
            \undertie "undertied"
            \override #'(offset . 1)
            \override #'(thickness . 5)
            \undertie "undertied"
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘shorten-pair’ ((0 .  0))
        • ‘direction’ (1)
        • ‘offset’ (2)
        • ‘thickness’ (1)

‘\upright’ ARG (markup)

     Set ‘font-shape’ to ‘upright’.  This is the opposite of ‘italic’.

          \markup {
            \italic {
              italic text
              \hspace #2
              \upright {
                upright text
              }
              \hspace #2
              italic again
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Align,  Next: Graphic,  Prev: Font,  Up: Text markup commands

A.11.2 Align
------------

‘\center-align’ ARG (markup)

     Align ‘arg’ to its X center.

          \markup {
            \column {
              one
              \center-align
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\center-column’ ARGS (markup list)

     Put ‘args’ in a centered column.

          \markup {
            \center-column {
              one
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’

‘\column’ ARGS (markup list)

     Stack the markups in ARGS vertically.  The property ‘baseline-skip’
     determines the space between markups in ARGS.

          \markup {
            \column {
              one
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’

‘\combine’ ARG1 (markup) ARG2 (markup)

     Print two markups on top of each other.

     Note: ‘\combine’ cannot take a list of markups enclosed in curly
     braces as an argument; for this purpose use ‘\overlay’ instead.

          \markup {
            \fontsize #5
            \override #'(thickness . 2)
            \combine
              \draw-line #'(0 . 4)
              \arrow-head #Y #DOWN ##f
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\concat’ ARGS (markup list)

     Concatenate ARGS in a horizontal line, without spaces in between.
     Strings and simple markups are concatenated on the input level,
     allowing ligatures.  For example, ‘\concat { "f" \simple #"i" }’ is
     equivalent to ‘"fi"’.

          \markup {
            \concat {
              one
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\dir-column’ ARGS (markup list)

     Make a column of ARGS, going up or down, depending on the setting
     of the ‘direction’ layout property.

          \markup {
            \override #`(direction . ,UP) {
              \dir-column {
                going up
              }
            }
            \hspace #1
            \dir-column {
              going down
            }
            \hspace #1
            \override #'(direction . 1) {
              \dir-column {
                going up
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’
        • ‘direction’

‘\fill-line’ ARGS (markup list)

     Put MARKUPS in a horizontal line of width LINE-WIDTH.  The markups
     are spaced or flushed to fill the entire line.  If there are no
     arguments, return an empty stencil.

          \markup {
            \column {
              \fill-line {
                Words evenly spaced across the page
              }
              \null
              \fill-line {
                \line { Text markups }
                \line {
                  \italic { evenly spaced }
                }
                \line { across the page }
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘line-width’ (#f)
        • ‘word-space’ (0.6)
        • ‘text-direction’ (1)

‘\fill-with-pattern’ SPACE (number) DIR (direction) PATTERN (markup) LEFT (markup) RIGHT (markup)

     Put LEFT and RIGHT in a horizontal line of width ‘line-width’ with
     a line of markups PATTERN in between.  Patterns are spaced apart by
     SPACE.  Patterns are aligned to the DIR markup.

          \markup \column {
            "right-aligned :"
            \fill-with-pattern #1 #RIGHT . first right
            \fill-with-pattern #1 #RIGHT . second right
            \null
            "center-aligned :"
            \fill-with-pattern #1.5 #CENTER - left right
            \null
            "left-aligned :"
            \override #'(line-width . 50)
            \fill-with-pattern #2 #LEFT : left first
            \override #'(line-width . 50)
            \fill-with-pattern #2 #LEFT : left second
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘line-width’
        • ‘word-space’

‘\general-align’ AXIS (integer) DIR (number) ARG (markup)

     Align ARG in AXIS direction to the DIR side.

          \markup {
            \column {
              one
              \general-align #X #LEFT
              two
              three
              \null
              one
              \general-align #X #CENTER
              two
              three
              \null
              \line {
                one
                \general-align #Y #UP
                two
                three
              }
              \null
              \line {
                one
                \general-align #Y #3.2
                two
                three
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\halign’ DIR (number) ARG (markup)

     Set horizontal alignment.  If DIR is ‘-1’, then it is left-aligned,
     while ‘+1’ is right.  Values in between interpolate alignment
     accordingly.

          \markup {
            \column {
              one
              \halign #LEFT
              two
              three
              \null
              one
              \halign #CENTER
              two
              three
              \null
              one
              \halign #RIGHT
              two
              three
              \null
              one
              \halign #-5
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\hcenter-in’ LENGTH (number) ARG (markup)

     Center ARG horizontally within a box of extending LENGTH/2 to the
     left and right.

          \new StaffGroup <<
            \new Staff {
              \set Staff.instrumentName = \markup {
                \hcenter-in #12
                Oboe
              }
              c''1
            }
            \new Staff {
              \set Staff.instrumentName = \markup {
                \hcenter-in #12
                Bassoon
              }
              \clef tenor
              c'1
            }
          >>
 [image src="" alt="[image of music]" text="image of music" ]

‘\hspace’ AMOUNT (number)

     Create an invisible object taking up horizontal space AMOUNT.

          \markup {
            one
            \hspace #2
            two
            \hspace #8
            three
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\justify-field’ SYMBOL (symbol)

     Justify the data which has been assigned to SYMBOL.

          \header {
            title = "My title"
            myText = "Lorem ipsum dolor sit amet, consectetur adipisicing
              elit, sed do eiusmod tempor incididunt ut labore et dolore magna
              aliqua.  Ut enim ad minim veniam, quis nostrud exercitation ullamco
              laboris nisi ut aliquip ex ea commodo consequat."
          }

          \paper {
            bookTitleMarkup = \markup {
              \column {
                \fill-line { \fromproperty #'header:title }
                \null
                \justify-field #'header:myText
              }
            }
          }

          \markup {
            \null
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\justify-line’ ARGS (markup list)

     Put MARKUPS in a horizontal line of width LINE-WIDTH.  The markups
     are spread to fill the entire line and separated by equal space.
     If there are no arguments, return an empty stencil.

          \markup {
            \justify-line {
              Space between neighboring words is constant
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘line-width’ (#f)
        • ‘word-space’ (0.6)
        • ‘text-direction’ (1)

‘\justify’ ARGS (markup list)

     Like ‘\wordwrap’, but with lines stretched to justify the margins.
     Use ‘\override #'(line-width . X)’ to set the line width; X is the
     number of staff spaces.

          \markup {
            \justify {
              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed
              do eiusmod tempor incididunt ut labore et dolore magna aliqua.
              Ut enim ad minim veniam, quis nostrud exercitation ullamco
              laboris nisi ut aliquip ex ea commodo consequat.
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’ (#f)
        • ‘baseline-skip’

‘\justify-string’ ARG (string)

     Justify a string.  Paragraphs may be separated with double newlines

          \markup {
            \override #'(line-width . 40)
            \justify-string #"Lorem ipsum dolor sit amet, consectetur
                adipisicing elit, sed do eiusmod tempor incididunt ut labore
                et dolore magna aliqua.


                Ut enim ad minim veniam, quis nostrud exercitation ullamco
                laboris nisi ut aliquip ex ea commodo consequat.


                Excepteur sint occaecat cupidatat non proident, sunt in culpa
                qui officia deserunt mollit anim id est laborum"
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’
        • ‘baseline-skip’

‘\left-align’ ARG (markup)

     Align ARG on its left edge.

          \markup {
            \column {
              one
              \left-align
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\left-column’ ARGS (markup list)

     Put ‘args’ in a left-aligned column.

          \markup {
            \left-column {
              one
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’

‘\line’ ARGS (markup list)

     Put ARGS in a horizontal line.  The property ‘word-space’
     determines the space between markups in ARGS.

          \markup {
            \line {
              one two three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’

‘\lower’ AMOUNT (number) ARG (markup)

     Lower ARG by the distance AMOUNT.  A negative AMOUNT indicates
     raising; see also ‘\raise’.

          \markup {
            one
            \lower #3
            two
            three
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\overlay’ ARGS (markup list)

     Takes a list of markups combining them.

          \markup {
            \fontsize #5
            \override #'(thickness . 2)
            \overlay {
              \draw-line #'(0 . 4)
              \arrow-head #Y #DOWN ##f
              \translate #'(0 . 4)\arrow-head #Y #UP ##f
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\pad-around’ AMOUNT (number) ARG (markup)

     Add padding AMOUNT all around ARG.

          \markup {
            \box {
              default
            }
            \hspace #2
            \box {
              \pad-around #0.5 {
                padded
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\pad-markup’ AMOUNT (number) ARG (markup)

     Add space around a markup object.  Identical to ‘pad-around’.

          \markup {
            \box {
              default
            }
            \hspace #2
            \box {
              \pad-markup #1 {
                padded
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\pad-to-box’ X-EXT (pair of numbers) Y-EXT (pair of numbers) ARG (markup)

     Make ARG take at least X-EXT, Y-EXT space.

          \markup {
            \box {
              default
            }
            \hspace #4
            \box {
              \pad-to-box #'(0 . 10) #'(0 . 3) {
                padded
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\pad-x’ AMOUNT (number) ARG (markup)

     Add padding AMOUNT around ARG in the X direction.

          \markup {
            \box {
              default
            }
            \hspace #4
            \box {
              \pad-x #2 {
                padded
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\put-adjacent’ AXIS (integer) DIR (direction) ARG1 (markup) ARG2 (markup)

     Put ARG2 next to ARG1, without moving ARG1.

‘\raise’ AMOUNT (number) ARG (markup)

     Raise ARG by the distance AMOUNT.  A negative AMOUNT indicates
     lowering, see also ‘\lower’.

     The argument to ‘\raise’ is the vertical displacement amount,
     measured in (global) staff spaces.  ‘\raise’ and ‘\super’ raise
     objects in relation to their surrounding markups.

     If the text object itself is positioned above or below the staff,
     then ‘\raise’ cannot be used to move it, since the mechanism that
     positions it next to the staff cancels any shift made with
     ‘\raise’.  For vertical positioning, use the ‘padding’ and/or
     ‘extra-offset’ properties.

          \markup {
            C
            \small
            \bold
            \raise #1.0
            9/7+
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\right-align’ ARG (markup)

     Align ARG on its right edge.

          \markup {
            \column {
              one
              \right-align
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\right-column’ ARGS (markup list)

     Put ‘args’ in a right-aligned column.

          \markup {
            \right-column {
              one
              two
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’

‘\rotate’ ANG (number) ARG (markup)

     Rotate object with ANG degrees around its center.

          \markup {
            default
            \hspace #2
            \rotate #45
            \line {
              rotated 45°
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\translate’ OFFSET (pair of numbers) ARG (markup)

     Translate ARG relative to its surroundings.  OFFSET is a pair of
     numbers representing the displacement in the X and Y axis.

          \markup {
            *
            \translate #'(2 . 3)
            \line { translated two spaces right, three up }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\translate-scaled’ OFFSET (pair of numbers) ARG (markup)

     Translate ARG by OFFSET, scaling the offset by the ‘font-size’.

          \markup {
            \fontsize #5 {
              * \translate #'(2 . 3) translate
              \hspace #2
              * \translate-scaled #'(2 . 3) translate-scaled
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\vcenter’ ARG (markup)

     Align ‘arg’ to its Y center.

          \markup {
            one
            \vcenter
            two
            three
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\vspace’ AMOUNT (number)

     Create an invisible object taking up vertical space of AMOUNT
     multiplied by 3.

          \markup {
              \center-column {
              one
              \vspace #2
              two
              \vspace #5
              three
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\wordwrap-field’ SYMBOL (symbol)

     Wordwrap the data which has been assigned to SYMBOL.

          \header {
            title = "My title"
            myText = "Lorem ipsum dolor sit amet, consectetur adipisicing
              elit, sed do eiusmod tempor incididunt ut labore et dolore
              magna aliqua.  Ut enim ad minim veniam, quis nostrud
              exercitation ullamco laboris nisi ut aliquip ex ea commodo
              consequat."
          }

          \paper {
            bookTitleMarkup = \markup {
              \column {
                \fill-line { \fromproperty #'header:title }
                \null
                \wordwrap-field #'header:myText
              }
            }
          }

          \markup {
            \null
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\wordwrap’ ARGS (markup list)

     Simple wordwrap.  Use ‘\override #'(line-width . X)’ to set the
     line width, where X is the number of staff spaces.

          \markup {
            \wordwrap {
              Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed
              do eiusmod tempor incididunt ut labore et dolore magna aliqua.
              Ut enim ad minim veniam, quis nostrud exercitation ullamco
              laboris nisi ut aliquip ex ea commodo consequat.
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’ (#f)
        • ‘baseline-skip’

‘\wordwrap-string’ ARG (string)

     Wordwrap a string.  Paragraphs may be separated with double
     newlines.

          \markup {
            \override #'(line-width . 40)
            \wordwrap-string #"Lorem ipsum dolor sit amet, consectetur
                adipisicing elit, sed do eiusmod tempor incididunt ut labore
                et dolore magna aliqua.


                Ut enim ad minim veniam, quis nostrud exercitation ullamco
                laboris nisi ut aliquip ex ea commodo consequat.


                Excepteur sint occaecat cupidatat non proident, sunt in culpa
                qui officia deserunt mollit anim id est laborum"
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’
        • ‘baseline-skip’


File: lilypond-notation.info,  Node: Graphic,  Next: Music,  Prev: Align,  Up: Text markup commands

A.11.3 Graphic
--------------

‘\arrow-head’ AXIS (integer) DIR (direction) FILLED (boolean)

     Produce an arrow head in specified direction and axis.  Use the
     filled head if FILLED is specified.
          \markup {
            \fontsize #5 {
              \general-align #Y #DOWN {
                \arrow-head #Y #UP ##t
                \arrow-head #Y #DOWN ##f
                \hspace #2
                \arrow-head #X #RIGHT ##f
                \arrow-head #X #LEFT ##f
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\beam’ WIDTH (number) SLOPE (number) THICKNESS (number)

     Create a beam with the specified parameters.
          \markup {
            \beam #5 #1 #2
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\bracket’ ARG (markup)

     Draw vertical brackets around ARG.

          \markup {
            \bracket {
              \note #"2." #UP
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\circle’ ARG (markup)

     Draw a circle around ARG.  Use ‘thickness’, ‘circle-padding’ and
     ‘font-size’ properties to determine line thickness and padding
     around the markup.

          \markup {
            \circle {
              Hi
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘circle-padding’ (0.2)
        • ‘font-size’ (0)
        • ‘thickness’ (1)

‘\draw-circle’ RADIUS (number) THICKNESS (number) FILLED (boolean)

     A circle of radius RADIUS and thickness THICKNESS, optionally
     filled.

          \markup {
            \draw-circle #2 #0.5 ##f
            \hspace #2
            \draw-circle #2 #0 ##t
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\draw-dashed-line’ DEST (pair of numbers)

     A dashed line.

     If ‘full-length’ is set to #t (default) the dashed-line extends to
     the whole length given by DEST, without white space at beginning or
     end.  ‘off’ will then be altered to fit.  To insist on the given
     (or default) values of ‘on’, ‘off’ use ‘\override #'(full-length .
     #f)’ Manual settings for ‘on’,‘off’ and ‘phase’ are possible.
          \markup {
            \draw-dashed-line #'(5.1 . 2.3)
            \override #'(on . 0.3)
            \override #'(off . 0.5)
            \draw-dashed-line #'(5.1 . 2.3)
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘full-length’ (#t)
        • ‘phase’ (0)
        • ‘off’ (1)
        • ‘on’ (1)
        • ‘thickness’ (1)

‘\draw-dotted-line’ DEST (pair of numbers)

     A dotted line.

     The dotted-line always extends to the whole length given by DEST,
     without white space at beginning or end.  Manual settings for ‘off’
     are possible to get larger or smaller space between the dots.  The
     given (or default) value of ‘off’ will be altered to fit the
     line-length.
          \markup {
            \draw-dotted-line #'(5.1 . 2.3)
            \override #'(thickness . 2)
            \override #'(off . 0.2)
            \draw-dotted-line #'(5.1 . 2.3)
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘phase’ (0)
        • ‘off’ (1)
        • ‘thickness’ (1)

‘\draw-hline’

     Draws a line across a page, where the property ‘span-factor’
     controls what fraction of the page is taken up.
          \markup {
            \column {
              \draw-hline
              \override #'(span-factor . 1/3)
              \draw-hline
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘span-factor’ (1)
        • ‘line-width’
        • ‘draw-line-markup’

‘\draw-line’ DEST (pair of numbers)

     A simple line.
          \markup {
            \draw-line #'(4 . 4)
            \override #'(thickness . 5)
            \draw-line #'(-3 . 0)
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘thickness’ (1)

‘\draw-squiggle-line’ SQ-LENGTH (number) DEST (pair of numbers) EQ-END? (boolean)

     A squiggled line.

     If ‘eq-end?’ is set to ‘#t’, it is ensured the squiggled line ends
     with a bow in same direction as the starting one.  ‘sq-length’ is
     the length of the first bow.  ‘dest’ is the end point of the
     squiggled line.  To match ‘dest’ the squiggled line is scaled
     accordingly.  Its appearance may be customized by overrides for
     ‘thickness’, ‘angularity’, ‘height’ and ‘orientation’.
          \markup
            \column {
              \draw-squiggle-line #0.5 #'(6 . 0) ##t
              \override #'(orientation . -1)
              \draw-squiggle-line #0.5 #'(6 . 0) ##t
              \draw-squiggle-line #0.5 #'(6 . 0) ##f
              \override #'(height . 1)
              \draw-squiggle-line #0.5 #'(6 . 0) ##t
              \override #'(thickness . 5)
              \draw-squiggle-line #0.5 #'(6 . 0) ##t
              \override #'(angularity . 2)
              \draw-squiggle-line #0.5 #'(6 . 0) ##t
            }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘orientation’ (1)
        • ‘height’ (0.5)
        • ‘angularity’ (0)
        • ‘thickness’ (0.5)

‘\ellipse’ ARG (markup)

     Draw an ellipse around ARG.  Use ‘thickness’, ‘x-padding’,
     ‘y-padding’ and ‘font-size’ properties to determine line thickness
     and padding around the markup.

          \markup {
            \ellipse {
              Hi
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘y-padding’ (0.2)
        • ‘x-padding’ (0.2)
        • ‘font-size’ (0)
        • ‘thickness’ (1)

‘\epsfile’ AXIS (number) SIZE (number) FILE-NAME (string)

     Inline an EPS image.  The image is scaled along AXIS to SIZE.

          \markup {
            \general-align #Y #DOWN {
              \epsfile #X #20 #"context-example.eps"
              \epsfile #Y #20 #"context-example.eps"
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\filled-box’ XEXT (pair of numbers) YEXT (pair of numbers) BLOT (number)

     Draw a box with rounded corners of dimensions XEXT and YEXT.  For
     example,
     \filled-box #'(-.3 . 1.8) #'(-.3 . 1.8) #0
     creates a box extending horizontally from -0.3 to 1.8 and
     vertically from -0.3 up to 1.8, with corners formed from a circle
     of diameter 0 (i.e., sharp corners).

          \markup {
            \filled-box #'(0 . 4) #'(0 . 4) #0
            \filled-box #'(0 . 2) #'(-4 . 2) #0.4
            \filled-box #'(1 . 8) #'(0 . 7) #0.2
            \with-color #white
            \filled-box #'(-4.5 . -2.5) #'(3.5 . 5.5) #0.7
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\hbracket’ ARG (markup)

     Draw horizontal brackets around ARG.

          \markup {
            \hbracket {
              \line {
                one two three
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\oval’ ARG (markup)

     Draw an oval around ARG.  Use ‘thickness’, ‘x-padding’, ‘x-padding’
     and ‘font-size’ properties to determine line thickness and padding
     around the markup.

          \markup {
            \oval {
              Hi
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘y-padding’ (0.75)
        • ‘x-padding’ (0.75)
        • ‘font-size’ (0)
        • ‘thickness’ (1)

‘\parenthesize’ ARG (markup)

     Draw parentheses around ARG.  This is useful for parenthesizing a
     column containing several lines of text.

          \markup {
            \line {
              \parenthesize {
                \column {
                  foo
                  bar
                }
              }
              \override #'(angularity . 2) {
                \parenthesize {
                  \column {
                    bah
                    baz
                  }
                }
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘width’ (0.25)
        • ‘thickness’ (1)
        • ‘size’ (1)
        • ‘padding’
        • ‘angularity’ (0)

‘\path’ THICKNESS (number) COMMANDS (list)

     Draws a path with line THICKNESS according to the directions given
     in COMMANDS.  COMMANDS is a list of lists where the ‘car’ of each
     sublist is a drawing command and the ‘cdr’ comprises the associated
     arguments for each command.

     There are seven commands available to use in the list ‘commands’:
     ‘moveto’, ‘rmoveto’, ‘lineto’, ‘rlineto’, ‘curveto’, ‘rcurveto’,
     and ‘closepath’.  Note that the commands that begin with _r_ are
     the relative variants of the other three commands.

     The commands ‘moveto’, ‘rmoveto’, ‘lineto’, and ‘rlineto’ take 2
     arguments; they are the X and Y coordinates for the destination
     point.

     The commands ‘curveto’ and ‘rcurveto’ create cubic Bézier curves,
     and take 6 arguments; the first two are the X and Y coordinates for
     the first control point, the second two are the X and Y coordinates
     for the second control point, and the last two are the X and Y
     coordinates for the destination point.

     The ‘closepath’ command takes zero arguments and closes the current
     subpath in the active path.

     Note that a sequence of commands _must_ begin with a ‘moveto’ or
     ‘rmoveto’ to work with the SVG output.

     Line-cap styles and line-join styles may be customized by
     overriding the ‘line-cap-style’ and ‘line-join-style’ properties,
     respectively.  Available line-cap styles are ‘'butt’, ‘'round’, and
     ‘'square’.  Available line-join styles are ‘'miter’, ‘'round’, and
     ‘'bevel’.

     The property ‘filled’ specifies whether or not the path is filled
     with color.

          samplePath =
            #'((moveto 0 0)
               (lineto -1 1)
               (lineto 1 1)
               (lineto 1 -1)
               (curveto -5 -5 -5 5 -1 0)
               (closepath))

          \markup {
            \path #0.25 #samplePath

            \override #'(line-join-style . miter) \path #0.25 #samplePath

            \override #'(filled . #t) \path #0.25 #samplePath
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘filled’ (#f)
        • ‘line-join-style’ (round)
        • ‘line-cap-style’ (round)

‘\postscript’ STR (string)

     This inserts STR directly into the output as a PostScript command
     string.

          ringsps = #"
            0.15 setlinewidth
            0.9 0.6 moveto
            0.4 0.6 0.5 0 361 arc
            stroke
            1.0 0.6 0.5 0 361 arc
            stroke
            "

          rings = \markup {
            \with-dimensions #'(-0.2 . 1.6) #'(0 . 1.2)
            \postscript #ringsps
          }

          \relative c'' {
            c2^\rings
            a2_\rings
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\rounded-box’ ARG (markup)

     Draw a box with rounded corners around ARG.  Looks at ‘thickness’,
     ‘box-padding’ and ‘font-size’ properties to determine line
     thickness and padding around the markup; the ‘corner-radius’
     property makes it possible to define another shape for the corners
     (default is 1).

          c4^\markup {
            \rounded-box {
              Overtura
            }
          }
          c,8. c16 c4 r
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘box-padding’ (0.5)
        • ‘font-size’ (0)
        • ‘corner-radius’ (1)
        • ‘thickness’ (1)

‘\scale’ FACTOR-PAIR (pair of numbers) ARG (markup)

     Scale ARG.  FACTOR-PAIR is a pair of numbers representing the
     scaling-factor in the X and Y axes.  Negative values may be used to
     produce mirror images.

          \markup {
            \line {
              \scale #'(2 . 1)
              stretched
              \scale #'(1 . -1)
              mirrored
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\triangle’ FILLED (boolean)

     A triangle, either filled or empty.

          \markup {
            \triangle ##t
            \hspace #2
            \triangle ##f
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’ (2)
        • ‘font-size’ (0)
        • ‘thickness’ (0.1)

‘\with-url’ URL (string) ARG (markup)

     Add a link to URL URL around ARG.  This only works in the PDF
     backend.

          \markup {
            \with-url #"http://lilypond.org/" {
              LilyPond ... \italic {
                music notation for everyone
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Music,  Next: Instrument Specific Markup,  Prev: Graphic,  Up: Text markup commands

A.11.4 Music
------------

‘\compound-meter’ TIME-SIG (number or pair)

     Draw a numeric time signature.

          \markup {
            \column {
              \line { Single number: \compound-meter #3 }
              \line { Conventional: \compound-meter #'(4 . 4)
                                 or \compound-meter #'(4 4) }
              \line { Compound: \compound-meter #'(2 3 8) }
              \line { Single-number compound: \compound-meter #'((2) (3)) }
              \line { Complex compound: \compound-meter #'((2 3 8) (3 4)) }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\customTabClef’ NUM-STRINGS (integer) STAFF-SPACE (number)

     Draw a tab clef sans-serif style.

‘\doubleflat’

     Draw a double flat symbol.

          \markup {
            \doubleflat
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\doublesharp’

     Draw a double sharp symbol.

          \markup {
            \doublesharp
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\fermata’

     Create a fermata glyph.  When DIRECTION is ‘DOWN’, use an inverted
     glyph.  Note that within music, one would usually use the
     ‘\fermata’ articulation instead of a markup.

           { c''1^\markup \fermata d''1_\markup \fermata }

          \markup { \fermata \override #`(direction . ,DOWN) \fermata }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘direction’ (1)

‘\flat’

     Draw a flat symbol.

          \markup {
            \flat
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\musicglyph’ GLYPH-NAME (string)

     GLYPH-NAME is converted to a musical symbol; for example,
     ‘\musicglyph #"accidentals.natural"’ selects the natural sign from
     the music font.  See *note (lilypond-notation)The Feta font:: for a
     complete listing of the possible glyphs.

          \markup {
            \musicglyph #"f"
            \musicglyph #"rests.2"
            \musicglyph #"clefs.G_change"
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\natural’

     Draw a natural symbol.

          \markup {
            \natural
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\note-by-number’ LOG (number) DOT-COUNT (number) DIR (number)

     Construct a note symbol, with stem and flag.  By using fractional
     values for DIR, longer or shorter stems can be obtained.  Supports
     all note-head-styles.  Ancient note-head-styles will get
     mensural-style-flags.  ‘flag-style’ may be overridden
     independently.  Supported flag-styles are ‘default’,
     ‘old-straight-flag’, ‘modern-straight-flag’, ‘flat-flag’,
     ‘mensural’ and ‘neomensural’.  The latter two flag-styles will both
     result in mensural-flags.  Both are supplied for convenience.

          \markup {
            \note-by-number #3 #0 #DOWN
            \hspace #2
            \note-by-number #1 #2 #0.8
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘style’ (’())
        • ‘flag-style’ (’())
        • ‘font-size’ (0)

‘\note’ DURATION (string) DIR (number)

     This produces a note with a stem pointing in DIR direction, with
     the DURATION for the note head type and augmentation dots.  For
     example, ‘\note #"4." #-0.75’ creates a dotted quarter note, with a
     shortened down stem.

          \markup {
            \override #'(style . cross) {
              \note #"4.." #UP
            }
            \hspace #2
            \note #"breve" #0
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘style’ (’())
        • ‘flag-style’ (’())
        • ‘font-size’ (0)

‘\rest-by-number’ LOG (number) DOT-COUNT (number)

     A rest or multi-measure-rest symbol.

          \markup {
            \rest-by-number #3 #2
            \hspace #2
            \rest-by-number #0 #1
            \hspace #2
            \override #'(multi-measure-rest . #t)
            \rest-by-number #0 #0
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘multi-measure-rest’ (#f)
        • ‘style’ (’())
        • ‘font-size’ (0)

‘\rest’ DURATION (string)

     This produces a rest, with the DURATION for the rest type and
     augmentation dots.  ‘"breve"’, ‘"longa"’ and ‘"maxima"’ are valid
     input-strings.

     Printing MultiMeasureRests could be enabled with ‘\override
     #'(multi-measure-rest . #t)’ If MultiMeasureRests are taken, the
     MultiMeasureRestNumber is printed above.  This is enabled for all
     styles using default-glyphs.  Could be disabled with ‘\override
     #'(multi-measure-rest-number . #f)’

          \markup {
            \rest #"4.."
            \hspace #2
            \rest #"breve"
            \hspace #2
            \override #'(multi-measure-rest . #t)
            {
            \rest #"7"
            \hspace #2
            \override #'(multi-measure-rest-number . #f)
            \rest #"7"
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘word-space’ (0.6)
        • ‘multi-measure-rest-number’ (#t)
        • ‘multi-measure-rest’ (#f)
        • ‘style’ (’())

‘\score’ SCORE (score)

     Inline an image of music.  The reference point (usually the middle
     staff line) of the lowest staff in the top system is placed on the
     baseline.

          \markup {
            \score {
              \new PianoStaff <<
                \new Staff \relative c' {
                  \key f \major
                  \time 3/4
                  \mark \markup { Allegro }
                  f2\p( a4)
                  c2( a4)
                  bes2( g'4)
                  f8( e) e4 r
                }
                \new Staff \relative c {
                  \clef bass
                  \key f \major
                  \time 3/4
                  f8( a c a c a
                  f c' es c es c)
                  f,( bes d bes d bes)
                  f( g bes g bes g)
                }
              >>
              \layout {
                indent = 0.0\cm
                \context {
                  \Score
                  \override RehearsalMark
                    #'break-align-symbols = #'(time-signature key-signature)
                  \override RehearsalMark
                    #'self-alignment-X = #LEFT
                }
                \context {
                  \Staff
                  \override TimeSignature
                    #'break-align-anchor-alignment = #LEFT
                }
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’

‘\semiflat’

     Draw a semiflat symbol.

          \markup {
            \semiflat
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\semisharp’

     Draw a semisharp symbol.

          \markup {
            \semisharp
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\sesquiflat’

     Draw a 3/2 flat symbol.

          \markup {
            \sesquiflat
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\sesquisharp’

     Draw a 3/2 sharp symbol.

          \markup {
            \sesquisharp
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\sharp’

     Draw a sharp symbol.

          \markup {
            \sharp
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\tied-lyric’ STR (string)

     Like simple-markup, but use tie characters for ‘~’ tilde symbols.

          \markup \column {
            \tied-lyric #"Siam navi~all'onde~algenti Lasciate~in abbandono"
            \tied-lyric #"Impetuosi venti I nostri~affetti sono"
            \tied-lyric #"Ogni diletto~e scoglio Tutta la vita~e~un mar."
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘word-space’

