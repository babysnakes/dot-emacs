This is lilypond-notation.info, produced by makeinfo version 6.0 from
notation.texi.

Copyright © 1998–2015 by the authors.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections.  A copy of the license is
     included in the section entitled “GNU Free Documentation License”.


File: lilypond-notation.info,  Node: Instrument Specific Markup,  Next: Accordion Registers,  Prev: Music,  Up: Text markup commands

A.11.5 Instrument Specific Markup
---------------------------------

‘\fret-diagram’ DEFINITION-STRING (string)

     Make a (guitar) fret diagram.  For example, say

          \markup \fret-diagram #"s:0.75;6-x;5-x;4-o;3-2;2-3;1-2;"

     for fret spacing 3/4 of staff space, D chord diagram

     Syntax rules for DEFINITION-STRING:

        − Diagram items are separated by semicolons.

        − Possible items:

             • ‘s:’NUMBER – Set the fret spacing of the diagram (in
               staff spaces).  Default: 1.

             • ‘t:’NUMBER – Set the line thickness (relative to normal
               line thickness).  Default: 0.5.

             • ‘h:’NUMBER – Set the height of the diagram in frets.
               Default: 4.

             • ‘w:’NUMBER – Set the width of the diagram in strings.
               Default: 6.

             • ‘f:’NUMBER – Set fingering label type (0 = none, 1 = in
               circle on string, 2 = below string).  Default: 0.

             • ‘d:’NUMBER – Set radius of dot, in terms of fret spacing.
               Default: 0.25.

             • ‘p:’NUMBER – Set the position of the dot in the fret
               space.  0.5 is centered; 1 is on lower fret bar, 0 is on
               upper fret bar.  Default: 0.6.

             • ‘c:’STRING1‘-’STRING2‘-’FRET – Include a barre mark from
               STRING1 to STRING2 on FRET.

             • STRING‘-’FRET – Place a dot on STRING at FRET.  If FRET
               is ‘o’, STRING is identified as open.  If FRET is ‘x’,
               STRING is identified as muted.

             • STRING‘-’FRET‘-’FINGERING – Place a dot on STRING at
               FRET, and label with FINGERING as defined by the ‘f:’
               code.

        − Note: There is no limit to the number of fret indications per
          string.

     Used properties:
        • ‘thickness’ (0.5)
        • ‘fret-diagram-details’
        • ‘size’ (1.0)
        • ‘align-dir’ (-0.4)

‘\fret-diagram-terse’ DEFINITION-STRING (string)

     Make a fret diagram markup using terse string-based syntax.

     Here is an example

          \markup \fret-diagram-terse #"x;x;o;2;3;2;"

     for a D chord diagram.

     Syntax rules for DEFINITION-STRING:

        • Strings are terminated by semicolons; the number of semicolons
          is the number of strings in the diagram.

        • Mute strings are indicated by ‘x’.

        • Open strings are indicated by ‘o’.

        • A number indicates a fret indication at that fret.

        • If there are multiple fret indicators desired on a string,
          they should be separated by spaces.

        • Fingerings are given by following the fret number with a ‘-’,
          followed by the finger indicator, e.g.  ‘3-2’ for playing the
          third fret with the second finger.

        • Where a barre indicator is desired, follow the fret (or
          fingering) symbol with ‘-(’ to start a barre and ‘-)’ to end
          the barre.

     Used properties:
        • ‘thickness’ (0.5)
        • ‘fret-diagram-details’
        • ‘size’ (1.0)
        • ‘align-dir’ (-0.4)

‘\fret-diagram-verbose’ MARKING-LIST (pair)

     Make a fret diagram containing the symbols indicated in
     MARKING-LIST.

     For example,

          \markup \fret-diagram-verbose
            #'((mute 6) (mute 5) (open 4)
               (place-fret 3 2) (place-fret 2 3) (place-fret 1 2))

     produces a standard D chord diagram without fingering indications.

     Possible elements in MARKING-LIST:

     ‘(mute STRING-NUMBER)’
          Place a small ‘x’ at the top of string STRING-NUMBER.

     ‘(open STRING-NUMBER)’
          Place a small ‘o’ at the top of string STRING-NUMBER.

     ‘(barre START-STRING END-STRING FRET-NUMBER)’
          Place a barre indicator (much like a tie) from string
          START-STRING to string END-STRING at fret FRET-NUMBER.

     ‘(capo FRET-NUMBER)’
          Place a capo indicator (a large solid bar) across the entire
          fretboard at fret location FRET-NUMBER.  Also, set fret
          FRET-NUMBER to be the lowest fret on the fret diagram.
          (place-fret STRING-NUMBER FRET-NUMBER [FINGER-VALUE]
          [COLOR-MODIFIER] [COLOR] [‘'parenthesized’
          [‘'default-paren-color’]]) Place a fret playing indication on
          string STRING-NUMBER at fret FRET-NUMBER with an optional
          fingering label FINGER-VALUE, an optional color modifier
          COLOR-MODIFIER, an optional color COLOR, an optional
          parenthesis ‘'parenthesized’ and an optional paranthesis color
          ‘'default-paren-color’.  By default, the fret playing
          indicator is a solid dot.  This can be globally changed by
          setting the value of the variable DOT-COLOR or for a single
          dot by setting the value of COLOR.  The dot can be
          parenthesized by adding ‘'parenthesized’.  By default the
          color for the parenthesis is taken from the dot.  Adding
          ‘'default-paren-color’ will take the parenthesis-color from
          the global DOT-COLOR, as a fall-back black will be used.
          Setting COLOR-MODIFIER to ‘inverted’ inverts the dot color for
          a specific fingering.  The values for STRING-NUMBER,
          FRET-NUMBER, and the optional FINGER should be entered first
          in that order.  The order of the other optional arguments does
          not matter.  If the FINGER part of the ‘place-fret’ element is
          present, FINGER-VALUE will be displayed according to the
          setting of the variable FINGER-CODE.  There is no limit to the
          number of fret indications per string.

     Used properties:
        • ‘thickness’ (0.5)
        • ‘fret-diagram-details’
        • ‘size’ (1.0)
        • ‘align-dir’ (-0.4)

‘\harp-pedal’ DEFINITION-STRING (string)

     Make a harp pedal diagram.

     Possible elements in DEFINITION-STRING:

     ‘^’
          pedal is up
     ‘-’
          pedal is neutral
     ‘v’
          pedal is down
     ‘|’
          vertical divider line
     ‘o’
          the following pedal should be circled (indicating a change)

     The function also checks if the string has the typical form of
     three pedals, then the divider and then the remaining four pedals.
     If not it prints out a warning.  However, in any case, it will also
     print each symbol in the order as given.  This means you can place
     the divider (even multiple dividers) anywhere you want, but you’ll
     have to live with the warnings.

     The appearance of the diagram can be tweaked inter alia using the
     size property of the TextScript grob (‘\override Voice.TextScript
     #'size = #0.3’) for the overall, the thickness property (‘\override
     Voice.TextScript #'thickness = #3’) for the line thickness of the
     horizontal line and the divider.  The remaining configuration (box
     sizes, offsets and spaces) is done by the harp-pedal-details list
     of properties (‘\override Voice.TextScript #'harp-pedal-details
     #'box-width = #1’).  It contains the following settings:
     ‘box-offset’ (vertical shift of the box center for up/down pedals),
     ‘box-width’, ‘box-height’, ‘space-before-divider’ (the spacing
     between two boxes before the divider) and ‘space-after-divider’
     (box spacing after the divider).

          \markup \harp-pedal #"^-v|--ov^"
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘thickness’ (0.5)
        • ‘harp-pedal-details’ (’())
        • ‘size’ (1.2)

‘\woodwind-diagram’ INSTRUMENT (symbol) USER-DRAW-COMMANDS (list)

     Make a woodwind-instrument diagram.  For example, say

          \markup \woodwind-diagram
            #'oboe #'((lh . (d ees)) (cc . (five3qT1q)) (rh . (gis)))

     for an oboe with the left-hand d key, left-hand ees key, and
     right-hand gis key depressed while the five-hole of the central
     column effectuates a trill between 1/4 and 3/4 closed.

     The following instruments are supported:

        − piccolo

        − flute

        − oboe

        − clarinet

        − bass-clarinet

        − saxophone

        − bassoon

        − contrabassoon

     To see all of the callable keys for a given instrument, include the
     function ‘(print-keys 'instrument)’ in your .ly file, where
     instrument is the instrument whose keys you want to print.

     Certain keys allow for special configurations.  The entire gamut of
     configurations possible is as follows:

        − 1q (1/4 covered)

        − 1h (1/2 covered)

        − 3q (3/4 covered)

        − R (ring depressed)

        − F (fully covered; the default if no state put)

     Additionally, these configurations can be used in trills.  So, for
     example, ‘three3qTR’ effectuates a trill between 3/4 full and ring
     depressed on the three hole.  As another example, ‘threeRT’
     effectuates a trill between R and open, whereas ‘threeTR’
     effectuates a trill between open and shut.  To see all of the
     possibilities for all of the keys of a given instrument, invoke
     ‘(print-keys-verbose 'instrument)’.

     Lastly, substituting an empty list for the pressed-key alist will
     result in a diagram with all of the keys drawn but none filled, for
     example:

          \markup \woodwind-diagram #'oboe #'()

     Used properties:
        • ‘graphical’ (#t)
        • ‘thickness’ (0.1)
        • ‘size’ (1)


File: lilypond-notation.info,  Node: Accordion Registers,  Next: Other,  Prev: Instrument Specific Markup,  Up: Text markup commands

A.11.6 Accordion Registers
--------------------------

‘\discant’ NAME (string)

     ‘\discant NAME’ generates a discant accordion register symbol.

     To make it available,
          #(use-modules (scm accreg))
     is required near the top of your input file.

     The register names in the default ‘\discant’ register set have
     modeled after numeric Swiss notation like depicted in
     <http://de.wikipedia.org/wiki/Register_%28Akkordeon%29>, omitting
     the slashes and dropping leading zeros.

     The string NAME is basically a three-digit number with the lowest
     digit specifying the number of 16’ reeds, the tens the number of 8’
     reeds, and the hundreds specifying the number of 4’ reeds.  Without
     modification, the specified number of reeds in 8’ is centered in
     the symbol.  Newer instruments may have registrations where 8’ can
     be used either within or without a tone chamber, ‘cassotto’.
     Notationally, the central dot then indicates use of cassotto.  One
     can suffix the tens’ digits ‘1’ and ‘2’ with ‘+’ or ‘-’ to indicate
     clustering the dots at the right or left respectively rather than
     centered.

     Some examples are

 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\freeBass’ NAME (string)

     ‘\freeBass NAME’ generates a free bass/converter accordion register
     symbol for the usual two-reed layout.

     To make it available,
          #(use-modules (scm accreg))
     is required near the top of your input file.

     Available registrations are

 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\stdBass’ NAME (string)

     ‘\stdBass NAME’ generates a standard bass accordion register
     symbol.

     To make it available,
          #(use-modules (scm accreg))
     is required near the top of your input file.

     The default bass register definitions have been modeled after the
     article <http://www.accordions.com/index/art/stradella.shtml>
     originally appearing in Accord Magazine.

     The underlying register model is

 [image src="" alt="[image of music]" text="image of music" ]

     This kind of overlapping arrangement is common for Italian
     instruments though the exact location of the octave breaks differ.

     When not composing for a particular target instrument, using the
     five reed definitions makes more sense than using a four reed
     layout: in that manner, the ‘Master’ register is unambiguous.  This
     is rather the rule in literature bothering about bass registrations
     at all.

     Available registrations are

 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\stdBassIV’ NAME (string)

     ‘\stdBassIV NAME’ generates a standard bass accordion register
     symbol.

     To make it available,
          #(use-modules (scm accreg))
     is required near the top of your input file.

     The main use is for four-reed standard bass instruments with
     reedbank layout

 [image src="" alt="[image of music]" text="image of music" ]

     Notable instruments are Morino models with MIII (the others are
     five-reed instead) and the Atlantic IV. Most of those models have
     three register switches.  Some newer Morinos with MIII might have
     five or even seven.

     The prevalent three-register layout uses the middle three switches
     ‘Tenor’, ‘Master’, ‘Soft Bass’.  Note that the sound is quite
     darker than the same registrations of ‘c,’-based instruments.

     Available registrations are

 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\stdBassV’ NAME (string)

     ‘\stdBassV NAME’ generates a standard bass accordion register
     symbol.

     To make it available,
          #(use-modules (scm accreg))
     is required near the top of your input file.

     The main use is for five-reed standard bass instruments with
     reedbank layout

 [image src="" alt="[image of music]" text="image of music" ]

     This tends to be the bass layout for Hohner’s Morino series without
     convertor or MIII manual.

     With the exception of the rather new 7-register layout, the highest
     two chord reeds are usually sounded together.  The Older
     instruments offer 5 or 3 bass registers.  The Tango VM offers an
     additional ‘Solo Bass’ setting that mutes the chord reeds.  The
     symbol on the register buttons of the Tango VM would actually match
     the physical five-octave layout reflected here, but it is not used
     in literature.

     Composers should likely prefer the five-reed versions of these
     symbols.  The mismatch of a four-reed instrument with five-reed
     symbols is easier to resolve for the player than the other way
     round.

     Available registrations are

 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\stdBassVI’ NAME (string)

     ‘\stdBassVI NAME’ generates a standard bass accordion register
     symbol for six reed basses.

     To make it available,
          #(use-modules (scm accreg))
     is required near the top of your input file.

     This is primarily the register layout for the Hohner “Gola” model.
     The layout is

 [image src="" alt="[image of music]" text="image of music" ]

     The registers are effectively quite similar to that of ‘\stdBass’.
     An additional bass reed at alto pitch is omitted for esthetical
     reasons from the ‘Master’ setting, so the symbols are almost the
     same except for the ‘Alto/Soprano’ register with bass notes at Alto
     pitch and chords at Soprano pitch.

     Available registrations are

 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)


File: lilypond-notation.info,  Node: Other,  Prev: Accordion Registers,  Up: Text markup commands

A.11.7 Other
------------

‘\auto-footnote’ MKUP (markup) NOTE (markup)

     Have footnote NOTE act as an annotation to the markup MKUP.

          \markup {
            \auto-footnote a b
            \override #'(padding . 0.2)
            \auto-footnote c d
          }
 [image src="" alt="[image of music]" text="image of music" ]

     The footnote will be annotated automatically.

     Used properties:
        • ‘padding’ (0.0)
        • ‘raise’ (0.5)

‘\backslashed-digit’ NUM (integer)

     A feta number, with backslash.  This is for use in the context of
     figured bass notation.
          \markup {
            \backslashed-digit #5
            \hspace #2
            \override #'(thickness . 3)
            \backslashed-digit #7
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘thickness’ (1.6)
        • ‘font-size’ (0)

‘\char’ NUM (integer)

     Produce a single character.  Characters encoded in hexadecimal
     format require the prefix ‘#x’.

          \markup {
            \char #65 \char ##x00a9
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\eyeglasses’

     Prints out eyeglasses, indicating strongly to look at the
     conductor.
          \markup { \eyeglasses }
 [image src="" alt="[image of music]" text="image of music" ]

‘\first-visible’ ARGS (markup list)

     Use the first markup in ARGS that yields a non-empty stencil and
     ignore the rest.

          \markup {
            \first-visible {
              \fromproperty #'header:composer
              \italic Unknown
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\footnote’ MKUP (markup) NOTE (markup)

     Have footnote NOTE act as an annotation to the markup MKUP.

          \markup {
            \auto-footnote a b
            \override #'(padding . 0.2)
            \auto-footnote c d
          }
 [image src="" alt="[image of music]" text="image of music" ]

     The footnote will not be annotated automatically.

‘\fraction’ ARG1 (markup) ARG2 (markup)

     Make a fraction of two markups.
          \markup {
            π ≈
            \fraction 355 113
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘font-size’ (0)

‘\fromproperty’ SYMBOL (symbol)

     Read the SYMBOL from property settings, and produce a stencil from
     the markup contained within.  If SYMBOL is not defined, it returns
     an empty markup.

          \header {
            myTitle = "myTitle"
            title = \markup {
              from
              \italic
              \fromproperty #'header:myTitle
            }
          }
          \markup {
            \null
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\left-brace’ SIZE (number)

     A feta brace in point size SIZE.

          \markup {
            \left-brace #35
            \hspace #2
            \left-brace #45
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\lookup’ GLYPH-NAME (string)

     Lookup a glyph by name.

          \markup {
            \override #'(font-encoding . fetaBraces) {
              \lookup #"brace200"
              \hspace #2
              \rotate #180
              \lookup #"brace180"
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\markalphabet’ NUM (integer)

     Make a markup letter for NUM.  The letters start with A to Z and
     continue with double letters.

          \markup {
            \markalphabet #8
            \hspace #2
            \markalphabet #26
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\markletter’ NUM (integer)

     Make a markup letter for NUM.  The letters start with A to Z
     (skipping letter I), and continue with double letters.

          \markup {
            \markletter #8
            \hspace #2
            \markletter #26
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\null’

     An empty markup with extents of a single point.

          \markup {
            \null
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\on-the-fly’ PROCEDURE (procedure) ARG (markup)

     Apply the PROCEDURE markup command to ARG.  PROCEDURE takes the
     same arguments as ‘interpret-markup’ and returns a stencil.

‘\override’ NEW-PROP (pair) ARG (markup)

     Add the argument NEW-PROP to the property list.  Properties may be
     any property supported by *note
     (lilypond-internals)font-interface::, *note
     (lilypond-internals)text-interface:: and *note
     (lilypond-internals)instrument-specific-markup-interface::.

          \markup {
            \line {
              \column {
                default
                baseline-skip
              }
              \hspace #2
              \override #'(baseline-skip . 4) {
                \column {
                  increased
                  baseline-skip
                }
              }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\page-link’ PAGE-NUMBER (number) ARG (markup)

     Add a link to the page PAGE-NUMBER around ARG.  This only works in
     the PDF backend.

          \markup {
            \page-link #2  { \italic { This links to page 2... } }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\page-ref’ LABEL (symbol) GAUGE (markup) DEFAULT (markup)

     Reference to a page number.  LABEL is the label set on the
     referenced page (using the ‘\label’ command), GAUGE a markup used
     to estimate the maximum width of the page number, and DEFAULT the
     value to display when LABEL is not found.

     (If the current book or bookpart is set to use roman numerals for
     page numbers, the reference will be formatted accordingly – in
     which case the GAUGE’s width may require additional tweaking.)

‘\pattern’ COUNT (integer) AXIS (integer) SPACE (number) PATTERN (markup)

     Prints COUNT times a PATTERN markup.  Patterns are spaced apart by
     SPACE.  Patterns are distributed on AXIS.

          \markup \column {
            "Horizontally repeated :"
            \pattern #7 #X #2 \flat
            \null
            "Vertically repeated :"
            \pattern #3 #Y #0.5 \flat
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\property-recursive’ SYMBOL (symbol)

     Print out a warning when a header field markup contains some
     recursive markup definition.

‘\right-brace’ SIZE (number)

     A feta brace in point size SIZE, rotated 180 degrees.

          \markup {
            \right-brace #45
            \hspace #2
            \right-brace #35
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\slashed-digit’ NUM (integer)

     A feta number, with slash.  This is for use in the context of
     figured bass notation.
          \markup {
            \slashed-digit #5
            \hspace #2
            \override #'(thickness . 3)
            \slashed-digit #7
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘thickness’ (1.6)
        • ‘font-size’ (0)

‘\stencil’ STIL (stencil)

     Use a stencil as markup.

          \markup {
            \stencil #(make-circle-stencil 2 0 #t)
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\strut’

     Create a box of the same height as the space in the current font.

‘\transparent’ ARG (markup)

     Make ARG transparent.

          \markup {
            \transparent {
              invisible text
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\verbatim-file’ NAME (string)

     Read the contents of file NAME, and include it verbatim.

          \markup {
            \verbatim-file #"simple.ly"
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\whiteout’ ARG (markup)

     Provide a white background for ARG.  The shape of the white
     background is determined by ‘style’.  The default is ‘box’ which
     produces a rectangle.  ‘rounded-box’ produces a rounded rectangle.
     ‘outline’ approximates the outline of the markup.

          \markup {
            \combine
              \filled-box #'(-1 . 15) #'(-3 . 4) #1
              \override #'(thickness . 1.5)
              \whiteout whiteout-box
          }
          \markup {
            \combine
              \filled-box #'(-1 . 24) #'(-3 . 4) #1
              \override #'(style . rounded-box)
              \override #'(thickness . 3)
              \whiteout whiteout-rounded-box
          }
          \markup {
            \combine
              \filled-box #'(-1 . 18) #'(-3 . 4) #1
              \override #'(style . outline)
              \override #'(thickness . 3)
              \whiteout whiteout-outline
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘thickness’ (’())
        • ‘style’ (box)

‘\with-color’ COLOR (color) ARG (markup)

     Draw ARG in color specified by COLOR.

          \markup {
            \with-color #red
            red
            \hspace #2
            \with-color #green
            green
            \hspace #2
            \with-color #blue
            blue
          }
 [image src="" alt="[image of music]" text="image of music" ]

‘\with-dimensions-from’ ARG1 (markup) ARG2 (markup)

     Print ARG2 with the dimensions of ARG1.

‘\with-dimensions’ X (pair of numbers) Y (pair of numbers) ARG (markup)

     Set the dimensions of ARG to X and Y.

‘\with-link’ LABEL (symbol) ARG (markup)

     Add a link to the page holding label LABEL around ARG.  This only
     works in the PDF backend.

          \markup {
            \with-link #'label {
              \italic { This links to the page containing the label... }
            }
          }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Text markup list commands,  Next: List of special characters,  Prev: Text markup commands,  Up: Notation manual tables

A.12 Text markup list commands
==============================

The following commands can all be used with ‘\markuplist’:

‘\column-lines’ ARGS (markup list)

     Like ‘\column’, but return a list of lines instead of a single
     markup.  ‘baseline-skip’ determines the space between each markup
     in ARGS.

     Used properties:
        • ‘baseline-skip’

‘\justified-lines’ ARGS (markup list)

     Like ‘\justify’, but return a list of lines instead of a single
     markup.  Use ‘\override-lines #'(line-width . X)’ to set the line
     width; X is the number of staff spaces.

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’ (#f)
        • ‘baseline-skip’

‘\map-markup-commands’ COMPOSE (procedure) ARGS (markup list)

     This applies the function COMPOSE to every markup in ARGS
     (including elements of markup list command calls) in order to
     produce a new markup list.  Since the return value from a markup
     list command call is not a markup list but rather a list of
     stencils, this requires passing those stencils off as the results
     of individual markup calls.  That way, the results should work out
     as long as no markups rely on side effects.

‘\override-lines’ NEW-PROP (pair) ARGS (markup list)

     Like ‘\override’, for markup lists.

‘\score-lines’ SCORE (score)

     This is the same as the ‘\score’ markup but delivers its systems as
     a list of lines.  Its SCORE argument is entered in braces like it
     would be for ‘\score’.

‘\table’ COLUMN-ALIGN (number list) LST (markup list)

     Returns a table.

     COLUMN-ALIGN specifies how each column is aligned, possible values
     are -1, 0, 1.  The number of elements in COLUMN-ALIGN determines
     how many columns will be printed.  The entries to print are given
     by LST, a markup-list.  If needed, the last row is filled up with
     ‘point-stencil’s.  Overriding ‘padding’ may be used to increase
     columns horizontal distance.  Overriding ‘baseline-skip’ to
     increase rows vertical distance.
          \markuplist {
            \override #'(padding . 2)
            \table
              #'(0 1 0 -1)
              {
                \underline { center-aligned right-aligned center-aligned left-aligned }
                one
          umber 1 thousandth
          umber 0.001
                eleven
          umber 11 hundredth
          umber 0.01
                twenty
          umber 20 tenth
          umber 0.1
                thousand
          umber 1000 one
          umber 1.0
              }
          }
 [image src="" alt="[image of music]" text="image of music" ]

     Used properties:
        • ‘baseline-skip’
        • ‘padding’ (0)

‘\table-of-contents’

‘\wordwrap-internal’ JUSTIFY (boolean) ARGS (markup list)

     Internal markup list command used to define ‘\justify’ and
     ‘\wordwrap’.

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’ (#f)

‘\wordwrap-lines’ ARGS (markup list)

     Like ‘\wordwrap’, but return a list of lines instead of a single
     markup.  Use ‘\override-lines #'(line-width . X)’ to set the line
     width, where X is the number of staff spaces.

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’ (#f)
        • ‘baseline-skip’

‘\wordwrap-string-internal’ JUSTIFY (boolean) ARG (string)

     Internal markup list command used to define ‘\justify-string’ and
     ‘\wordwrap-string’.

     Used properties:
        • ‘text-direction’ (1)
        • ‘word-space’
        • ‘line-width’


File: lilypond-notation.info,  Node: List of special characters,  Next: List of articulations,  Prev: Text markup list commands,  Up: Notation manual tables

A.13 List of special characters
===============================

The following special characters references can be used; for more
details, see *note ASCII aliases::.

   The HTML syntax is used and most of these references are the same as
HTML. The rest of them are inspired by LaTeX.

   The characters are boxed so that you can see their size.  A small
padding has been added between the character and the box for more
readability.

 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: List of articulations,  Next: Percussion notes,  Prev: List of special characters,  Up: Notation manual tables

A.14 List of articulations
==========================

The following lists show all the scripts in the Feta font that may be
attached to notes (eg.  ‘f\accent’ or ‘f->’).  Each example shows the
script in the _up_, _down_ and _neutral_ positions respectively.

* Menu:

* Articulation scripts::
* Ornament scripts::
* Fermata scripts::
* Instrument-specific scripts::
* Repeat sign scripts::
* Ancient scripts::


File: lilypond-notation.info,  Node: Articulation scripts,  Next: Ornament scripts,  Up: List of articulations

Articulation scripts
--------------------

‘\accent’ or     ‘\espressivo’  [image src="" alt="[image of music]" text="image of music" ]‘\marcato’ or‘\portato’ or
‘->’  [image src="" alt="[image of music]" text="image of music" ]‘-^’  [image src="" alt="[image of music]" text="image of music" ]‘-_’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘\staccatissimo’ ‘\staccato’ or     ‘\tenuto’ or
                 ‘-.’  [image src="" alt="[image of music]" text="image of music" ]‘--’  [image src="" alt="[image of music]" text="image of music" ]
or ‘-!’  [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Ornament scripts,  Next: Fermata scripts,  Prev: Articulation scripts,  Up: List of articulations

Ornament scripts
----------------

‘\prall’  [image src="" alt="[image of music]" text="image of music" ]‘\prallup’  [image src="" alt="[image of music]" text="image of music" ]‘\pralldown’  [image src="" alt="[image of music]" text="image of music" ]‘\upprall’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘\downprall’  [image src="" alt="[image of music]" text="image of music" ]‘\prallprall’  [image src="" alt="[image of music]" text="image of music" ]‘\lineprall’  [image src="" alt="[image of music]" text="image of music" ]‘\prallmordent’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘\mordent’  [image src="" alt="[image of music]" text="image of music" ]‘\upmordent’  [image src="" alt="[image of music]" text="image of music" ]‘\downmordent’  [image src="" alt="[image of music]" text="image of music" ]‘\trill’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘\turn’  [image src="" alt="[image of music]" text="image of music" ]‘\reverseturn’  [image src="" alt="[image of music]" text="image of music" ]
                 


File: lilypond-notation.info,  Node: Fermata scripts,  Next: Instrument-specific scripts,  Prev: Ornament scripts,  Up: List of articulations

Fermata scripts
---------------

‘\shortfermata’  ‘\fermata’  [image src="" alt="[image of music]" text="image of music" ]‘\longfermata’  [image src="" alt="[image of music]" text="image of music" ]‘\verylongfermata’
 [image src="" alt="[image of music]" text="image of music" ] [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Instrument-specific scripts,  Next: Repeat sign scripts,  Prev: Fermata scripts,  Up: List of articulations

Instrument-specific scripts
---------------------------

‘\upbow’  [image src="" alt="[image of music]" text="image of music" ]‘\downbow’  [image src="" alt="[image of music]" text="image of music" ]‘\flageolet’  [image src="" alt="[image of music]" text="image of music" ]‘\open’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘\halfopen’  [image src="" alt="[image of music]" text="image of music" ]‘\lheel’  [image src="" alt="[image of music]" text="image of music" ]‘\rheel’  [image src="" alt="[image of music]" text="image of music" ]‘\ltoe’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘\rtoe’  [image src="" alt="[image of music]" text="image of music" ]‘\snappizzicato’‘\stopped’ or
                  [image src="" alt="[image of music]" text="image of music" ]‘-+’  [image src="" alt="[image of music]" text="image of music" ]
                                    


File: lilypond-notation.info,  Node: Repeat sign scripts,  Next: Ancient scripts,  Prev: Instrument-specific scripts,  Up: List of articulations

Repeat sign scripts
-------------------

‘\segno’  [image src="" alt="[image of music]" text="image of music" ]‘\coda’  [image src="" alt="[image of music]" text="image of music" ]‘\varcoda’  [image src="" alt="[image of music]" text="image of music" ]
                                    


File: lilypond-notation.info,  Node: Ancient scripts,  Prev: Repeat sign scripts,  Up: List of articulations

Ancient scripts
---------------

‘\accentus’  [image src="" alt="[image of music]" text="image of music" ]‘\circulus’  [image src="" alt="[image of music]" text="image of music" ]‘\ictus’  [image src="" alt="[image of music]" text="image of music" ]
                                    
‘\semicirculus’  ‘\signumcongruentiae’
 [image src="" alt="[image of music]" text="image of music" ] [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Percussion notes,  Next: Technical glossary,  Prev: List of articulations,  Up: Notation manual tables

A.15 Percussion notes
=====================

‘bassdrum        ‘acousticbassdrum  ‘snare             ‘acousticsnare
bd                                  sn                 sna
’  [image src="" alt="[image of music]" text="image of music" ]bda’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                 ’  [image src="" alt="[image of music]" text="image of music" ]
                 
‘electricsnare   ‘lowfloortom       ‘highfloortom      ‘lowtom
                 tomfl              tomfh              toml
sne              ’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
’  [image src="" alt="[image of music]" text="image of music" ]

‘hightom         ‘lowmidtom         ‘highmidtom        ‘highhat
tomh             tomml              tommh              hh
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘closedhihat     ‘openhighhat       ‘halfopenhihat     ‘pedalhihat
hhc              hho                hhho               hhp
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘crashcymbal     ‘crashcymbala      ‘crashcymbalb      ‘ridecymbal
cymc             cymca              cymcb              cymr
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘ridecymbala     ‘ridecymbalb       ‘chinesecymbal     ‘splashcymbal
cymra            cymrb              cymch              cyms
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘ridebell        ‘cowbell           ‘hibongo           ‘openhibongo
rb               cb                 boh                boho
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘mutehibongo     ‘lobongo           ‘openlobongo       ‘mutelobongo
bohm             bol                bolo               bolm
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘hiconga         ‘openhiconga       ‘mutehiconga       ‘loconga
cgh              cgho               cghm               cgl
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘openloconga     ‘muteloconga       ‘hitimbale         ‘lotimbale
cglo             cglm               timh               timl
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘hiagogo         ‘loagogo           ‘sidestick         ‘hisidestick
agh              agl                ss                 ssh
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘losidestick     ‘guiro             ‘shortguiro        ‘longguiro
ssl              gui                guis               guil
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘cabasa          ‘maracas           ‘shortwhistle      ‘longwhistle
cab              mar                whs                whl
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘handclap        ‘tambourine        ‘vibraslap         ‘tamtam
hc               tamb               vibs               tt
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘claves          ‘hiwoodblock       ‘lowoodblock       ‘opencuica
cl               wbh                wbl                cuio
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘mutecuica       ‘triangle          ‘opentriangle      ‘mutetriangle
cuim             tri                trio               trim’  [image src="" alt="[image of music]" text="image of music" ]
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                    
‘oneup           ‘twoup             ‘threeup           ‘fourup
ua               ub                 uc                 ud
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘fiveup          ‘onedown           ‘twodown           ‘threedown
ue               da                 db                 dc
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                                                       
‘fourdown        ‘fivedown
dd               de
’  [image src="" alt="[image of music]" text="image of music" ]’  [image src="" alt="[image of music]" text="image of music" ]
                 


File: lilypond-notation.info,  Node: Technical glossary,  Next: All context properties,  Prev: Percussion notes,  Up: Notation manual tables

A.16 Technical glossary
=======================

A glossary of the technical terms and concepts used internally in
LilyPond.  These terms may appear in the manuals, on mailing lists or in
the source code.

* Menu:

* alist::
* callback::
* closure::
* glyph::
* grob::
* immutable::
* interface::
* lexer::
* mutable::
* output-def::
* parser::
* parser variable::
* prob::
* smob::
* stencil::


File: lilypond-notation.info,  Node: alist,  Next: callback,  Up: Technical glossary

alist
-----

An association list or *alist* for short is a Scheme pair which
associates a value with a key: ‘(key . value)’.  For example, in
‘scm/lily.scm’, the alist “type-p-name-alist” associates certain type
predicates (e.g. ‘ly:music?’) with names (e.g. “music”) so that
type-check failures can be reported with a console message that includes
the name of the expected type predicate.


File: lilypond-notation.info,  Node: callback,  Next: closure,  Prev: alist,  Up: Technical glossary

callback
--------

A *callback* is a routine, function or method whose reference is passed
as an argument in a call to another routine, so allowing the called
routine to invoke it.  The technique enables a lower- level software
layer to call a function defined in a higher layer.  Callbacks are used
extensively in LilyPond to permit user-level Scheme code to define how
many low-level actions are performed.


File: lilypond-notation.info,  Node: closure,  Next: glyph,  Prev: callback,  Up: Technical glossary

closure
-------

In Scheme, a *closure* is created when a function, usually a lambda
expression, is passed as a variable.  The closure contains the
function’s code plus references to the lexical bindings of the
function’s free variables (i.e.  those variables used in the expression
but defined outside it).  When this function is applied to different
arguments later, the free variable bindings that were captured in the
closure are used to obtain the values of the free variables to be used
in the calculation.  One useful property of closures is the retention of
internal variable values between invocations, so permitting state to be
maintained.


File: lilypond-notation.info,  Node: glyph,  Next: grob,  Prev: closure,  Up: Technical glossary

glyph
-----

A *glyph* is a particular graphical representation of a typographic
character, or a combination of two characters formating a ligature.  A
set of glyphs with a single style and shape comprise a font, and a set
of fonts covering several styles and sizes comprise a typeface.

See also
........

   Notation Reference: *note Fonts::, *note Special characters::.


File: lilypond-notation.info,  Node: grob,  Next: immutable,  Prev: glyph,  Up: Technical glossary

grob
----

LilyPond objects which represent items of notation in the printed output
such as note heads, stems, slurs, ties, fingering, clefs, etc are called
‘Layout objects’, often known as ‘GRaphical OBjects’, or *grobs* for
short.  They are represented by instances of the ‘Grob’ class.

See also
........

   Learning Manual: *note (lilypond-learning)Objects and interfaces::,
*note (lilypond-learning)Naming conventions of objects and properties::,
*note (lilypond-learning)Properties of layout objects::.

   Internals Reference: *note (lilypond-internals)grob-interface::,
*note (lilypond-internals)All layout objects::.


File: lilypond-notation.info,  Node: immutable,  Next: interface,  Prev: grob,  Up: Technical glossary

immutable
---------

An *immutable* object is one whose state cannot be modified after
creation, in contrast to a mutable object, which can be modified after
creation.

   In LilyPond, immutable or shared properties define the default style
and behavior of grobs.  They are shared between many objects.  In
apparent contradiction to the name, they can be changed using
‘\override’ and ‘\revert’.

See also
........

   Notation Reference: *note mutable::.


File: lilypond-notation.info,  Node: interface,  Next: lexer,  Prev: immutable,  Up: Technical glossary

interface
---------

Actions and properties which are common to a number of grobs are grouped
together in an object called a ‘grob-interface’, or just ‘interface’ for
short.

See also
........

   Learning Manual: *note (lilypond-learning)Objects and interfaces::,
*note (lilypond-learning)Naming conventions of objects and properties::,
*note (lilypond-learning)Properties found in interfaces::.

   Notation Reference: *note Layout interfaces::.

   Internals Reference: *note (lilypond-internals)Graphical Object
Interfaces::.


File: lilypond-notation.info,  Node: lexer,  Next: mutable,  Prev: interface,  Up: Technical glossary

lexer
-----

A *lexer* is a program which converts a sequence of characters into a
sequence of tokens, a process called lexical analysis.  The LilyPond
lexer converts the stream obtained from an input ‘.ly’ file into a
tokenized stream more suited to the next stage of processing - parsing,
for which see *note parser::.  The LilyPond lexer is built with Flex
from the lexer file ‘lily/lexer.ll’ which contains the lexical rules.
This file is part of the source code and is not included in the LilyPond
binary installation.


File: lilypond-notation.info,  Node: mutable,  Next: output-def,  Prev: lexer,  Up: Technical glossary

mutable
-------

A *mutable* object is one whose state can be modified after creation, in
contrast to an immutable object, whose state is fixed at the time of
creation.

   In LilyPond, mutable properties contain values that are specific to
one grob.  Typically, lists of other objects or results from
computations are stored in mutable properties.

See also
........

   Notation Reference: *note immutable::.


File: lilypond-notation.info,  Node: output-def,  Next: parser,  Prev: mutable,  Up: Technical glossary

output-def
----------

An instance of the ‘Output-def’ class contains the methods and data
structures associated with an output block.  Instances are created for
midi, layout and paper blocks.


File: lilypond-notation.info,  Node: parser,  Next: parser variable,  Prev: output-def,  Up: Technical glossary

parser
------

A *parser* analyzes the sequence of tokens produced by a lexer to
determine its grammatical structure, grouping the tokens progressively
into larger groupings according to the rules of the grammar.  If the
sequence of tokens is valid the end product is a tree of tokens whose
root is the grammar’s start symbol.  If this cannot be achieved the file
is invalid and an appropriate error message is produced.  The syntactic
groupings and the rules for constructing the groupings from their parts
for the LilyPond syntax are defined in ‘lily/parser.yy’ and shown in
Backus Normal Form (BNF) in *note (lilypond-contributor)LilyPond
grammar::.  This file is used to build the parser during the program
build by the parser generator, Bison.  It is part of the source code and
is not included in the LilyPond binary installation.


File: lilypond-notation.info,  Node: parser variable,  Next: prob,  Prev: parser,  Up: Technical glossary

parser variable
---------------

These are variables defined directly in Scheme.  Their direct use by
users is strongly discouraged, because their scoping semantics can be
confusing.

   When the value of such a variable is changed in a ‘.ly’ file, the
change is global, and unless explicitly reverted, the new value will
persist to the end of the file, affecting subsequent ‘\score’ blocks as
well as external files added with the ‘\include’ command.  This can lead
to unintended consequences and in complex typesetting projects the
consequent errors can be difficult to track down.

   LilyPond uses the following parser variables:

   • afterGraceFraction
   • musicQuotes
   • mode
   • output-count
   • output-suffix
   • partCombineListener
   • pitchnames
   • toplevel-bookparts
   • toplevel-scores
   • showLastLength
   • showFirstLength


File: lilypond-notation.info,  Node: prob,  Next: smob,  Prev: parser variable,  Up: Technical glossary

prob
----

PRoperty OBjects, or *probs* for short, are instances of the ‘Prob’
class, a simple base class for objects which have mutable and immutable
property alists and the methods to manipulate them.  The ‘Music’ and
‘Stream_event’ classes derive from ‘Prob’.  Instances of the ‘Prob’
class are also created to hold the formatted content of system grobs and
titling blocks during page layout.


File: lilypond-notation.info,  Node: smob,  Next: stencil,  Prev: prob,  Up: Technical glossary

smob
----

*Smobs*, or ScheMe OBjects, are part of the mechanism used by Guile to
export C and C++ objects to Scheme code.  In LilyPond, smobs are created
from C++ objects through macros.  There are two types of smob objects:
simple smobs, intended for simple immutable objects like numbers, and
complex smobs, used for objects with identities.  If you have access to
the LilyPond sources, more information can be found in
‘lily/includes/smob.hh’.


File: lilypond-notation.info,  Node: stencil,  Prev: smob,  Up: Technical glossary

stencil
-------

An instance of the *stencil* class holds the information required to
print a typographical object.  It is a simple smob containing a
confining box, which defines the vertical and horizontal extents of the
object, and a Scheme expression which will print the object when
evaluated.  Stencils may be combined to form more complex stencils
defined by a tree of Scheme expressions formed from the Scheme
expressions of the component stencils.

   The ‘stencil’ property, which connects a grob to its stencil, is
defined in the ‘grob-interface’ interface.

See also
........

   Internals Reference: *note (lilypond-internals)grob-interface::.


File: lilypond-notation.info,  Node: All context properties,  Next: Layout properties,  Prev: Technical glossary,  Up: Notation manual tables

A.17 All context properties
===========================

‘accidentalGrouping’ (symbol)
     If set to ‘'voice’, accidentals on the same note in different
     octaves may be horizontally staggered if in different voices.

‘additionalBassStrings’ (list)
     The additional tablature bass-strings, which will not get a seprate
     line in TabStaff.  It is a list of the pitches of each string
     (starting with the lowest numbered one).

‘additionalPitchPrefix’ (string)
     Text with which to prefix additional pitches within a chord name.

‘aDueText’ (markup)
     Text to print at a unisono passage.

‘alignAboveContext’ (string)
     Where to insert newly created context in vertical alignment.

‘alignBassFigureAccidentals’ (boolean)
     If true, then the accidentals are aligned in bass figure context.

‘alignBelowContext’ (string)
     Where to insert newly created context in vertical alignment.

‘alternativeNumberingStyle’ (symbol)
     The style of an alternative’s bar numbers.  Can be ‘numbers’ for
     going back to the same number or ‘numbers-with-letters’ for going
     back to the same number with letter suffixes.  No setting will not
     go back in measure-number time.

‘alternativeRestores’ (symbol list)
     Timing variables that are restored to their value at the end of the
     first alternative in subsequent alternatives.

‘associatedVoice’ (string)
     Name of the context (see ‘associatedVoiceType’ for its type,
     usually ‘Voice’) that has the melody for this ‘Lyrics’ line.

‘associatedVoiceType’ (symbol)
     Type of the context that has the melody for this ‘Lyrics’ line.

‘autoAccidentals’ (list)
     List of different ways to typeset an accidental.

     For determining when to print an accidental, several different
     rules are tried.  The rule that gives the highest number of
     accidentals is used.

     Each entry in the list is either a symbol or a procedure.

     SYMBOL
          The symbol is the name of the context in which the following
          rules are to be applied.  For example, if CONTEXT is *note
          (lilypond-internals)Score:: then all staves share accidentals,
          and if CONTEXT is *note (lilypond-internals)Staff:: then all
          voices in the same staff share accidentals, but staves do not.

     PROCEDURE
          The procedure represents an accidental rule to be applied to
          the previously specified context.

          The procedure takes the following arguments:

          ‘context’
               The current context to which the rule should be applied.

          ‘pitch’
               The pitch of the note to be evaluated.

          ‘barnum’
               The current bar number.

          ‘measurepos’
               The current measure position.

          The procedure returns a pair of booleans.  The first states
          whether an extra natural should be added.  The second states
          whether an accidental should be printed.  ‘(#t . #f)’ does not
          make sense.

‘autoBeamCheck’ (procedure)
     A procedure taking three arguments, CONTEXT, DIR [start/stop (-1 or
     1)], and TEST [shortest note in the beam].  A non-‘#f’ return value
     starts or stops the auto beam.

‘autoBeaming’ (boolean)
     If set to true then beams are generated automatically.

‘autoCautionaries’ (list)
     List similar to ‘autoAccidentals’, but it controls cautionary
     accidentals rather than normal ones.  Both lists are tried, and the
     one giving the most accidentals wins.  In case of draw, a normal
     accidental is typeset.

‘automaticBars’ (boolean)
     If set to false then bar lines will not be printed automatically;
     they must be explicitly created with a ‘\bar’ command.  Unlike the
     ‘\cadenzaOn’ keyword, measures are still counted.  Bar line
     generation will resume according to that count if this property is
     unset.

‘barAlways’ (boolean)
     If set to true a bar line is drawn after each note.

‘barCheckSynchronize’ (boolean)
     If true then reset ‘measurePosition’ when finding a bar check.

‘barNumberFormatter’ (procedure)
     A procedure that takes a bar number, measure position, and
     alternative number and returns a markup of the bar number to print.

‘barNumberVisibility’ (procedure)
     A procedure that takes a bar number and a measure position and
     returns whether the corresponding bar number should be printed.
     Note that the actual print-out of bar numbers is controlled with
     the ‘break-visibility’ property.

     The following procedures are predefined:

     ‘all-bar-numbers-visible’
          Enable bar numbers for all bars, including the first one and
          broken bars (which get bar numbers in parentheses).

     ‘first-bar-number-invisible’
          Enable bar numbers for all bars (including broken bars) except
          the first one.  If the first bar is broken, it doesn’t get a
          bar number either.

     ‘first-bar-number-invisible-save-broken-bars’
          Enable bar numbers for all bars (including broken bars) except
          the first one.  A broken first bar gets a bar number.

     ‘first-bar-number-invisible-and-no-parenthesized-bar-numbers’
          Enable bar numbers for all bars except the first bar and
          broken bars.  This is the default.

     ‘(every-nth-bar-number-visible N)’
          Assuming N is value 2, for example, this enables bar numbers
          for bars 2, 4, 6, etc.

     ‘(modulo-bar-number-visible N M)’
          If bar numbers 1, 4, 7, etc., should be enabled, N (the
          modulo) must be set to 3 and M (the division remainder) to 1.

‘baseMoment’ (moment)
     Smallest unit of time that will stand on its own as a subdivided
     section.

‘bassFigureFormatFunction’ (procedure)
     A procedure that is called to produce the formatting for a
     ‘BassFigure’ grob.  It takes a list of ‘BassFigureEvent’s, a
     context, and the grob to format.

‘beamExceptions’ (list)
     An alist of exceptions to autobeam rules that normally end on
     beats.

‘beamHalfMeasure’ (boolean)
     Whether to allow a beam to begin halfway through the measure in
     triple time, which could look like 6/8.

‘beatStructure’ (list)
     List of ‘baseMoment’s that are combined to make beats.

‘chordChanges’ (boolean)
     Only show changes in chords scheme?

‘chordNameExceptions’ (list)
     An alist of chord exceptions.  Contains ‘(CHORD . MARKUP)’ entries.

‘chordNameExceptionsFull’ (list)
     An alist of full chord exceptions.  Contains ‘(CHORD . MARKUP)’
     entries.

‘chordNameExceptionsPartial’ (list)
     An alist of partial chord exceptions.  Contains ‘(CHORD .
     (PREFIX-MARKUP SUFFIX-MARKUP))’ entries.

‘chordNameFunction’ (procedure)
     The function that converts lists of pitches to chord names.

‘chordNameLowercaseMinor’ (boolean)
     Downcase roots of minor chords?

‘chordNameSeparator’ (markup)
     The markup object used to separate parts of a chord name.

‘chordNoteNamer’ (procedure)
     A function that converts from a pitch object to a text markup.
     Used for single pitches.

‘chordPrefixSpacer’ (number)
     The space added between the root symbol and the prefix of a chord
     name.

‘chordRootNamer’ (procedure)
     A function that converts from a pitch object to a text markup.
     Used for chords.

‘clefGlyph’ (string)
     Name of the symbol within the music font.

‘clefPosition’ (number)
     Where should the center of the clef symbol go, measured in half
     staff spaces from the center of the staff.

‘clefTransposition’ (integer)
     Add this much extra transposition.  Values of 7 and -7 are common.

‘clefTranspositionFormatter’ (procedure)
     A procedure that takes the Transposition number as a string and the
     style as a symbol and returns a markup.

‘clefTranspositionStyle’ (symbol)
     Determines the way the ClefModifier grob is displayed.  Possible
     values are ‘default’, ‘parenthesized’ and ‘bracketed’.

‘completionBusy’ (boolean)
     Whether a completion-note head is playing.

‘completionFactor’ (an exact rational or procedure)
     When ‘Completion_heads_engraver’ and ‘Completion_rest_engraver’
     need to split a note or rest with a scaled duration, such as
     ‘c2*3’, this specifies the scale factor to use for the newly-split
     notes and rests created by the engraver.

     If ‘#f’, the completion engraver uses the scale-factor of each
     duration being split.

     If set to a callback procedure, that procedure is called with the
     context of the completion engraver, and the duration to be split.

‘completionUnit’ (moment)
     Sub-bar unit of completion.

‘connectArpeggios’ (boolean)
     If set, connect arpeggios across piano staff.

‘countPercentRepeats’ (boolean)
     If set, produce counters for percent repeats.

‘createKeyOnClefChange’ (boolean)
     Print a key signature whenever the clef is changed.

‘createSpacing’ (boolean)
     Create ‘StaffSpacing’ objects?  Should be set for staves.

‘crescendoSpanner’ (symbol)
     The type of spanner to be used for crescendi.  Available values are
     ‘hairpin’ and ‘text’.  If unset, a hairpin crescendo is used.

‘crescendoText’ (markup)
     The text to print at start of non-hairpin crescendo, i.e.,
     ‘cresc.’.

‘cueClefGlyph’ (string)
     Name of the symbol within the music font.

‘cueClefPosition’ (number)
     Where should the center of the clef symbol go, measured in half
     staff spaces from the center of the staff.

‘cueClefTransposition’ (integer)
     Add this much extra transposition.  Values of 7 and -7 are common.

‘cueClefTranspositionFormatter’ (procedure)
     A procedure that takes the Transposition number as a string and the
     style as a symbol and returns a markup.

‘cueClefTranspositionStyle’ (symbol)
     Determines the way the ClefModifier grob is displayed.  Possible
     values are ‘default’, ‘parenthesized’ and ‘bracketed’.

‘currentBarNumber’ (integer)
     Contains the current barnumber.  This property is incremented at
     every bar line.

‘decrescendoSpanner’ (symbol)
     The type of spanner to be used for decrescendi.  Available values
     are ‘hairpin’ and ‘text’.  If unset, a hairpin decrescendo is used.

‘decrescendoText’ (markup)
     The text to print at start of non-hairpin decrescendo, i.e.,
     ‘dim.’.

‘defaultBarType’ (string)
     Set the default type of bar line.  See ‘whichBar’ for information
     on available bar types.

     This variable is read by *note
     (lilypond-internals)Timing_translator:: at *note
     (lilypond-internals)Score:: level.

‘defaultStrings’ (list)
     A list of strings to use in calculating frets for tablatures and
     fretboards if no strings are provided in the notes for the current
     moment.

‘doubleRepeatSegnoType’ (string)
     Set the default bar line for the combinations double repeat with
     segno.  Default is ‘:|.S.|:’.

‘doubleRepeatType’ (string)
     Set the default bar line for double repeats.

‘doubleSlurs’ (boolean)
     If set, two slurs are created for every slurred note, one above and
     one below the chord.

‘drumPitchTable’ (hash table)
     A table mapping percussion instruments (symbols) to pitches.

‘drumStyleTable’ (hash table)
     A hash table which maps drums to layout settings.  Predefined
     values: ‘drums-style’, ‘agostini-drums-style’, ‘timbales-style’,
     ‘congas-style’, ‘bongos-style’, and ‘percussion-style’.

     The layout style is a hash table, containing the drum-pitches
     (e.g., the symbol ‘hihat’) as keys, and a list ‘(NOTEHEAD-STYLE
     SCRIPT VERTICAL-POSITION)’ as values.

‘endRepeatSegnoType’ (string)
     Set the default bar line for the combinations ending of repeat with
     segno.  Default is ‘:|.S’.

‘endRepeatType’ (string)
     Set the default bar line for the ending of repeats.

‘explicitClefVisibility’ (vector)
     ‘break-visibility’ function for clef changes.

‘explicitCueClefVisibility’ (vector)
     ‘break-visibility’ function for cue clef changes.

‘explicitKeySignatureVisibility’ (vector)
     ‘break-visibility’ function for explicit key changes.  ‘\override’
     of the ‘break-visibility’ property will set the visibility for
     normal (i.e., at the start of the line) key signatures.

‘extendersOverRests’ (boolean)
     Whether to continue extenders as they cross a rest.

‘extraNatural’ (boolean)
     Whether to typeset an extra natural sign before accidentals that
     reduce the effect of a previous alteration.

‘figuredBassAlterationDirection’ (direction)
     Where to put alterations relative to the main figure.

‘figuredBassCenterContinuations’ (boolean)
     Whether to vertically center pairs of extender lines.  This does
     not work with three or more lines.

‘figuredBassFormatter’ (procedure)
     A routine generating a markup for a bass figure.

‘figuredBassPlusDirection’ (direction)
     Where to put plus signs relative to the main figure.

‘fingeringOrientations’ (list)
     A list of symbols, containing ‘left’, ‘right’, ‘up’ and/or ‘down’.
     This list determines where fingerings are put relative to the chord
     being fingered.

‘firstClef’ (boolean)
     If true, create a new clef when starting a staff.

‘followVoice’ (boolean)
     If set, note heads are tracked across staff switches by a thin
     line.

‘fontSize’ (number)
     The relative size of all grobs in a context.

‘forbidBreak’ (boolean)
     If set to ‘#t’, prevent a line break at this point.

‘forceClef’ (boolean)
     Show clef symbol, even if it has not changed.  Only active for the
     first clef after the property is set, not for the full staff.

‘fretLabels’ (list)
     A list of strings or Scheme-formatted markups containing, in the
     correct order, the labels to be used for lettered frets in
     tablature.

‘glissandoMap’ (list)
     A map in the form of ’((source1 .  target1) (source2 .  target2)
     (sourcen .  targetn)) showing the glissandi to be drawn for note
     columns.  The value ’() will default to ’((0 .  0) (1 .  1) (n .
     n)), where n is the minimal number of note-heads in the two note
     columns between which the glissandi occur.

‘gridInterval’ (moment)
     Interval for which to generate ‘GridPoint’s.

‘handleNegativeFrets’ (symbol)
     How the automatic fret calculator should handle calculated negative
     frets.  Values include ‘'ignore’, to leave them out of the diagram
     completely, ‘'include’, to include them as calculated, and
     ‘'recalculate’, to ignore the specified string and find a string
     where they will fit with a positive fret number.

‘harmonicAccidentals’ (boolean)
     If set, harmonic notes in chords get accidentals.

‘harmonicDots’ (boolean)
     If set, harmonic notes in dotted chords get dots.

‘highStringOne’ (boolean)
     Whether the first string is the string with highest pitch on the
     instrument.  This used by the automatic string selector for
     tablature notation.

‘ignoreBarChecks’ (boolean)
     Ignore bar checks.

‘ignoreFiguredBassRest’ (boolean)
     Don’t swallow rest events.

‘ignoreMelismata’ (boolean)
     Ignore melismata for this *note (lilypond-internals)Lyrics:: line.

‘implicitBassFigures’ (list)
     A list of bass figures that are not printed as numbers, but only as
     extender lines.

‘includeGraceNotes’ (boolean)
     Do not ignore grace notes for *note (lilypond-internals)Lyrics::.

‘initialTimeSignatureVisibility’ (vector)
     break visibility for the initial time signature.

‘instrumentCueName’ (markup)
     The name to print if another instrument is to be taken.

‘instrumentEqualizer’ (procedure)
     A function taking a string (instrument name), and returning a ‘(MIN
     . MAX)’ pair of numbers for the loudness range of the instrument.

‘instrumentName’ (markup)
     The name to print left of a staff.  The ‘instrumentName’ property
     labels the staff in the first system, and the ‘shortInstrumentName’
     property labels following lines.

‘instrumentTransposition’ (pitch)
     Define the transposition of the instrument.  Its value is the pitch
     that sounds when the instrument plays written middle C. This is
     used to transpose the MIDI output, and ‘\quote’s.

‘internalBarNumber’ (integer)
     Contains the current barnumber.  This property is used for internal
     timekeeping, among others by the ‘Accidental_engraver’.

‘keepAliveInterfaces’ (list)
     A list of symbols, signifying grob interfaces that are worth
     keeping a staff with ‘remove-empty’ set around for.

‘keyAlterationOrder’ (list)
     An alist that defines in what order alterations should be printed.
     The format is ‘(STEP . ALTER)’, where STEP is a number from 0 to 6
     and ALTER from -2 (sharp) to 2 (flat).

‘keyAlterations’ (list)
     The current key signature.  This is an alist containing ‘(STEP .
     ALTER)’ or ‘((OCTAVE . STEP) . ALTER)’, where STEP is a number in
     the range 0 to 6 and ALTER a fraction, denoting alteration.  For
     alterations, use symbols, e.g.  ‘keyAlterations = #`((6 . ,FLAT))’.

‘lyricMelismaAlignment’ (number)
     Alignment to use for a melisma syllable.

‘magnifyStaffValue’ (positive number)
     The most recent value set with ‘\magnifyStaff’.

‘majorSevenSymbol’ (markup)
     How should the major 7th be formatted in a chord name?

‘markFormatter’ (procedure)
     A procedure taking as arguments the context and the rehearsal mark.
     It should return the formatted mark as a markup object.

‘maximumFretStretch’ (number)
     Don’t allocate frets further than this from specified frets.

‘measureLength’ (moment)
     Length of one measure in the current time signature.

‘measurePosition’ (moment)
     How much of the current measure have we had.  This can be set
     manually to create incomplete measures.

‘melismaBusyProperties’ (list)
     A list of properties (symbols) to determine whether a melisma is
     playing.  Setting this property will influence how lyrics are
     aligned to notes.  For example, if set to ‘'(melismaBusy
     beamMelismaBusy)’, only manual melismata and manual beams are
     considered.  Possible values include ‘melismaBusy’,
     ‘slurMelismaBusy’, ‘tieMelismaBusy’, and ‘beamMelismaBusy’.

‘metronomeMarkFormatter’ (procedure)
     How to produce a metronome markup.  Called with two arguments: a
     ‘TempoChangeEvent’ and context.

‘middleCClefPosition’ (number)
     The position of the middle C, as determined only by the clef.  This
     can be calculated by looking at ‘clefPosition’ and ‘clefGlyph’.

‘middleCCuePosition’ (number)
     The position of the middle C, as determined only by the clef of the
     cue notes.  This can be calculated by looking at ‘cueClefPosition’
     and ‘cueClefGlyph’.

‘middleCOffset’ (number)
     The offset of middle C from the position given by
     ‘middleCClefPosition’ This is used for ottava brackets.

‘middleCPosition’ (number)
     The place of the middle C, measured in half staff-spaces.  Usually
     determined by looking at ‘middleCClefPosition’ and ‘middleCOffset’.

‘midiBalance’ (number)
     Stereo balance for the MIDI channel associated with the current
     context.  Ranges from -1 to 1, where the values -1 (‘#LEFT’), 0
     (‘#CENTER’) and 1 (‘#RIGHT’) correspond to leftmost emphasis,
     center balance, and rightmost emphasis, respectively.

‘midiChannelMapping’ (symbol)
     How to map MIDI channels: per ‘staff’ (default), ‘instrument’ or
     ‘voice’.

‘midiChorusLevel’ (number)
     Chorus effect level for the MIDI channel associated with the
     current context.  Ranges from 0 to 1 (0=off, 1=full effect).

‘midiExpression’ (number)
     Expression control for the MIDI channel associated with the current
     context.  Ranges from 0 to 1 (0=off, 1=full effect).

‘midiInstrument’ (string)
     Name of the MIDI instrument to use.

‘midiMaximumVolume’ (number)
     Analogous to ‘midiMinimumVolume’.

‘midiMergeUnisons’ (boolean)
     If true, output only one MIDI note-on event when notes with the
     same pitch, in the same MIDI-file track, overlap.

‘midiMinimumVolume’ (number)
     Set the minimum loudness for MIDI. Ranges from 0 to 1.

‘midiPanPosition’ (number)
     Pan position for the MIDI channel associated with the current
     context.  Ranges from -1 to 1, where the values -1 (‘#LEFT’), 0
     (‘#CENTER’) and 1 (‘#RIGHT’) correspond to hard left, center, and
     hard right, respectively.

‘midiReverbLevel’ (number)
     Reverb effect level for the MIDI channel associated with the
     current context.  Ranges from 0 to 1 (0=off, 1=full effect).

‘minimumFret’ (number)
     The tablature auto string-selecting mechanism selects the highest
     string with a fret at least ‘minimumFret’.

‘minimumPageTurnLength’ (moment)
     Minimum length of a rest for a page turn to be allowed.

‘minimumRepeatLengthForPageTurn’ (moment)
     Minimum length of a repeated section for a page turn to be allowed
     within that section.

‘minorChordModifier’ (markup)
     Markup displayed following the root for a minor chord

‘noChordSymbol’ (markup)
     Markup to be displayed for rests in a ChordNames context.

‘noteToFretFunction’ (procedure)
     Convert list of notes and list of defined strings to full list of
     strings and fret numbers.  Parameters: The context, a list of note
     events, a list of tabstring events, and the fretboard grob if a
     fretboard is desired.

‘nullAccidentals’ (boolean)
     The ‘Accidental_engraver’ generates no accidentals for notes in
     contexts were this is set.  In addition to supressing the printed
     accidental, this option removes any effect the note would have had
     on accidentals in other voices.

‘ottavation’ (markup)
     If set, the text for an ottava spanner.  Changing this creates a
     new text spanner.

‘output’ (music output)
     The output produced by a score-level translator during music
     interpretation.

‘partCombineForced’ (symbol)
     Override for the partcombine decision.  Can be ‘apart’, ‘chords’,
     ‘unisono’, ‘solo1’, or ‘solo2’.

‘partCombineTextsOnNote’ (boolean)
     Print part-combine texts only on the next note rather than
     immediately on rests or skips.

‘pedalSostenutoStrings’ (list)
     See ‘pedalSustainStrings’.

‘pedalSostenutoStyle’ (symbol)
     See ‘pedalSustainStyle’.

‘pedalSustainStrings’ (list)
     A list of strings to print for sustain-pedal.  Format is ‘(UP
     UPDOWN DOWN)’, where each of the three is the string to print when
     this is done with the pedal.

‘pedalSustainStyle’ (symbol)
     A symbol that indicates how to print sustain pedals: ‘text’,
     ‘bracket’ or ‘mixed’ (both).

‘pedalUnaCordaStrings’ (list)
     See ‘pedalSustainStrings’.

‘pedalUnaCordaStyle’ (symbol)
     See ‘pedalSustainStyle’.

‘predefinedDiagramTable’ (hash table)
     The hash table of predefined fret diagrams to use in FretBoards.

‘printKeyCancellation’ (boolean)
     Print restoration alterations before a key signature change.

‘printOctaveNames’ (boolean)
     Print octave marks for the ‘NoteNames’ context.

‘printPartCombineTexts’ (boolean)
     Set ‘Solo’ and ‘A due’ texts in the part combiner?

‘proportionalNotationDuration’ (moment)
     Global override for shortest-playing duration.  This is used for
     switching on proportional notation.

‘rehearsalMark’ (integer)
     The last rehearsal mark printed.

‘repeatCommands’ (list)
     This property is a list of commands of the form ‘(list 'volta X)’,
     where X is a string or ‘#f’.  ‘'end-repeat’ is also accepted as a
     command.

‘repeatCountVisibility’ (procedure)
     A procedure taking as arguments an integer and context, returning
     whether the corresponding percent repeat number should be printed
     when ‘countPercentRepeats’ is set.

‘restCompletionBusy’ (boolean)
     Signal whether a completion-rest is active.

‘restNumberThreshold’ (number)
     If a multimeasure rest has more measures than this, a number is
     printed.

‘restrainOpenStrings’ (boolean)
     Exclude open strings from the automatic fret calculator.

‘searchForVoice’ (boolean)
     Signal whether a search should be made of all contexts in the
     context hierarchy for a voice to provide rhythms for the lyrics.

‘segnoType’ (string)
     Set the default bar line for a requested segno.  Default is ‘S’.

‘shapeNoteStyles’ (vector)
     Vector of symbols, listing style for each note head relative to the
     tonic (qv.)  of the scale.

‘shortInstrumentName’ (markup)
     See ‘instrumentName’.

‘shortVocalName’ (markup)
     Name of a vocal line, short version.

‘skipBars’ (boolean)
     If set to true, then skip the empty bars that are produced by
     multimeasure notes and rests.  These bars will not appear on the
     printed output.  If not set (the default), multimeasure notes and
     rests expand into their full length, printing the appropriate
     number of empty bars so that synchronization with other voices is
     preserved.

          {
            r1 r1*3 R1*3
            \set Score.skipBars= ##t
            r1*3 R1*3
          }

‘skipTypesetting’ (boolean)
     If true, no typesetting is done, speeding up the interpretation
     phase.  Useful for debugging large scores.

‘slashChordSeparator’ (markup)
     The markup object used to separate a chord name from its root note
     in case of inversions or slash chords.

‘soloIIText’ (markup)
     The text for the start of a solo for voice ‘two’ when
     part-combining.

‘soloText’ (markup)
     The text for the start of a solo when part-combining.

‘squashedPosition’ (integer)
     Vertical position of squashing for *note
     (lilypond-internals)Pitch_squash_engraver::.

‘staffLineLayoutFunction’ (procedure)
     Layout of staff lines, ‘traditional’, or ‘semitone’.

‘stanza’ (markup)
     Stanza ‘number’ to print before the start of a verse.  Use in
     ‘Lyrics’ context.

‘startRepeatSegnoType’ (string)
     Set the default bar line for the combinations beginning of repeat
     with segno.  Default is ‘S.|:’.

‘startRepeatType’ (string)
     Set the default bar line for the beginning of repeats.

‘stemLeftBeamCount’ (integer)
     Specify the number of beams to draw on the left side of the next
     note.  Overrides automatic beaming.  The value is only used once,
     and then it is erased.

‘stemRightBeamCount’ (integer)
     See ‘stemLeftBeamCount’.

‘strictBeatBeaming’ (boolean)
     Should partial beams reflect the beat structure even if it causes
     flags to hang out?

‘stringNumberOrientations’ (list)
     See ‘fingeringOrientations’.

‘stringOneTopmost’ (boolean)
     Whether the first string is printed on the top line of the
     tablature.

‘stringTunings’ (list)
     The tablature strings tuning.  It is a list of the pitches of each
     string (starting with the lowest numbered one).

‘strokeFingerOrientations’ (list)
     See ‘fingeringOrientations’.

‘subdivideBeams’ (boolean)
     If set, multiple beams will be subdivided at ‘baseMoment’ positions
     by only drawing one beam over the beat.

‘suggestAccidentals’ (boolean)
     If set, accidentals are typeset as cautionary suggestions over the
     note.

‘supportNonIntegerFret’ (boolean)
     If set in ‘Score’ the ‘TabStaff’ will print micro-tones as ‘2½’

‘systemStartDelimiter’ (symbol)
     Which grob to make for the start of the system/staff?  Set to
     ‘SystemStartBrace’, ‘SystemStartBracket’ or ‘SystemStartBar’.

‘systemStartDelimiterHierarchy’ (pair)
     A nested list, indicating the nesting of a start delimiters.

‘tablatureFormat’ (procedure)
     A function formatting a tablature note head.  Called with three
     arguments: context, string number and, fret number.  It returns the
     text as a markup.

‘tabStaffLineLayoutFunction’ (procedure)
     A function determining the staff position of a tablature note head.
     Called with two arguments: the context and the string.

‘tempoHideNote’ (boolean)
     Hide the note = count in tempo marks.

‘tempoWholesPerMinute’ (moment)
     The tempo in whole notes per minute.

‘tieWaitForNote’ (boolean)
     If true, tied notes do not have to follow each other directly.
     This can be used for writing out arpeggios.

‘timeSignatureFraction’ (fraction, as pair)
     A pair of numbers, signifying the time signature.  For example,
     ‘'(4 . 4)’ is a 4/4 time signature.

‘timeSignatureSettings’ (list)
     A nested alist of settings for time signatures.  Contains elements
     for various time signatures.  The element for each time signature
     contains entries for ‘baseMoment’, ‘beatStructure’, and
     ‘beamExceptions’.

‘timing’ (boolean)
     Keep administration of measure length, position, bar number, etc.?
     Switch off for cadenzas.

‘tonic’ (pitch)
     The tonic of the current scale.

‘topLevelAlignment’ (boolean)
     If true, the VERTICAL_ALIGN_ENGRAVER will create a
     VERTICALALIGNMENT; otherwise, it will create a STAFFGROUPER

‘tupletFullLength’ (boolean)
     If set, the tuplet is printed up to the start of the next note.

‘tupletFullLengthNote’ (boolean)
     If set, end at the next note, otherwise end on the matter (time
     signatures, etc.)  before the note.

‘tupletSpannerDuration’ (moment)
     Normally, a tuplet bracket is as wide as the ‘\times’ expression
     that gave rise to it.  By setting this property, you can make
     brackets last shorter.

          {
            \set tupletSpannerDuration = #(ly:make-moment 1 4)
            \times 2/3 { c8 c c c c c }
          }

‘useBassFigureExtenders’ (boolean)
     Whether to use extender lines for repeated bass figures.

‘vocalName’ (markup)
     Name of a vocal line.

‘voltaSpannerDuration’ (moment)
     This specifies the maximum duration to use for the brackets printed
     for ‘\alternative’.  This can be used to shrink the length of
     brackets in the situation where one alternative is very large.

‘whichBar’ (string)
     This property is read to determine what type of bar line to create.

     Example:

          \set Staff.whichBar = ".|:"

     This will create a start-repeat bar in this staff only.  Valid
     values are described in ‘scm/bar-line.scm’.


File: lilypond-notation.info,  Node: Layout properties,  Next: Available music functions,  Prev: All context properties,  Up: Notation manual tables

A.18 Layout properties
======================

‘add-stem-support’ (boolean)
     If set, the ‘Stem’ object is included in this script’s support.

‘after-line-breaking’ (boolean)
     Dummy property, used to trigger callback for ‘after-line-breaking’.

‘align-dir’ (direction)
     Which side to align?  ‘-1’: left side, ‘0’: around center of width,
     ‘1’: right side.

‘allow-loose-spacing’ (boolean)
     If set, column can be detached from main spacing.

‘allow-span-bar’ (boolean)
     If false, no inter-staff bar line will be created below this bar
     line.

‘alteration’ (number)
     Alteration numbers for accidental.

‘alteration-alist’ (list)
     List of ‘(PITCH . ACCIDENTAL)’ pairs for key signature.

‘annotation’ (string)
     Annotate a grob for debug purposes.

‘annotation-balloon’ (boolean)
     Print the balloon around an annotation.

‘annotation-line’ (boolean)
     Print the line from an annotation to the grob that it annotates.

‘arpeggio-direction’ (direction)
     If set, put an arrow on the arpeggio squiggly line.

‘arrow-length’ (number)
     Arrow length.

‘arrow-width’ (number)
     Arrow width.

‘auto-knee-gap’ (dimension, in staff space)
     If a gap is found between note heads where a horizontal beam fits
     that is larger than this number, make a kneed beam.

‘automatically-numbered’ (boolean)
     Should a footnote be automatically numbered?

‘average-spacing-wishes’ (boolean)
     If set, the spacing wishes are averaged over staves.

‘avoid-note-head’ (boolean)
     If set, the stem of a chord does not pass through all note heads,
     but starts at the last note head.

‘avoid-scripts’ (boolean)
     If set, a tuplet bracket avoids the scripts associated with the
     note heads it encompasses.

‘avoid-slur’ (symbol)
     Method of handling slur collisions.  Choices are ‘inside’,
     ‘outside’, ‘around’, and ‘ignore’.  ‘inside’ adjusts the slur if
     needed to keep the grob inside the slur.  ‘outside’ moves the grob
     vertically to the outside of the slur.  ‘around’ moves the grob
     vertically to the outside of the slur only if there is a collision.
     ‘ignore’ does not move either.  In grobs whose notational
     significance depends on vertical position (such as accidentals,
     clefs, etc.), ‘outside’ and ‘around’ behave like ‘ignore’.

‘axes’ (list)
     List of axis numbers.  In the case of alignment grobs, this should
     contain only one number.

‘bar-extent’ (pair of numbers)
     The Y-extent of the actual bar line.  This may differ from
     ‘Y-extent’ because it does not include the dots in a repeat bar
     line.

‘base-shortest-duration’ (moment)
     Spacing is based on the shortest notes in a piece.  Normally,
     pieces are spaced as if notes at least as short as this are
     present.

‘baseline-skip’ (dimension, in staff space)
     Distance between base lines of multiple lines of text.

‘beam-thickness’ (dimension, in staff space)
     Beam thickness, measured in ‘staff-space’ units.

‘beam-width’ (dimension, in staff space)
     Width of the tremolo sign.

‘beamed-stem-shorten’ (list)
     How much to shorten beamed stems, when their direction is forced.
     It is a list, since the value is different depending on the number
     of flags and beams.

‘beaming’ (pair)
     Pair of number lists.  Each number list specifies which beams to
     make.  ‘0’ is the central beam, ‘1’ is the next beam toward the
     note, etc.  This information is used to determine how to connect
     the beaming patterns from stem to stem inside a beam.

‘beamlet-default-length’ (pair)
     A pair of numbers.  The first number specifies the default length
     of a beamlet that sticks out of the left hand side of this stem;
     the second number specifies the default length of the beamlet to
     the right.  The actual length of a beamlet is determined by taking
     either the default length or the length specified by
     ‘beamlet-max-length-proportion’, whichever is smaller.

‘beamlet-max-length-proportion’ (pair)
     The maximum length of a beamlet, as a proportion of the distance
     between two adjacent stems.

‘before-line-breaking’ (boolean)
     Dummy property, used to trigger a callback function.

‘between-cols’ (pair)
     Where to attach a loose column to.

‘bound-details’ (list)
     An alist of properties for determining attachments of spanners to
     edges.

‘bound-padding’ (number)
     The amount of padding to insert around spanner bounds.

‘bracket-flare’ (pair of numbers)
     A pair of numbers specifying how much edges of brackets should
     slant outward.  Value ‘0.0’ means straight edges.

‘bracket-visibility’ (boolean or symbol)
     This controls the visibility of the tuplet bracket.  Setting it to
     false prevents printing of the bracket.  Setting the property to
     ‘if-no-beam’ makes it print only if there is no beam associated
     with this tuplet bracket.

‘break-align-anchor’ (number)
     Grobs aligned to this breakable item will have their X-offsets
     shifted by this number.  In bar lines, for example, this is used to
     position grobs relative to the (visual) center of the bar line.

‘break-align-anchor-alignment’ (number)
     Read by ‘ly:break-aligned-interface::calc-extent-aligned-anchor’
     for aligning an anchor to a grob’s extent.

‘break-align-orders’ (vector)
     This is a vector of 3 lists:
     ‘#(END-OF-LINE UNBROKEN START-OF-LINE’).  Each list contains
     _break-align symbols_ that specify an order of breakable items (see
     *note (lilypond-internals)break-alignment-interface::).

     For example, this places time signatures before clefs:

          \override Score.BreakAlignment.break-align-orders =
            #(make-vector 3 '(left-edge
                              cue-end-clef
                              ambitus
                              breathing-sign
                              time-signature
                              clef
                              cue-clef
                              staff-bar
                              key-cancellation
                              key-signature
                              custos))

‘break-align-symbol’ (symbol)
     This key is used for aligning, ordering, and spacing breakable
     items.  See *note (lilypond-internals)break-alignment-interface::.

‘break-align-symbols’ (list)
     A list of _break-align symbols_ that determines which breakable
     items to align this to.  If the grob selected by the first symbol
     in the list is invisible due to ‘break-visibility’, we will align
     to the next grob (and so on).  Choices are listed in *note
     (lilypond-internals)break-alignment-interface::.

‘break-overshoot’ (pair of numbers)
     How much does a broken spanner stick out of its bounds?

‘break-visibility’ (vector)
     A vector of 3 booleans, ‘#(END-OF-LINE UNBROKEN BEGIN-OF-LINE)’.
     ‘#t’ means visible, ‘#f’ means killed.

‘breakable’ (boolean)
     Allow breaks here.

‘broken-bound-padding’ (number)
     The amount of padding to insert when a spanner is broken at a line
     break.

‘chord-dots-limit’ (integer)
     Limits the column of dots on each chord to the height of the chord
     plus ‘chord-dots-limit’ staff-positions.

‘circled-tip’ (boolean)
     Put a circle at start/end of hairpins (al/del niente).

‘clef-alignments’ (list)
     An alist of parent-alignments that should be used for clef
     modifiers with various clefs

‘clip-edges’ (boolean)
     Allow outward pointing beamlets at the edges of beams?

‘collapse-height’ (dimension, in staff space)
     Minimum height of system start delimiter.  If equal or smaller, the
     bracket/brace/line is removed.

‘collision-interfaces’ (list)
     A list of interfaces for which automatic beam-collision resolution
     is run.

‘collision-voice-only’ (boolean)
     Does automatic beam collsion apply only to the voice in which the
     beam was created?

‘color’ (color)
     The color of this grob.

‘common-shortest-duration’ (moment)
     The most common shortest note length.  This is used in spacing.
     Enlarging this sets the score tighter.

‘concaveness’ (number)
     A beam is concave if its inner stems are closer to the beam than
     the two outside stems.  This number is a measure of the closeness
     of the inner stems.  It is used for damping the slope of the beam.

‘connect-to-neighbor’ (pair)
     Pair of booleans, indicating whether this grob looks as a continued
     break.

‘control-points’ (list of number pairs)
     List of offsets (number pairs) that form control points for the
     tie, slur, or bracket shape.  For Béziers, this should list the
     control points of a third-order Bézier curve.

‘count-from’ (integer)
     The first measure in a measure count receives this number.  The
     following measures are numbered in increments from this initial
     value.

‘damping’ (number)
     Amount of beam slope damping.

‘dash-definition’ (pair)
     List of ‘dash-elements’ defining the dash structure.  Each
     ‘dash-element’ has a starting t value, an ending t-value, a
     ‘dash-fraction’, and a ‘dash-period’.

‘dash-fraction’ (number)
     Size of the dashes, relative to ‘dash-period’.  Should be between
     ‘0.1’ and ‘1.0’ (continuous line).  If set to ‘0.0’, a dotted line
     is produced

‘dash-period’ (number)
     The length of one dash together with whitespace.  If negative, no
     line is drawn at all.

‘default-direction’ (direction)
     Direction determined by note head positions.

‘default-staff-staff-spacing’ (list)
     The settings to use for ‘staff-staff-spacing’ when it is unset, for
     ungrouped staves and for grouped staves that do not have the
     relevant ‘StaffGrouper’ property set (‘staff-staff-spacing’ or
     ‘staffgroup-staff-spacing’).

‘details’ (list)
     Alist of parameters for detailed grob behavior.  More information
     on the allowed parameters for a grob can be found by looking at the
     top of the Internals Reference page for each interface having a
     ‘details’ property.

‘digit-names’ (vector)
     Names for string finger digits.

‘direction’ (direction)
     If ‘side-axis’ is ‘0’ (or ‘X’), then this property determines
     whether the object is placed ‘LEFT’, ‘CENTER’ or ‘RIGHT’ with
     respect to the other object.  Otherwise, it determines whether the
     object is placed ‘UP’, ‘CENTER’ or ‘DOWN’.  Numerical values may
     also be used: ‘UP’=‘1’, ‘DOWN’=‘-1’, ‘LEFT’=‘-1’, ‘RIGHT’=‘1’,
     ‘CENTER’=‘0’.

‘dot-count’ (integer)
     The number of dots.

‘dot-negative-kern’ (number)
     The space to remove between a dot and a slash in percent repeat
     glyphs.  Larger values bring the two elements closer together.

‘dot-placement-list’ (list)
     List consisting of ‘(DESCRIPTION STRING-NUMBER FRET-NUMBER
     FINGER-NUMBER)’ entries used to define fret diagrams.

‘double-stem-separation’ (number)
     The distance between the two stems of a half note in tablature when
     using ‘\tabFullNotation’, not counting the width of the stems
     themselves, expressed as a multiple of the default height of a
     staff-space in the traditional five-line staff.

‘duration-log’ (integer)
     The 2-log of the note head duration, i.e., ‘0’ = whole note, ‘1’ =
     half note, etc.

‘eccentricity’ (number)
     How asymmetrical to make a slur.  Positive means move the center to
     the right.

‘edge-height’ (pair)
     A pair of numbers specifying the heights of the vertical edges:
     ‘(LEFT-HEIGHT . RIGHT-HEIGHT)’.

‘edge-text’ (pair)
     A pair specifying the texts to be set at the edges: ‘(LEFT-TEXT .
     RIGHT-TEXT)’.

‘expand-limit’ (integer)
     Maximum number of measures expanded in church rests.

‘extra-dy’ (number)
     Slope glissandi this much extra.

‘extra-offset’ (pair of numbers)
     A pair representing an offset.  This offset is added just before
     outputting the symbol, so the typesetting engine is completely
     oblivious to it.  The values are measured in ‘staff-space’ units of
     the staff’s ‘StaffSymbol’.

‘extra-spacing-height’ (pair of numbers)
     In the horizontal spacing problem, we increase the height of each
     item by this amount (by adding the ‘car’ to the bottom of the item
     and adding the ‘cdr’ to the top of the item).  In order to make a
     grob infinitely high (to prevent the horizontal spacing problem
     from placing any other grobs above or below this grob), set this to
     ‘(-inf.0 . +inf.0)’.

‘extra-spacing-width’ (pair of numbers)
     In the horizontal spacing problem, we pad each item by this amount
     (by adding the ‘car’ on the left side of the item and adding the
     ‘cdr’ on the right side of the item).  In order to make a grob take
     up no horizontal space at all, set this to ‘(+inf.0 . -inf.0)’.

‘flag-count’ (number)
     The number of tremolo beams.

‘flag-style’ (symbol)
     The style of the flag to be used with ‘MetronomeMark’.  Available
     are ‘'modern-straight-flag’, ‘'old-straight-flag’, ‘flat-flag’,
     ‘mensural’ and ‘'default’

‘flat-positions’ (list)
     Flats in key signatures are placed within the specified ranges of
     staff-positions.  The general form is a list of pairs, with one
     pair for each type of clef, in order of the staff-position at which
     each clef places C: ‘(alto treble tenor soprano baritone
     mezzosoprano bass)’.  If the list contains a single element it
     applies for all clefs.  A single number in place of a pair sets
     accidentals within the octave ending at that staff-position.

‘font-encoding’ (symbol)
     The font encoding is the broadest category for selecting a font.
     Currently, only lilypond’s system fonts (Emmentaler) are using this
     property.  Available values are ‘fetaMusic’ (Emmentaler),
     ‘fetaBraces’, ‘fetaText’ (Emmentaler).

‘font-family’ (symbol)
     The font family is the broadest category for selecting text fonts.
     Options include: ‘sans’, ‘roman’.

‘font-name’ (string)
     Specifies a file name (without extension) of the font to load.
     This setting overrides selection using ‘font-family’, ‘font-series’
     and ‘font-shape’.

‘font-series’ (symbol)
     Select the series of a font.  Choices include ‘medium’, ‘bold’,
     ‘bold-narrow’, etc.

‘font-shape’ (symbol)
     Select the shape of a font.  Choices include ‘upright’, ‘italic’,
     ‘caps’.

‘font-size’ (number)
     The font size, compared to the ‘normal’ size.  ‘0’ is style-sheet’s
     normal size, ‘-1’ is smaller, ‘+1’ is bigger.  Each step of 1 is
     approximately 12% larger; 6 steps are exactly a factor 2 larger.
     If the context property ‘fontSize’ is set, its value is added to
     this before the glyph is printed.  Fractional values are allowed.

‘footnote’ (boolean)
     Should this be a footnote or in-note?

‘footnote-music’ (music)
     Music creating a footnote.

‘footnote-text’ (markup)
     A footnote for the grob.

‘force-hshift’ (number)
     This specifies a manual shift for notes in collisions.  The unit is
     the note head width of the first voice note.  This is used by *note
     (lilypond-internals)note-collision-interface::.

‘forced-spacing’ (number)
     Spacing forced between grobs, used in various ligature engravers.

‘fraction’ (fraction, as pair)
     Numerator and denominator of a time signature object.

‘french-beaming’ (boolean)
     Use French beaming style for this stem.  The stem stops at the
     innermost beams.

‘fret-diagram-details’ (list)
     An alist of detailed grob properties for fret diagrams.  Each alist
     entry consists of a ‘(PROPERTY . VALUE)’ pair.  The properties
     which can be included in ‘fret-diagram-details’ include the
     following:

        • ‘barre-type’ – Type of barre indication used.  Choices include
          ‘curved’, ‘straight’, and ‘none’.  Default ‘curved’.
        • ‘capo-thickness’ – Thickness of capo indicator, in multiples
          of fret-space.  Default value 0.5.
        • ‘dot-color’ – Color of dots.  Options include ‘black’ and
          ‘white’.  Default ‘black’.
        • ‘dot-label-font-mag’ – Magnification for font used to label
          fret dots.  Default value 1.
        • ‘dot-position’ – Location of dot in fret space.  Default 0.6
          for dots without labels, 0.95-‘dot-radius’ for dots with
          labels.
        • ‘dot-radius’ – Radius of dots, in terms of fret spaces.
          Default value 0.425 for labeled dots, 0.25 for unlabeled dots.
        • ‘finger-code’ – Code for the type of fingering indication
          used.  Options include ‘none’, ‘in-dot’, and ‘below-string’.
          Default ‘none’ for markup fret diagrams, ‘below-string’ for
          ‘FretBoards’ fret diagrams.
        • ‘fret-count’ – The number of frets.  Default 4.
        • ‘fret-label-custom-format’ – The format string to be used
          label the lowest fret number, when ‘number-type’ equals to
          ‘custom’.  Default "~a".
        • ‘fret-label-font-mag’ – The magnification of the font used to
          label the lowest fret number.  Default 0.5.
        • ‘fret-label-vertical-offset’ – The offset of the fret label
          from the center of the fret in direction parallel to strings.
          Default 0.
        • ‘fret-label-horizontal-offset’ – The offset of the fret label
          from the center of the fret in direction orthogonal to
          strings.  Default 0.
        • ‘paren-padding’ – The padding for the parenthesis.
          Default 0.05.
        • ‘label-dir’ – Side to which the fret label is attached.  ‘-1’,
          ‘LEFT’, or ‘DOWN’ for left or down; ‘1’, ‘RIGHT’, or ‘UP’ for
          right or up.  Default ‘RIGHT’.
        • ‘mute-string’ – Character string to be used to indicate muted
          string.  Default ‘"x"’.
        • ‘number-type’ – Type of numbers to use in fret label.  Choices
          include ‘roman-lower’, ‘roman-upper’, ‘arabic’ and ‘custom’.
          In the later case, the format string is supplied by the
          ‘fret-label-custom-format’ property.  Default ‘roman-lower’.
        • ‘open-string’ – Character string to be used to indicate open
          string.  Default ‘"o"’.
        • ‘orientation’ – Orientation of fret-diagram.  Options include
          ‘normal’, ‘landscape’, and ‘opposing-landscape’.  Default
          ‘normal’.
        • ‘string-count’ – The number of strings.  Default 6.
        • ‘string-label-font-mag’ – The magnification of the font used
          to label fingerings at the string, rather than in the dot.
          Default value 0.6 for ‘normal’ orientation, 0.5 for
          ‘landscape’ and ‘opposing-landscape’.
        • ‘string-thickness-factor’ – Factor for changing thickness of
          each string in the fret diagram.  Thickness of string K is
          given by ‘thickness’ * (1+‘string-thickness-factor’) ^ (K-1).
          Default 0.
        • ‘top-fret-thickness’ – The thickness of the top fret line, as
          a multiple of the standard thickness.  Default value 3.
        • ‘xo-font-magnification’ – Magnification used for mute and open
          string indicators.  Default value 0.5.
        • ‘xo-padding’ – Padding for open and mute indicators from top
          fret.  Default value 0.25.

‘full-length-padding’ (number)
     How much padding to use at the right side of a full-length tuplet
     bracket.

‘full-length-to-extent’ (boolean)
     Run to the extent of the column for a full-length tuplet bracket.

‘full-measure-extra-space’ (number)
     Extra space that is allocated at the beginning of a measure with
     only one note.  This property is read from the
     NonMusicalPaperColumn that begins the measure.

‘full-size-change’ (boolean)
     Don’t make a change clef smaller.

‘gap’ (dimension, in staff space)
     Size of a gap in a variable symbol.

‘gap-count’ (integer)
     Number of gapped beams for tremolo.

‘glissando-skip’ (boolean)
     Should this ‘NoteHead’ be skipped by glissandi?

‘glyph’ (string)
     A string determining what ‘style’ of glyph is typeset.  Valid
     choices depend on the function that is reading this property.

     In combination with (span) bar lines, it is a string resembling the
     bar line appearance in ASCII form.

‘glyph-name’ (string)
     The glyph name within the font.

     In the context of (span) bar lines, GLYPH-NAME represents a
     processed form of ‘glyph’, where decisions about line breaking etc.
     are already taken.

‘glyph-name-alist’ (list)
     An alist of key-string pairs.

‘graphical’ (boolean)
     Display in graphical (vs.  text) form.

‘grow-direction’ (direction)
     Crescendo or decrescendo?

‘hair-thickness’ (number)
     Thickness of the thin line in a bar line, expressed as a multiple
     of the default staff-line thickness (i.e.  the visual output is
     _not_ influenced by changes to ‘STAFF.StaffSymbol.thickness’).

‘harp-pedal-details’ (list)
     An alist of detailed grob properties for harp pedal diagrams.  Each
     alist entry consists of a ‘(PROPERTY . VALUE)’ pair.  The
     properties which can be included in harp-pedal-details include the
     following:

        • ‘box-offset’ – Vertical shift of the center of flat/sharp
          pedal boxes above/below the horizontal line.  Default
          value 0.8.
        • ‘box-width’ – Width of each pedal box.  Default value 0.4.
        • ‘box-height’ – Height of each pedal box.  Default value 1.0.
        • ‘space-before-divider’ – Space between boxes before the first
          divider (so that the diagram can be made symmetric).  Default
          value 0.8.
        • ‘space-after-divider’ – Space between boxes after the first
          divider.  Default value 0.8.
        • ‘circle-thickness’ – Thickness (in unit of the line-thickness)
          of the ellipse around circled pedals.  Default value 0.5.
        • ‘circle-x-padding’ – Padding in X direction of the ellipse
          around circled pedals.  Default value 0.15.
        • ‘circle-y-padding’ – Padding in Y direction of the ellipse
          around circled pedals.  Default value 0.2.

‘head-direction’ (direction)
     Are the note heads left or right in a semitie?

‘height’ (dimension, in staff space)
     Height of an object in ‘staff-space’ units.

‘height-limit’ (dimension, in staff space)
     Maximum slur height: The longer the slur, the closer it is to this
     height.

‘hide-tied-accidental-after-break’ (boolean)
     If set, an accidental that appears on a tied note after a line
     break will not be displayed.

‘horizon-padding’ (number)
     The amount to pad the axis along which a ‘Skyline’ is built for the
     ‘side-position-interface’.

‘horizontal-shift’ (integer)
     An integer that identifies ranking of ‘NoteColumn’s for horizontal
     shifting.  This is used by *note
     (lilypond-internals)note-collision-interface::.

‘horizontal-skylines’ (pair of skylines)
     Two skylines, one to the left and one to the right of this grob.

‘id’ (string)
     An id string for the grob.  Depending on the typestting backend
     being used, this id will be assigned to a group containing all of
     the stencils that comprise a given grob.  For example, in the svg
     backend, the string will be assigned to the ‘id’ attribute of a
     group (<g>) that encloses the stencils that comprise the grob.  In
     the Postscript backend, as there is no way to group items, the
     setting of the id property will have no effect.

‘ignore-ambitus’ (boolean)
     If set, don’t consider this notehead for ambitus calculation.

‘ignore-collision’ (boolean)
     If set, don’t do note collision resolution on this ‘NoteColumn’.

‘implicit’ (boolean)
     Is this an implicit bass figure?

‘inspect-index’ (integer)
     If debugging is set, set beam and slur configuration to this index,
     and print the respective scores.

‘inspect-quants’ (pair of numbers)
     If debugging is set, set beam and slur quants to this position, and
     print the respective scores.

‘keep-inside-line’ (boolean)
     If set, this column cannot have objects sticking into the margin.

‘kern’ (dimension, in staff space)
     The space between individual elements in any compound bar line,
     expressed as a multiple of the default staff-line thickness (i.e.
     the visual output is _not_ influenced by changes to
     ‘STAFF.StaffSymbol.thickness’).

‘knee’ (boolean)
     Is this beam kneed?

‘knee-spacing-correction’ (number)
     Factor for the optical correction amount for kneed beams.  Set
     between ‘0’ for no correction and ‘1’ for full correction.

‘knee-to-beam’ (boolean)
     Determines whether a tuplet number will be positioned next to a
     kneed beam.

‘labels’ (list)
     List of labels (symbols) placed on a column.

‘layer’ (integer)
     An integer which determines the order of printing objects.  Objects
     with the lowest value of layer are drawn first, then objects with
     progressively higher values are drawn, so objects with higher
     values overwrite objects with lower values.  By default most
     objects are assigned a layer value of 1.

‘ledger-extra’ (dimension, in staff space)
     Extra distance from staff line to draw ledger lines for.

‘ledger-line-thickness’ (pair of numbers)
     The thickness of ledger lines.  It is the sum of 2 numbers: The
     first is the factor for line thickness, and the second for staff
     space.  Both contributions are added.

‘ledger-positions’ (list)
     Vertical positions of ledger lines.  When set on a ‘StaffSymbol’
     grob it defines a repeating pattern of ledger lines and any
     parenthesized groups will always be shown together.

‘ledger-positions-function’ (any type)
     A quoted Scheme procedure that takes a ‘StaffSymbol’ grob and the
     vertical position of a note head as arguments and returns a list of
     ledger line positions.

‘left-bound-info’ (list)
     An alist of properties for determining attachments of spanners to
     edges.

‘left-padding’ (dimension, in staff space)
     The amount of space that is put left to an object (e.g., a lyric
     extender).

‘length’ (dimension, in staff space)
     User override for the stem length of unbeamed stems.

‘length-fraction’ (number)
     Multiplier for lengths.  Used for determining ledger lines and stem
     lengths.

‘line-break-penalty’ (number)
     Penalty for a line break at this column.  This affects the choices
     of the line breaker; it avoids a line break at a column with a
     positive penalty and prefers a line break at a column with a
     negative penalty.

‘line-break-permission’ (symbol)
     Instructs the line breaker on whether to put a line break at this
     column.  Can be ‘force’ or ‘allow’.

‘line-break-system-details’ (list)
     An alist of properties to use if this column is the start of a
     system.

‘line-count’ (integer)
     The number of staff lines.

‘line-positions’ (list)
     Vertical positions of staff lines.

‘line-thickness’ (number)
     For slurs and ties, this is the diameter of the virtual “pen” that
     draws the two arcs of the curve’s outline, which intersect at the
     endpoints.  This property is expressed as a multiple of the current
     staff-line thickness (i.e.  the visual output is influenced by
     changes to ‘STAFF.StaffSymbol.thickness’).

‘long-text’ (markup)
     Text markup.  See *note (lilypond-notation)Formatting text::.

‘max-beam-connect’ (integer)
     Maximum number of beams to connect to beams from this stem.
     Further beams are typeset as beamlets.

‘maximum-gap’ (number)
     Maximum value allowed for ‘gap’ property.

‘measure-count’ (integer)
     The number of measures for a multi-measure rest.

‘measure-length’ (moment)
     Length of a measure.  Used in some spacing situations.

‘merge-differently-dotted’ (boolean)
     Merge note heads in collisions, even if they have a different
     number of dots.  This is normal notation for some types of
     polyphonic music.

     ‘merge-differently-dotted’ only applies to opposing stem directions
     (i.e., voice 1 & 2).

‘merge-differently-headed’ (boolean)
     Merge note heads in collisions, even if they have different note
     heads.  The smaller of the two heads is rendered invisible.  This
     is used in polyphonic guitar notation.  The value of this setting
     is used by *note (lilypond-internals)note-collision-interface::.

     ‘merge-differently-headed’ only applies to opposing stem directions
     (i.e., voice 1 & 2).

‘minimum-distance’ (dimension, in staff space)
     Minimum distance between rest and notes or beam.

‘minimum-length’ (dimension, in staff space)
     Try to make a spanner at least this long, normally in the
     horizontal direction.  This requires an appropriate callback for
     the ‘springs-and-rods’ property.  If added to a ‘Tie’, this sets
     the minimum distance between noteheads.

‘minimum-length-after-break’ (dimension, in staff space)
     If set, try to make a broken spanner starting a line this long.
     This requires an appropriate callback for the ‘springs-and-rods’
     property.  If added to a ‘Tie’, this sets the minimum distance to
     the notehead.

‘minimum-length-fraction’ (number)
     Minimum length of ledger line as fraction of note head size.

‘minimum-space’ (dimension, in staff space)
     Minimum distance that the victim should move (after padding).

‘minimum-X-extent’ (pair of numbers)
     Minimum size of an object in X dimension, measured in ‘staff-space’
     units.

‘minimum-Y-extent’ (pair of numbers)
     Minimum size of an object in Y dimension, measured in ‘staff-space’
     units.

‘neutral-direction’ (direction)
     Which direction to take in the center of the staff.

‘neutral-position’ (number)
     Position (in half staff spaces) where to flip the direction of
     custos stem.

‘next’ (graphical (layout) object)
     Object that is next relation (e.g., the lyric syllable following an
     extender).

‘no-alignment’ (boolean)
     If set, don’t place this grob in a ‘VerticalAlignment’; rather,
     place it using its own ‘Y-offset’ callback.

‘no-ledgers’ (boolean)
     If set, don’t draw ledger lines on this object.

‘no-stem-extend’ (boolean)
     If set, notes with ledger lines do not get stems extending to the
     middle staff line.

‘non-break-align-symbols’ (list)
     A list of symbols that determine which NON-break-aligned interfaces
     to align this to.

‘non-default’ (boolean)
     Set for manually specified clefs.

‘non-musical’ (boolean)
     True if the grob belongs to a ‘NonMusicalPaperColumn’.

‘nonstaff-nonstaff-spacing’ (list)
     The spacing alist controlling the distance between the current
     non-staff line and the next non-staff line in the direction of
     ‘staff-affinity’, if both are on the same side of the related
     staff, and ‘staff-affinity’ is either ‘UP’ or ‘DOWN’.  See
     ‘staff-staff-spacing’ for a description of the alist structure.

‘nonstaff-relatedstaff-spacing’ (list)
     The spacing alist controlling the distance between the current
     non-staff line and the nearest staff in the direction of
     ‘staff-affinity’, if there are no non-staff lines between the two,
     and ‘staff-affinity’ is either ‘UP’ or ‘DOWN’.  If ‘staff-affinity’
     is ‘CENTER’, then ‘nonstaff-relatedstaff-spacing’ is used for the
     nearest staves on _both_ sides, even if other non-staff lines
     appear between the current one and either of the staves.  See
     ‘staff-staff-spacing’ for a description of the alist structure.

‘nonstaff-unrelatedstaff-spacing’ (list)
     The spacing alist controlling the distance between the current
     non-staff line and the nearest staff in the opposite direction from
     ‘staff-affinity’, if there are no other non-staff lines between the
     two, and ‘staff-affinity’ is either ‘UP’ or ‘DOWN’.  See
     ‘staff-staff-spacing’ for a description of the alist structure.

‘normalized-endpoints’ (pair)
     Represents left and right placement over the total spanner, where
     the width of the spanner is normalized between 0 and 1.

‘note-collision-threshold’ (dimension, in staff space)
     Simultaneous notes that are this close or closer in units of
     ‘staff-space’ will be identified as vertically colliding.  Used by
     ‘Stem’ grobs for notes in the same voice, and ‘NoteCollision’ grobs
     for notes in different voices.  Default value 1.

‘note-names’ (vector)
     Vector of strings containing names for easy-notation note heads.

‘number-type’ (symbol)
     Numbering style.  Choices include ‘roman-lower’, ‘roman-upper’ and
     ‘arabic’.

‘outside-staff-horizontal-padding’ (number)
     By default, an outside-staff-object can be placed so that is it
     very close to another grob horizontally.  If this property is set,
     the outside-staff-object is raised so that it is not so close to
     its neighbor.

‘outside-staff-padding’ (number)
     The padding to place between grobs when spacing according to
     ‘outside-staff-priority’.  Two grobs with different
     ‘outside-staff-padding’ values have the larger value of padding
     between them.

‘outside-staff-placement-directive’ (symbol)
     One of four directives telling how outside staff objects should be
     placed.
        • ‘left-to-right-greedy’ – Place each successive grob from left
          to right.
        • ‘left-to-right-polite’ – Place a grob from left to right only
          if it does not potentially overlap with another grob that has
          been placed on a pass through a grob array.  If there is
          overlap, do another pass to determine placement.
        • ‘right-to-left-greedy’ – Same as ‘left-to-right-greedy’, but
          from right to left.
        • ‘right-to-left-polite’ – Same as ‘left-to-right-polite’, but
          from right to left.

‘outside-staff-priority’ (number)
     If set, the grob is positioned outside the staff in such a way as
     to avoid all collisions.  In case of a potential collision, the
     grob with the smaller ‘outside-staff-priority’ is closer to the
     staff.

‘packed-spacing’ (boolean)
     If set, the notes are spaced as tightly as possible.

‘padding’ (dimension, in staff space)
     Add this much extra space between objects that are next to each
     other.

‘padding-pairs’ (list)
     An alist mapping ‘(NAME . NAME)’ to distances.

‘page-break-penalty’ (number)
     Penalty for page break at this column.  This affects the choices of
     the page breaker; it avoids a page break at a column with a
     positive penalty and prefers a page break at a column with a
     negative penalty.

‘page-break-permission’ (symbol)
     Instructs the page breaker on whether to put a page break at this
     column.  Can be ‘force’ or ‘allow’.

‘page-turn-penalty’ (number)
     Penalty for a page turn at this column.  This affects the choices
     of the page breaker; it avoids a page turn at a column with a
     positive penalty and prefers a page turn at a column with a
     negative penalty.

‘page-turn-permission’ (symbol)
     Instructs the page breaker on whether to put a page turn at this
     column.  Can be ‘force’ or ‘allow’.

‘parent-alignment-X’ (number)
     Specify on which point of the parent the object is aligned.  The
     value ‘-1’ means aligned on parent’s left edge, ‘0’ on center, and
     ‘1’ right edge, in X direction.  Other numerical values may also be
     specified - the unit is half the parent’s width.  If unset, the
     value from ‘self-alignment-X’ property will be used.

‘parent-alignment-Y’ (number)
     Like ‘parent-alignment-X’ but for the Y axis.

‘parenthesis-friends’ (list)
     A list of Grob types, as symbols.  When parentheses enclose a Grob
     that has ’parenthesis-friends, the parentheses widen to include any
     child Grobs with type among ’parenthesis-friends.

‘parenthesized’ (boolean)
     Parenthesize this grob.

‘positions’ (pair of numbers)
     Pair of staff coordinates ‘(LEFT . RIGHT)’, where both LEFT and
     RIGHT are in ‘staff-space’ units of the current staff.  For slurs,
     this value selects which slur candidate to use; if extreme
     positions are requested, the closest one is taken.

‘prefer-dotted-right’ (boolean)
     For note collisions, prefer to shift dotted up-note to the right,
     rather than shifting just the dot.

‘protrusion’ (number)
     In an arpeggio bracket, the length of the horizontal edges.

‘ratio’ (number)
     Parameter for slur shape.  The higher this number, the quicker the
     slur attains its ‘height-limit’.

‘remove-empty’ (boolean)
     If set, remove group if it contains no interesting items.

‘remove-first’ (boolean)
     Remove the first staff of an orchestral score?

‘remove-layer’ (integer)
     The ‘Keep_alive_together_engraver’ removes all ‘VerticalAxisGroup’
     grobs with a ‘remove-layer’ larger than the smallest retained
     ‘remove-layer’.  Set to ‘#f’ to make a layer invisible to the
     ‘Keep_alive_together_engraver’, set to ‘'()’ to have it not
     participate in the layering decisions.

‘replacement-alist’ (list)
     Alist of strings.  The key is a string of the pattern to be
     replaced.  The value is a string of what should be displayed.
     Useful for ligatures.

‘restore-first’ (boolean)
     Print a natural before the accidental.

‘rhythmic-location’ (rhythmic location)
     Where (bar number, measure position) in the score.

‘right-bound-info’ (list)
     An alist of properties for determining attachments of spanners to
     edges.

‘right-padding’ (dimension, in staff space)
     Space to insert on the right side of an object (e.g., between note
     and its accidentals).

‘rotation’ (list)
     Number of degrees to rotate this object, and what point to rotate
     around.  For example, ‘'(45 0 0)’ rotates by 45 degrees around the
     center of this object.

‘round-up-exceptions’ (list)
     A list of pairs where car is the numerator and cdr the denominator
     of a moment.  Each pair in this list means that the multi-measure
     rests of the corresponding length will be rounded up to the longer
     rest.  See ROUND-UP-TO-LONGER-REST.

‘round-up-to-longer-rest’ (boolean)
     Displays the longer multi-measure rest when the length of a measure
     is between two values of ‘usable-duration-logs’.  For example,
     displays a breve instead of a whole in a 3/2 measure.

‘rounded’ (boolean)
     Decide whether lines should be drawn rounded or not.

‘same-direction-correction’ (number)
     Optical correction amount for stems that are placed in tight
     configurations.  This amount is used for stems with the same
     direction to compensate for note head to stem distance.

‘script-priority’ (number)
     A key for determining the order of scripts in a stack, by being
     added to the position of the script in the user input, the sum
     being the overall priority.  Smaller means closer to the head.

‘segno-kern’ (number)
     The space between the two thin lines of the segno bar line symbol,
     expressed as a multiple of the default staff-line thickness (i.e.
     the visual output is _not_ influenced by changes to
     ‘STAFF.StaffSymbol.thickness’).

‘self-alignment-X’ (number)
     Specify alignment of an object.  The value ‘-1’ means left aligned,
     ‘0’ centered, and ‘1’ right-aligned in X direction.  Other
     numerical values may also be specified - the unit is half the
     object width.

‘self-alignment-Y’ (number)
     Like ‘self-alignment-X’ but for the Y axis.

‘shape’ (symbol)
     This setting determines what shape a grob has.  Valid choices
     depend on the ‘stencil’ callback reading this property.

‘sharp-positions’ (list)
     Sharps in key signatures are placed within the specified ranges of
     staff-positions.  The general form is a list of pairs, with one
     pair for each type of clef, in order of the staff-position at which
     each clef places C: ‘(alto treble tenor soprano baritone
     mezzosoprano bass)’.  If the list contains a single element it
     applies for all clefs.  A single number in place of a pair sets
     accidentals within the octave ending at that staff-position.

‘shorten-pair’ (pair of numbers)
     The lengths to shorten a text-spanner on both sides, for example a
     pedal bracket.  Positive values shorten the text-spanner, while
     negative values lengthen it.

‘shortest-duration-space’ (number)
     Start with this multiple of ‘spacing-increment’ space for the
     shortest duration.  See also *note
     (lilypond-internals)spacing-spanner-interface::.

‘shortest-playing-duration’ (moment)
     The duration of the shortest note playing here.

‘shortest-starter-duration’ (moment)
     The duration of the shortest note that starts here.

‘side-axis’ (number)
     If the value is ‘X’ (or equivalently ‘0’), the object is placed
     horizontally next to the other object.  If the value is ‘Y’ or ‘1’,
     it is placed vertically.

‘side-relative-direction’ (direction)
     Multiply direction of ‘direction-source’ with this to get the
     direction of this object.

‘simple-Y’ (boolean)
     Should the Y placement of a spanner disregard changes in system
     heights?

‘size’ (number)
     The ratio of the size of the object to its default size.

‘skip-quanting’ (boolean)
     Should beam quanting be skipped?

‘skyline-horizontal-padding’ (number)
     For determining the vertical distance between two staves, it is
     possible to have a configuration which would result in a tight
     interleaving of grobs from the top staff and the bottom staff.  The
     larger this parameter is, the farther apart the staves are placed
     in such a configuration.

‘skyline-vertical-padding’ (number)
     The amount by which the left and right skylines of a column are
     padded vertically, beyond the ‘Y-extent’s and
     ‘extra-spacing-height’s of the constituent grobs in the column.
     Increase this to prevent interleaving of grobs from adjacent
     columns.

‘slash-negative-kern’ (number)
     The space to remove between slashes in percent repeat glyphs.
     Larger values bring the two elements closer together.

‘slope’ (number)
     The slope of this object.

‘slur-padding’ (number)
     Extra distance between slur and script.

‘snap-radius’ (number)
     The maximum distance between two objects that will cause them to
     snap to alignment along an axis.

‘space-alist’ (list)
     An alist that specifies distances from this grob to other breakable
     items, using the format:

          '((BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
            (BREAK-ALIGN-SYMBOL . (SPACING-STYLE . SPACE))
            ...)

     Standard choices for ‘BREAK-ALIGN-SYMBOL’ are listed in *note
     (lilypond-internals)break-alignment-interface::.  Additionally,
     three special break-align symbols available to ‘space-alist’ are:

          ‘first-note’
               used when the grob is just left of the first note on a
               line

          ‘next-note’
               used when the grob is just left of any other note; if not
               set, the value of ‘first-note’ gets used

          ‘right-edge’
               used when the grob is the last item on the line (only
               compatible with the ‘extra-space’ spacing style)

     Choices for ‘SPACING-STYLE’ are:

          ‘extra-space’
               Put this much space between the two grobs.  The space is
               stretchable when paired with ‘first-note’ or ‘next-note’;
               otherwise it is fixed.

          ‘minimum-space’
               Put at least this much space between the left sides of
               both grobs, without allowing them to collide.  The space
               is stretchable when paired with ‘first-note’ or
               ‘next-note’; otherwise it is fixed.  Not compatible with
               ‘right-edge’.

          ‘fixed-space’
               Only compatible with ‘first-note’ and ‘next-note’.  Put
               this much fixed space between the grob and the note.

          ‘minimum-fixed-space’
               Only compatible with ‘first-note’ and ‘next-note’.  Put
               at least this much fixed space between the left side of
               the grob and the left side of the note, without allowing
               them to collide.

          ‘semi-fixed-space’
               Only compatible with ‘first-note’ and ‘next-note’.  Put
               this much space between the grob and the note, such that
               half of the space is fixed and half is stretchable.

     Rules for this spacing are much more complicated than this.  See
     [Wanske] page 126–134, [Ross] page 143–147.

‘space-to-barline’ (boolean)
     If set, the distance between a note and the following non-musical
     column will be measured to the bar line instead of to the beginning
     of the non-musical column.  If there is a clef change followed by a
     bar line, for example, this means that we will try to space the
     non-musical column as though the clef is not there.

‘spacing-increment’ (dimension, in staff space)
     The unit of length for note-spacing.  Typically, the width of a
     note head.  See also *note
     (lilypond-internals)spacing-spanner-interface::.

‘spacing-pair’ (pair)
     A pair of alignment symbols which set an object’s spacing relative
     to its left and right ‘BreakAlignment’s.

     For example, a ‘MultiMeasureRest’ will ignore prefatory items at
     its bounds (i.e., clefs, key signatures and time signatures) using
     the following override:

          \override MultiMeasureRest
            #'spacing-pair = #'(staff-bar . staff-bar)

‘spanner-id’ (string)
     An identifier to distinguish concurrent spanners.

‘springs-and-rods’ (boolean)
     Dummy variable for triggering spacing routines.

‘stacking-dir’ (direction)
     Stack objects in which direction?

‘staff-affinity’ (direction)
     The direction of the staff to use for spacing the current non-staff
     line.  Choices are ‘UP’, ‘DOWN’, and ‘CENTER’.  If ‘CENTER’, the
     non-staff line will be placed equidistant between the two nearest
     staves on either side, unless collisions or other spacing
     constraints prevent this.  Setting ‘staff-affinity’ for a staff
     causes it to be treated as a non-staff line.  Setting
     ‘staff-affinity’ to ‘#f’ causes a non-staff line to be treated as a
     staff.

‘staff-padding’ (dimension, in staff space)
     Maintain this much space between reference points and the staff.
     Its effect is to align objects of differing sizes (like the
     dynamics p and f) on their baselines.

‘staff-position’ (number)
     Vertical position, measured in half staff spaces, counted from the
     middle line.

‘staff-space’ (dimension, in staff space)
     Amount of space between staff lines, expressed in global
     ‘staff-space’.

‘staff-staff-spacing’ (list)
     When applied to a staff-group’s ‘StaffGrouper’ grob, this spacing
     alist controls the distance between consecutive staves within the
     staff-group.  When applied to a staff’s ‘VerticalAxisGroup’ grob,
     it controls the distance between the staff and the nearest staff
     below it in the same system, replacing any settings inherited from
     the ‘StaffGrouper’ grob of the containing staff-group, if there is
     one.  This property remains in effect even when non-staff lines
     appear between staves.  The alist can contain the following keys:

        • ‘basic-distance’ – the vertical distance, measured in
          staff-spaces, between the reference points of the two items
          when no collisions would result, and no stretching or
          compressing is in effect.

        • ‘minimum-distance’ – the smallest allowable vertical distance,
          measured in staff-spaces, between the reference points of the
          two items, when compressing is in effect.

        • ‘padding’ – the minimum required amount of unobstructed
          vertical whitespace between the bounding boxes (or skylines)
          of the two items, measured in staff-spaces.

        • ‘stretchability’ – a unitless measure of the dimension’s
          relative propensity to stretch.  If zero, the distance will
          not stretch (unless collisions would result).

‘staffgroup-staff-spacing’ (list)
     The spacing alist controlling the distance between the last staff
     of the current staff-group and the staff just below it in the same
     system, even if one or more non-staff lines exist between the two
     staves.  If the ‘staff-staff-spacing’ property of the staff’s
     ‘VerticalAxisGroup’ grob is set, that is used instead.  See
     ‘staff-staff-spacing’ for a description of the alist structure.

‘stem-attachment’ (pair of numbers)
     An ‘(X . Y)’ pair where the stem attaches to the notehead.

‘stem-begin-position’ (number)
     User override for the begin position of a stem.

‘stem-spacing-correction’ (number)
     Optical correction amount for stems that are placed in tight
     configurations.  For opposite directions, this amount is the
     correction for two normal sized stems that overlap completely.

‘stemlet-length’ (number)
     How long should be a stem over a rest?

‘stencil’ (stencil)
     The symbol to print.

‘stencils’ (list)
     Multiple stencils, used as intermediate value.

‘strict-grace-spacing’ (boolean)
     If set, main notes are spaced normally, then grace notes are put
     left of the musical columns for the main notes.

‘strict-note-spacing’ (boolean)
     If set, unbroken columns with non-musical material (clefs, bar
     lines, etc.)  are not spaced separately, but put before musical
     columns.

‘stroke-style’ (string)
     Set to ‘"grace"’ to turn stroke through flag on.

‘style’ (symbol)
     This setting determines in what style a grob is typeset.  Valid
     choices depend on the ‘stencil’ callback reading this property.

‘text’ (markup)
     Text markup.  See *note (lilypond-notation)Formatting text::.

‘text-direction’ (direction)
     This controls the ordering of the words.  The default ‘RIGHT’ is
     for roman text.  Arabic or Hebrew should use ‘LEFT’.

‘thick-thickness’ (number)
     Thickness of the thick line in a bar line, expressed as a multiple
     of the default staff-line thickness (i.e.  the visual output is
     _not_ influenced by changes to ‘STAFF.StaffSymbol.thickness’).

‘thickness’ (number)
     For grobs made up of lines, this is the thickness of the line.  For
     slurs and ties, this is the distance between the two arcs of the
     curve’s outline at its thickest point, not counting the diameter of
     the virtual “pen” that draws the arcs.  This property is expressed
     as a multiple of the current staff-line thickness (i.e.  the visual
     output is influenced by changes to ‘STAFF.StaffSymbol.thickness’).

‘tie-configuration’ (list)
     List of ‘(POSITION . DIR)’ pairs, indicating the desired tie
     configuration, where POSITION is the offset from the center of the
     staff in staff space and DIR indicates the direction of the tie
     (‘1’=>up, ‘-1’=>down, ‘0’=>center).  A non-pair entry in the list
     causes the corresponding tie to be formatted automatically.

‘to-barline’ (boolean)
     If true, the spanner will stop at the bar line just before it would
     otherwise stop.

‘toward-stem-shift’ (number)
     Amount by which scripts are shifted toward the stem if their
     direction coincides with the stem direction.  ‘0.0’ means centered
     on the note head (the default position of most scripts); ‘1.0’
     means centered on the stem.  Interpolated values are possible.

‘toward-stem-shift-in-column’ (number)
     Amount by which a script is shifted toward the stem if its
     direction coincides with the stem direction and it is associated
     with a ‘ScriptColumn’ object.  ‘0.0’ means centered on the note
     head (the default position of most scripts); ‘1.0’ means centered
     on the stem.  Interpolated values are possible.

‘transparent’ (boolean)
     This makes the grob invisible.

‘uniform-stretching’ (boolean)
     If set, items stretch proportionally to their natural separation
     based on durations.  This looks better in complex polyphonic
     patterns.

‘usable-duration-logs’ (list)
     List of ‘duration-log’s that can be used in typesetting the grob.

‘use-skylines’ (boolean)
     Should skylines be used for side positioning?

‘used’ (boolean)
     If set, this spacing column is kept in the spacing problem.

‘vertical-skylines’ (pair of skylines)
     Two skylines, one above and one below this grob.

‘voiced-position’ (number)
     The staff-position of a voiced ‘Rest’, negative if the rest has
     ‘direction’ ‘DOWN’.

‘when’ (moment)
     Global time step associated with this column.

‘whiteout’ (boolean-or-number)
     If a number or true, the grob is printed over a white background to
     white-out underlying material, if the grob is visible.  A number
     indicates how far the white background extends beyond the bounding
     box of the grob as a multiple of the staff-line thickness.  The
     shape of the background is determined by ‘whiteout-style’.  Usually
     ‘#f’ by default.

‘whiteout-style’ (symbol)
     Determines the shape of the ‘whiteout’ background.  Available are
     ‘'outline’, ‘'rounded-box’, and the default ‘'box’.

‘width’ (dimension, in staff space)
     The width of a grob measured in staff space.

‘word-space’ (dimension, in staff space)
     Space to insert between words in texts.

‘X-align-on-main-noteheads’ (boolean)
     If true, this grob will ignore suspended noteheads when aligning
     itself on NoteColumn.

‘X-extent’ (pair of numbers)
     Extent (size) in the X direction, measured in staff-space units,
     relative to object’s reference point.

‘X-offset’ (number)
     The horizontal amount that this object is moved relative to its
     X-parent.

‘X-positions’ (pair of numbers)
     Pair of X staff coordinates of a spanner in the form ‘(LEFT .
     RIGHT)’, where both LEFT and RIGHT are in ‘staff-space’ units of
     the current staff.

‘Y-extent’ (pair of numbers)
     Extent (size) in the Y direction, measured in staff-space units,
     relative to object’s reference point.

‘Y-offset’ (number)
     The vertical amount that this object is moved relative to its
     Y-parent.

‘zigzag-length’ (dimension, in staff space)
     The length of the lines of a zigzag, relative to ‘zigzag-width’.  A
     value of ‘1’ gives 60-degree zigzags.

‘zigzag-width’ (dimension, in staff space)
     The width of one zigzag squiggle.  This number is adjusted slightly
     so that the glissando line can be constructed from a whole number
     of squiggles.


File: lilypond-notation.info,  Node: Available music functions,  Next: Context modification identifiers,  Prev: Layout properties,  Up: Notation manual tables

A.19 Available music functions
==============================

‘absolute’ [music] - MUSIC (music)
     Make MUSIC absolute.  This does not actually change the music
     itself but rather hides it from surrounding ‘\relative’ and
     ‘\fixed’ commands.
‘acciaccatura’ [music] - MUSIC (music)
     Create an acciaccatura from the following music expression
‘accidentalStyle’ [music] - STYLE (symbol list)
     Set accidental style to symbol list STYLE in the form
     ‘piano-cautionary’.  If STYLE has a form like
     ‘Staff.piano-cautionary’, the settings are applied to that context.
     Otherwise, the context defaults to ‘Staff’, except for piano
     styles, which use ‘GrandStaff’ as a context.
‘addChordShape’ [void] - KEY-SYMBOL (symbol) TUNING (pair) SHAPE-DEFINITION (string or pair)
     Add chord shape SHAPE-DEFINITION to the CHORD-SHAPE-TABLE hash with
     the key ‘(cons KEY-SYMBOL TUNING)’.
‘addInstrumentDefinition’ [void] - NAME (string) LST (list)
     Create instrument NAME with properties LIST.
‘addQuote’ [void] - NAME (string) MUSIC (music)
     Define MUSIC as a quotable music expression named NAME
‘afterGrace’ [music] - MAIN (music) GRACE (music)
     Create GRACE note(s) after a MAIN music expression.
‘allowPageTurn’ [music]
     Allow a page turn.  May be used at toplevel (ie between scores or
     markups), or inside a score.
‘allowVoltaHook’ [void] - BAR (string)
     (undocumented; fixme)
‘alterBroken’ [music] - PROPERTY (key list or symbol) ARG (list) ITEM (key list or music)
     Override PROPERTY for pieces of broken spanner ITEM with values
     ARG.  ITEM may either be music in the form of a starting spanner
     event, or a symbol list in the form ‘Context.Grob’ or just ‘Grob’.
     Iff ITEM is in the form of a spanner event, PROPERTY may also have
     the form ‘Grob.property’ for specifying a directed tweak.
‘appendToTag’ [music] - TAG (symbol) MORE (music) MUSIC (music)
     Append MORE to the ‘elements’ of all music expressions in MUSIC
     that are tagged with TAG.
‘applyContext’ [music] - PROC (procedure)
     Modify context properties with Scheme procedure PROC.
‘applyMusic’ [music] - FUNC (procedure) MUSIC (music)
     Apply procedure FUNC to MUSIC.
‘applyOutput’ [music] - TARGET (symbol list or symbol) PROC (procedure)
     Apply function ‘proc’ to every layout object matched by TARGET
     which takes the form ‘Context’ or ‘Context.Grob’.
‘appoggiatura’ [music] - MUSIC (music)
     Create an appoggiatura from MUSIC
‘assertBeamQuant’ [music] - L (pair) R (pair)
     Testing function: check whether the beam quants L and R are correct
‘assertBeamSlope’ [music] - COMP (procedure)
     Testing function: check whether the slope of the beam is the same
     as ‘comp’
‘autochange’ [music] - PITCH [pitch] CLEF-1 [context modification] CLEF-2 [context modification] MUSIC (music)
     Make voices that switch between staves automatically.  As an option
     the pitch where to switch staves may be specified.  The clefs for
     the staves are optional as well.  Setting clefs works only for
     implicitly instantiated staves.
‘balloonGrobText’ [music] - GROB-NAME (symbol) OFFSET (pair of numbers) TEXT (markup)
     Attach TEXT to GROB-NAME at offset OFFSET (use like ‘\once’)
‘balloonText’ [post event] - OFFSET (pair of numbers) TEXT (markup)
     Attach TEXT at OFFSET (use like ‘\tweak’)
‘bar’ [music] - TYPE (string)
     Insert a bar line of type TYPE
‘barNumberCheck’ [music] - N (integer)
     Print a warning if the current bar number is not N.
‘beamExceptions’ (any type) - MUSIC (music)
     Extract a value suitable for setting ‘Timing.beamExceptions’ from
     the given pattern with explicit beams in MUSIC.  A bar check ‘|’
     has to be used between bars of patterns in order to reset the
     timing.
‘bendAfter’ [post event] - DELTA (real number)
     Create a fall or doit of pitch interval DELTA.
‘bookOutputName’ [void] - NEWFILENAME (string)
     Direct output for the current book block to NEWFILENAME.
‘bookOutputSuffix’ [void] - NEWSUFFIX (string)
     Set the output filename suffix for the current book block to
     NEWSUFFIX.
‘breathe’ [music]
     Insert a breath mark.
‘chordRepeats’ [music] - EVENT-TYPES [list] MUSIC (music)
     Walk through MUSIC putting the notes of the previous chord into
     repeat chords, as well as an optional list of EVENT-TYPES such as
     ‘#'(string-number-event)’.
‘clef’ [music] - TYPE (string)
     Set the current clef to TYPE.
‘compoundMeter’ [music] - ARGS (pair)
     Create compound time signatures.  The argument is a Scheme list of
     lists.  Each list describes one fraction, with the last entry being
     the denominator, while the first entries describe the summands in
     the enumerator.  If the time signature consists of just one
     fraction, the list can be given directly, i.e.  not as a list
     containing a single list.  For example, a time signature of (3+1)/8
     + 2/4 would be created as ‘\compoundMeter #'((3 1 8) (2 4))’, and a
     time signature of (3+2)/8 as ‘\compoundMeter #'((3 2 8))’ or
     shorter ‘\compoundMeter #'(3 2 8)’.
‘compressMMRests’ [music] - MUSIC (music)
     Remove the empty bars created by multi-measure rests, leaving just
     the first bar containing the MM rest itself.
‘crossStaff’ [music] - NOTES (music)
     Create cross-staff stems
‘cueClef’ [music] - TYPE (string)
     Set the current cue clef to TYPE.
‘cueClefUnset’ [music]
     Unset the current cue clef.
‘cueDuring’ [music] - WHAT (string) DIR (direction) MAIN-MUSIC (music)
     Insert contents of quote WHAT corresponding to MAIN-MUSIC, in a
     CueVoice oriented by DIR.
‘cueDuringWithClef’ [music] - WHAT (string) DIR (direction) CLEF (string) MAIN-MUSIC (music)
     Insert contents of quote WHAT corresponding to MAIN-MUSIC, in a
     CueVoice oriented by DIR.
‘deadNote’ [music] - NOTE (music)
     Print NOTE with a cross-shaped note head.
‘defaultNoteHeads’ [music]
     Revert to the default note head style.
‘defineBarLine’ [void] - BAR (string) GLYPH-LIST (list)
     Define bar line settings for bar line BAR.  The list GLYPH-LIST
     must have three entries which define the appearance at the end of
     line, at the beginning of the next line, and the span bar,
     respectively.
‘displayLilyMusic’ [music] - PORT [output port] MUSIC (music)
     Display the LilyPond input representation of MUSIC to PORT,
     defaulting to the console.
‘displayMusic’ [music] - PORT [output port] MUSIC (music)
     Display the internal representation of MUSIC to PORT, default to
     the console.
‘displayScheme’ (any type) - PORT [output port] EXPR (any type)
     Display the internal representation of EXPR to PORT, default to the
     console.
‘endSpanners’ [music] - MUSIC (music)
     Terminate the next spanner prematurely after exactly one note
     without the need of a specific end spanner.
‘eventChords’ [music] - MUSIC (music)
     Compatibility function wrapping ‘EventChord’ around isolated
     rhythmic events occuring since version 2.15.28, after expanding
     repeat chords ‘q’.
‘featherDurations’ [music] - FACTOR (moment) ARGUMENT (music)
     Adjust durations of music in ARGUMENT by rational FACTOR.
‘finger’ [post event] - FINGER (number or markup)
     Apply FINGER as a fingering indication.
‘fixed’ [music] - PITCH (pitch) MUSIC (music)
     Use the octave of PITCH as the default octave for MUSIC.
‘footnote’ [music] - MARK [markup] OFFSET (pair of numbers) FOOTNOTE (markup) ITEM (symbol list or music)
     Make the markup FOOTNOTE a footnote on ITEM.  The footnote is
     marked with a markup MARK moved by OFFSET with respect to the
     marked music.

     If MARK is not given or specified as \DEFAULT, it is replaced by an
     automatically generated sequence number.  If ITEM is a symbol list
     of form ‘Grob’ or ‘Context.Grob’, then grobs of that type will be
     marked at the current time step in the given context (default
     ‘Bottom’).

     If ITEM is music, the music will get a footnote attached to a grob
     immediately attached to the event, like \TWEAK does.  For attaching
     a footnote to an _indirectly_ caused grob, write
     ‘\single\footnote’, use ITEM to specify the grob, and follow it
     with the music to annotate.

     Like with ‘\tweak’, if you use a footnote on a following
     post-event, the ‘\footnote’ command itself needs to be attached to
     the preceding note or rest as a post-event with ‘-’.
‘grace’ [music] - MUSIC (music)
     Insert MUSIC as grace notes.
‘grobdescriptions’ (any type) - DESCRIPTIONS (list)
     Create a context modification from DESCRIPTIONS, a list in the
     format of ‘all-grob-descriptions’.
‘harmonicByFret’ [music] - FRET (number) MUSIC (music)
     Convert MUSIC into mixed harmonics; the resulting notes resemble
     harmonics played on a fretted instrument by touching the strings at
     FRET.
‘harmonicByRatio’ [music] - RATIO (number) MUSIC (music)
     Convert MUSIC into mixed harmonics; the resulting notes resemble
     harmonics played on a fretted instrument by touching the strings at
     the point given through RATIO.
‘harmonicNote’ [music] - NOTE (music)
     Print NOTE with a diamond-shaped note head.
‘harmonicsOn’ [music]
     Set the default note head style to a diamond-shaped style.
‘hide’ [music] - ITEM (symbol list or music)
     Set ITEM’s ‘transparent’ property to ‘#t’, making it invisible
     while still retaining its dimensions.

     If ITEM is a symbol list of form ‘GrobName’ or ‘Context.GrobName’,
     the result is an override for the grob name specified by it.  If
     ITEM is a music expression, the result is the same music expression
     with an appropriate tweak applied to it.
‘incipit’ [music] - INCIPIT-MUSIC (music)
     Output INCIPIT-MUSIC before the main staff as an indication of its
     appearance in the original music.
‘inherit-acceptability’ [void] - TO (symbol) FROM (symbol)
     When used in an output definition, will modify all context
     definitions such that context TO is accepted as a child by all
     contexts that also accept FROM.
‘inStaffSegno’ [music]
     Put the segno variant ’varsegno’ at this position into the staff,
     compatible with the repeat command.
‘instrumentSwitch’ [music] - NAME (string)
     Switch instrument to NAME, which must be predefined with
     ‘\addInstrumentDefinition’.
‘inversion’ [music] - AROUND (pitch) TO (pitch) MUSIC (music)
     Invert MUSIC about AROUND and transpose from AROUND to TO.
‘keepWithTag’ [music] - TAGS (symbol list or symbol) MUSIC (music)
     Include only elements of MUSIC that are tagged with one of the tags
     in TAGS.  TAGS may be either a single symbol or a list of symbols.

     Each tag may be declared as a member of at most one tag group
     (defined with ‘\tagGroup’).  If none of a MUSIC element’s tags
     share a tag group with one of the specified TAGS, the element is
     retained.
‘key’ [music] - TONIC [pitch] PITCH-ALIST [list]
     Set key to TONIC and scale PITCH-ALIST.  If both are null, just
     generate ‘KeyChangeEvent’.
‘killCues’ [music] - MUSIC (music)
     Remove cue notes from MUSIC.
‘label’ [music] - LABEL (symbol)
     Create LABEL as a bookmarking label.
‘language’ [void] - LANGUAGE (string)
     Set note names for language LANGUAGE.
‘languageRestore’ [void]
     Restore a previously-saved pitchnames alist.
‘languageSaveAndChange’ [void] - LANGUAGE (string)
     Store the previous pitchnames alist, and set a new one.
‘magnifyMusic’ [music] - MAG (positive number) MUSIC (music)
     Magnify the notation of MUSIC without changing the staff-size,
     using MAG as a size factor.  Stems, beams, slurs, ties, and
     horizontal spacing are adjusted automatically.
‘magnifyStaff’ [music] - MAG (positive number)
     Change the size of the staff, adjusting notation size and
     horizontal spacing automatically, using MAG as a size factor.
‘makeClusters’ [music] - ARG (music)
     Display chords in ARG as clusters.
‘makeDefaultStringTuning’ [void] - SYMBOL (symbol) PITCHES (list)
     This defines a string tuning SYMBOL via a list of PITCHES.  The
     SYMBOL also gets registered in ‘defaultStringTunings’ for
     documentation purposes.
‘mark’ [music] - LABEL [number or markup]
     Make the music for the \mark command.
‘markupMap’ [music] - PATH (symbol list or symbol) MARKUPFUN (markup-function) MUSIC (music)
     This applies the given markup function MARKUPFUN to all markup
     music properties matching PATH in MUSIC.

     For example,
          \new Voice { g'2 c'' }
          \addlyrics {
            \markupMap LyricEvent.text
                       \markup \with-color #red \etc
                       { Oh yes! }
          }

‘modalInversion’ [music] - AROUND (pitch) TO (pitch) SCALE (music) MUSIC (music)
     Invert MUSIC about AROUND using SCALE and transpose from AROUND to
     TO.
‘modalTranspose’ [music] - FROM (pitch) TO (pitch) SCALE (music) MUSIC (music)
     Transpose MUSIC from pitch FROM to pitch TO using SCALE.
‘musicMap’ [music] - PROC (procedure) MUS (music)
     Apply PROC to MUS and all of the music it contains.
‘noPageBreak’ [music]
     Forbid a page break.  May be used at toplevel (i.e., between scores
     or markups), or inside a score.
‘noPageTurn’ [music]
     Forbid a page turn.  May be used at toplevel (i.e., between scores
     or markups), or inside a score.
‘octaveCheck’ [music] - PITCH (pitch)
     Octave check.
‘offset’ [music] - PROPERTY (symbol list or symbol) OFFSETS (any type) ITEM (key list or music)
     Offset the default value of PROPERTY of ITEM by OFFSETS.  If ITEM
     is a string, the result is ‘\override’ for the specified grob type.
     If ITEM is a music expression, the result is the same music
     expression with an appropriate tweak applied.
‘omit’ [music] - ITEM (symbol list or music)
     Set ITEM’s ‘stencil’ property to ‘#f’, effectively omitting it
     without taking up space.

     If ITEM is a symbol list of form ‘GrobName’ or ‘Context.GrobName’,
     the result is an override for the grob name specified by it.  If
     ITEM is a music expression, the result is the same music expression
     with an appropriate tweak applied to it.
‘once’ [music] - MUSIC (music)
     Set ‘once’ to ‘#t’ on all layout instruction events in MUSIC.  This
     will complain about music with an actual duration.  As a special
     exception, if MUSIC contains ‘tweaks’ it will be silently ignored
     in order to allow for ‘\once \propertyTweak’ to work as both
     one-time override and proper tweak.
‘ottava’ [music] - OCTAVE (integer)
     Set the octavation.
‘overrideProperty’ [music] - GROB-PROPERTY-PATH (list of indexes or symbols) VALUE (any type)
     Set the grob property specified by GROB-PROPERTY-PATH to VALUE.
     GROB-PROPERTY-PATH is a symbol list of the form
     ‘Context.GrobName.property’ or ‘GrobName.property’, possibly with
     subproperties given as well.

     As opposed to ‘\override’ which overrides the context-dependent
     defaults with which a grob is created, this command uses
     ‘Output_property_engraver’ at the grob acknowledge stage.  This may
     be necessary for overriding values set after the initial grob
     creation.
‘overrideTimeSignatureSettings’ [music] - TIME-SIGNATURE (fraction, as pair) BASE-MOMENT (fraction, as pair) BEAT-STRUCTURE (list) BEAM-EXCEPTIONS (list)
     Override ‘timeSignatureSettings’ for time signatures of
     TIME-SIGNATURE to have settings of BASE-MOMENT, BEAT-STRUCTURE, and
     BEAM-EXCEPTIONS.
‘pageBreak’ [music]
     Force a page break.  May be used at toplevel (i.e., between scores
     or markups), or inside a score.
‘pageTurn’ [music]
     Force a page turn between two scores or top-level markups.
‘palmMute’ [music] - NOTE (music)
     Print NOTE with a triangle-shaped note head.
‘palmMuteOn’ [music]
     Set the default note head style to a triangle-shaped style.
‘parallelMusic’ [void] - VOICE-IDS (list) MUSIC (music)
     Define parallel music sequences, separated by ’|’ (bar check
     signs), and assign them to the identifiers provided in VOICE-IDS.

     VOICE-IDS: a list of music identifiers (symbols containing only
     letters)

     MUSIC: a music sequence, containing BarChecks as limiting
     expressions.

     Example:

       \parallelMusic #'(A B C) {
         c c | d d | e e |
         d d | e e | f f |
       }
     <==>
       A = { c c | d d }
       B = { d d | e e }
       C = { e e | f f }

     The last bar checks in a sequence are not copied to the result in
     order to facilitate ending the last entry at non-bar boundaries.

‘parenthesize’ [music] - ARG (music)
     Tag ARG to be parenthesized.
‘partcombine’ [music] - CHORD-RANGE [pair of numbers] PART1 (music) PART2 (music)
     Take the music in PART1 and PART2 and return a music expression
     containing simultaneous voices, where PART1 and PART2 are combined
     into one voice where appropriate.  Optional CHORD-RANGE sets the
     distance in steps between notes that may be combined into a chord
     or unison.
‘partcombineDown’ [music] - CHORD-RANGE [pair of numbers] PART1 (music) PART2 (music)
     Take the music in PART1 and PART2 and typeset so that they share a
     staff with stems directed downward.
‘partcombineForce’ [music] - TYPE [symbol]
     Override the part-combiner.
‘partcombineUp’ [music] - CHORD-RANGE [pair of numbers] PART1 (music) PART2 (music)
     Take the music in PART1 and PART2 and typeset so that they share a
     staff with stems directed upward.
‘partial’ [music] - DUR (duration)
     Make a partial measure.
‘phrasingSlurDashPattern’ [music] - DASH-FRACTION (number) DASH-PERIOD (number)
     Set up a custom style of dash pattern for DASH-FRACTION ratio of
     line to space repeated at DASH-PERIOD interval for phrasing slurs.
‘pitchedTrill’ [music] - MAIN-NOTE (music) SECONDARY-NOTE (music)
     Print a trill with MAIN-NOTE as the main note of the trill and
     print SECONDARY-NOTE as a stemless note head in parentheses.
‘pointAndClickOff’ [void]
     Suppress generating extra code in final-format (e.g.  pdf) files to
     point back to the lilypond source statement.
‘pointAndClickOn’ [void]
     Enable generation of code in final-format (e.g.  pdf) files to
     reference the originating lilypond source statement; this is
     helpful when developing a score but generates bigger final-format
     files.
‘pointAndClickTypes’ [void] - TYPES (symbol list or symbol)
     Set a type or list of types (such as ‘#'note-event’) for which
     point-and-click info is generated.
‘propertyOverride’ [music] - GROB-PROPERTY-PATH (list of indexes or symbols) VALUE (any type)
     Set the grob property specified by GROB-PROPERTY-PATH to VALUE.
     GROB-PROPERTY-PATH is a symbol list of the form
     ‘Context.GrobName.property’ or ‘GrobName.property’, possibly with
     subproperties given as well.  This music function is mostly
     intended for use from Scheme as a substitute for the built-in
     ‘\override’ command.
‘propertyRevert’ [music] - GROB-PROPERTY-PATH (list of indexes or symbols)
     Revert the grob property specified by GROB-PROPERTY-PATH to its
     previous value.  GROB-PROPERTY-PATH is a symbol list of the form
     ‘Context.GrobName.property’ or ‘GrobName.property’, possibly with
     subproperties given as well.  This music function is mostly
     intended for use from Scheme as a substitute for the built-in
     ‘\revert’ command.
‘propertySet’ [music] - PROPERTY-PATH (symbol list or symbol) VALUE (any type)
     Set the context property specified by PROPERTY-PATH to VALUE.  This
     music function is mostly intended for use from Scheme as a
     substitute for the built-in ‘\set’ command.
‘propertyTweak’ [music] - PROP (key list or symbol) VALUE (any type) ITEM (key list or music)
     Add a tweak to the following ITEM, usually music.  This generally
     behaves like ‘\tweak’ but will turn into an ‘\override’ when ITEM
     is a symbol list.

     In that case, ITEM specifies the grob path to override.  This is
     mainly useful when using ‘\propertyTweak’ as as a component for
     building other functions like ‘\omit’.  It is not the default
     behavior for ‘\tweak’ since many input strings in ‘\lyricmode’ can
     serve equally as music or as symbols which causes surprising
     behavior when tweaking lyrics using the less specific semantics of
     ‘\propertyTweak’.

     PROP can contain additional elements in which case a nested
     property (inside of an alist) is tweaked.
‘propertyUnset’ [music] - PROPERTY-PATH (symbol list or symbol)
     Unset the context property specified by PROPERTY-PATH.  This music
     function is mostly intended for use from Scheme as a substitute for
     the built-in ‘\unset’ command.
‘pushToTag’ [music] - TAG (symbol) MORE (music) MUSIC (music)
     Add MORE to the front of ‘elements’ of all music expressions in
     MUSIC that are tagged with TAG.
‘quoteDuring’ [music] - WHAT (string) MAIN-MUSIC (music)
     Indicate a section of music to be quoted.  WHAT indicates the name
     of the quoted voice, as specified in an ‘\addQuote’ command.
     MAIN-MUSIC is used to indicate the length of music to be quoted;
     usually contains spacers or multi-measure rests.
‘relative’ [music] - PITCH [pitch] MUSIC (music)
     Make MUSIC relative to PITCH.  If PITCH is omitted, the first note
     in MUSIC is given in absolute pitch.
‘removeWithTag’ [music] - TAGS (symbol list or symbol) MUSIC (music)
     Remove elements of MUSIC that are tagged with one of the tags in
     TAGS.  TAGS may be either a single symbol or a list of symbols.
‘resetRelativeOctave’ [music] - PITCH (pitch)
     Set the octave inside a \relative section.
‘retrograde’ [music] - MUSIC (music)
     Return MUSIC in reverse order.
‘revertTimeSignatureSettings’ [music] - TIME-SIGNATURE (pair)
     Revert ‘timeSignatureSettings’ for time signatures of
     TIME-SIGNATURE.
‘rightHandFinger’ [post event] - FINGER (number or markup)
     Apply FINGER as a fingering indication.
‘scaleDurations’ [music] - FRACTION (fraction, as pair) MUSIC (music)
     Multiply the duration of events in MUSIC by FRACTION.
‘settingsFrom’ (any type) - CTX [symbol] MUSIC (music)
     Take the layout instruction events from MUSIC, optionally
     restricted to those applying to context type CTX, and return a
     context modification duplicating their effect.
‘shape’ [music] - OFFSETS (list) ITEM (key list or music)
     Offset control-points of ITEM by OFFSETS.  The argument is a list
     of number pairs or list of such lists.  Each element of a pair
     represents an offset to one of the coordinates of a control-point.
     If ITEM is a string, the result is ‘\once\override’ for the
     specified grob type.  If ITEM is a music expression, the result is
     the same music expression with an appropriate tweak applied.
‘shiftDurations’ [music] - DUR (integer) DOTS (integer) ARG (music)
     Change the duration of ARG by adding DUR to the ‘durlog’ of ARG and
     DOTS to the ‘dots’ of ARG.
‘single’ [music] - OVERRIDES (music) MUSIC (music)
     Convert OVERRIDES to tweaks and apply them to MUSIC.  This does not
     convert ‘\revert’, ‘\set’ or ‘\unset’.
‘skip’ [music] - DUR (duration)
     Skip forward by DUR.
‘slashedGrace’ [music] - MUSIC (music)
     Create slashed graces (slashes through stems, but no slur) from the
     following music expression
‘slurDashPattern’ [music] - DASH-FRACTION (number) DASH-PERIOD (number)
     Set up a custom style of dash pattern for DASH-FRACTION ratio of
     line to space repeated at DASH-PERIOD interval for slurs.
‘spacingTweaks’ [music] - PARAMETERS (list)
     Set the system stretch, by reading the ’system-stretch property of
     the ‘parameters’ assoc list.
‘storePredefinedDiagram’ [void] - FRETBOARD-TABLE (hash table) CHORD (music) TUNING (pair) DIAGRAM-DEFINITION (string or pair)
     Add predefined fret diagram defined by DIAGRAM-DEFINITION for the
     chord pitches CHORD and the stringTuning TUNING.
‘stringTuning’ (any type) - CHORD (music)
     Convert CHORD to a string tuning.  CHORD must be in absolute
     pitches and should have the highest string number (generally the
     lowest pitch) first.
‘styledNoteHeads’ [music] - STYLE (symbol) HEADS (symbol list or symbol) MUSIC (music)
     Set HEADS in MUSIC to STYLE.
‘tabChordRepeats’ [music] - EVENT-TYPES [list] MUSIC (music)
     Walk through MUSIC putting the notes, fingerings and string numbers
     of the previous chord into repeat chords, as well as an optional
     list of EVENT-TYPES such as ‘#'(articulation-event)’.
‘tabChordRepetition’ [void]
     Include the string and fingering information in a chord repetition.
     This function is deprecated; try using ‘\tabChordRepeats’ instead.
‘tag’ [music] - TAGS (symbol list or symbol) MUSIC (music)
     Tag the following MUSIC with TAGS and return the result, by adding
     the single symbol or symbol list TAGS to the ‘tags’ property of
     MUSIC.
‘tagGroup’ [void] - TAGS (symbol list)
     Define a tag group comprising the symbols in the symbol list TAGS.
     Tag groups must not overlap.
‘temporary’ [music] - MUSIC (music)
     Make any ‘\override’ in MUSIC replace an existing grob property
     value only temporarily, restoring the old value when a
     corresponding ‘\revert’ is executed.  This is achieved by clearing
     the ‘pop-first’ property normally set on ‘\override’s.

     An ‘\override’/‘\revert’ sequence created by using ‘\temporary’ and
     ‘\undo’ on the same music containing overrides will cancel out
     perfectly or cause a warning.

     Non-property-related music is ignored, warnings are generated for
     any property-changing music that isn’t an ‘\override’.
‘tieDashPattern’ [music] - DASH-FRACTION (number) DASH-PERIOD (number)
     Set up a custom style of dash pattern for DASH-FRACTION ratio of
     line to space repeated at DASH-PERIOD interval for ties.
‘time’ [music] - BEAT-STRUCTURE [number list] FRACTION (fraction, as pair)
     Set FRACTION as time signature, with optional number list
     BEAT-STRUCTURE before it.
‘times’ [music] - FRACTION (fraction, as pair) MUSIC (music)
     Scale MUSIC in time by FRACTION.
‘tocItem’ [music] - TEXT (markup)
     Add a line to the table of content, using the ‘tocItemMarkup’ paper
     variable markup
‘transpose’ [music] - FROM (pitch) TO (pitch) MUSIC (music)
     Transpose MUSIC from pitch FROM to pitch TO.
‘transposedCueDuring’ [music] - WHAT (string) DIR (direction) PITCH (pitch) MAIN-MUSIC (music)
     Insert notes from the part WHAT into a voice called ‘cue’, using
     the transposition defined by PITCH.  This happens simultaneously
     with MAIN-MUSIC, which is usually a rest.  The argument DIR
     determines whether the cue notes should be notated as a first or
     second voice.
‘transposition’ [music] - PITCH (pitch)
     Set instrument transposition
‘tuplet’ [music] - RATIO (fraction, as pair) TUPLET-SPAN [duration] MUSIC (music)
     Scale the given MUSIC to tuplets.  RATIO is a fraction that
     specifies how many notes are played in place of the nominal value:
     it will be ‘3/2’ for triplets, namely three notes being played in
     place of two.  If the optional duration TUPLET-SPAN is specified,
     it is used instead of ‘tupletSpannerDuration’ for grouping the
     tuplets.  For example,
          \tuplet 3/2 4 { c8 c c c c c }
     will result in two groups of three tuplets, each group lasting for
     a quarter note.
‘tupletSpan’ [music] - TUPLET-SPAN [duration]
     Set ‘tupletSpannerDuration’, the length into which ‘\tuplet’
     without an explicit ‘tuplet-span’ argument of its own will group
     its tuplets, to the duration TUPLET-SPAN.  To revert to the default
     of not subdividing the contents of a ‘\tuplet’ command without
     explicit ‘tuplet-span’, use
          \tupletSpan \default

‘tweak’ [music] - PROP (key list or symbol) VALUE (any type) MUSIC (music)
     Add a tweak to the following MUSIC.  Layout objects created by
     MUSIC get their property PROP set to VALUE.  If PROP has the form
     ‘Grob.property’, like with
          \tweak Accidental.color #red cis'
     an indirectly created grob (‘Accidental’ is caused by ‘NoteHead’)
     can be tweaked; otherwise only directly created grobs are affected.

     PROP can contain additional elements in which case a nested
     property (inside of an alist) is tweaked.
‘undo’ [music] - MUSIC (music)
     Convert ‘\override’ and ‘\set’ in MUSIC to ‘\revert’ and ‘\unset’,
     respectively.  Any reverts and unsets already in MUSIC cause a
     warning.  Non-property-related music is ignored.
‘unfoldRepeats’ [music] - MUSIC (music)
     Force any ‘\repeat volta’, ‘\repeat tremolo’ or ‘\repeat percent’
     commands in MUSIC to be interpreted as ‘\repeat unfold’.
‘void’ [void] - ARG (any type)
     Accept a scheme argument, return a void expression.  Use this if
     you want to have a scheme expression evaluated because of its
     side-effects, but its value ignored.
‘withMusicProperty’ [music] - SYM (symbol) VAL (any type) MUSIC (music)
     Set SYM to VAL in MUSIC.
‘xNote’ [music] - NOTE (music)
     Print NOTE with a cross-shaped note head.
‘xNotesOn’ [music]
     Set the default note head style to a cross-shaped style.
‘\=’ [post event] - ID (number or string) EVENT (post event)
     This sets the ‘spanner-id’ property of the following EVENT to the
     given ID (numbers will be converted to a string).  This can be used
     to tell LilyPond how to connect overlapping or parallel slurs or
     phrasing slurs within a single ‘Voice’.
          \fixed c' { c\=1( d\=2( e\=1) f\=2) }
 [image src="" alt="[image of music]" text="image of music" ]


File: lilypond-notation.info,  Node: Context modification identifiers,  Next: Predefined type predicates,  Prev: Available music functions,  Up: Notation manual tables

A.20 Context modification identifiers
=====================================

The following commands are defined for use as context modifications
within a ‘\layout’ or ‘\with’ block.

‘RemoveAllEmptyStaves’
     Remove staves which are considered to be empty according to the
     list of interfaces set by ‘keepAliveInterfaces’, including those in
     the first system.
        • Sets grob property ‘remove-empty’ in ‘*note
          (lilypond-internals)VerticalAxisGroup::’ to ‘#t’.
        • Sets grob property ‘remove-first’ in ‘*note
          (lilypond-internals)VerticalAxisGroup::’ to ‘#t’.

‘RemoveEmptyStaves’
     Remove staves which are considered to be empty according to the
     list of interfaces set by ‘keepAliveInterfaces’.
        • Sets grob property ‘remove-empty’ in ‘*note
          (lilypond-internals)VerticalAxisGroup::’ to ‘#t’.


File: lilypond-notation.info,  Node: Predefined type predicates,  Next: Scheme functions,  Prev: Context modification identifiers,  Up: Notation manual tables

A.21 Predefined type predicates
===============================

* Menu:

* R5RS primary predicates::
* R5RS secondary predicates::
* Guile predicates::
* LilyPond scheme predicates::
* LilyPond exported predicates::


File: lilypond-notation.info,  Node: R5RS primary predicates,  Next: R5RS secondary predicates,  Up: Predefined type predicates

R5RS primary predicates
-----------------------

Type predicate           Description
--------------------------------------------------------------------------
‘boolean?’               boolean
‘char?’                  character
‘number?’                number
‘pair?’                  pair
‘port?’                  port
‘procedure?’             procedure
‘string?’                string
‘symbol?’                symbol
‘vector?’                vector


File: lilypond-notation.info,  Node: R5RS secondary predicates,  Next: Guile predicates,  Prev: R5RS primary predicates,  Up: Predefined type predicates

R5RS secondary predicates
-------------------------

Type predicate           Description
--------------------------------------------------------------------------
‘char-alphabetic?’       alphabetic character
‘char-lower-case?’       lower-case character
‘char-numeric?’          numeric character
‘char-upper-case?’       upper-case character
‘char-whitespace?’       whitespace character
‘complex?’               complex number
‘eof-object?’            end-of-file object
‘even?’                  even number
‘exact?’                 exact number
‘inexact?’               inexact number
‘input-port?’            input port
‘integer?’               integer
‘list?’                  list _(use_ ‘cheap-list?’ _for faster
                         processing)_
‘negative?’              negative number
‘null?’                  null
‘odd?’                   odd number
‘output-port?’           output port
‘positive?’              positive number
‘rational?’              rational number
‘real?’                  real number
‘zero?’                  zero


File: lilypond-notation.info,  Node: Guile predicates,  Next: LilyPond scheme predicates,  Prev: R5RS secondary predicates,  Up: Predefined type predicates

Guile predicates
----------------

Type predicate           Description
--------------------------------------------------------------------------
‘hash-table?’            hash table


File: lilypond-notation.info,  Node: LilyPond scheme predicates,  Next: LilyPond exported predicates,  Prev: Guile predicates,  Up: Predefined type predicates

LilyPond scheme predicates
--------------------------

Type predicate           Description
--------------------------------------------------------------------------
‘boolean-or-symbol?’     boolean or symbol
‘cheap-list?’            list _(use this instead of_ ‘list?’ _for
                         faster processing)_
‘color?’                 color
‘fraction?’              fraction, as pair
‘grob-list?’             list of grobs
‘index?’                 non-negative integer
‘key?’                   index or symbol
‘key-list?’              list of indexes or symbols
‘key-list-or-music?’     key list or music
‘key-list-or-symbol?’    key list or symbol
‘markup?’                markup
‘markup-command-list?’   markup command list
‘markup-list?’           markup list
‘moment-pair?’           pair of moment objects
‘number-list?’           number list
‘number-or-grob?’        number or grob
‘number-or-markup?’      number or markup
‘number-or-pair?’        number or pair
‘number-or-string?’      number or string
‘number-pair?’           pair of numbers
‘number-pair-list?’      list of number pairs
‘rational-or-procedure?’ an exact rational or procedure
‘rhythmic-location?’     rhythmic location
‘scheme?’                any type
‘string-or-music?’       string or music
‘string-or-pair?’        string or pair
‘string-or-symbol?’      string or symbol
‘symbol-list?’           symbol list
‘symbol-list-or-music?’  symbol list or music
‘symbol-list-or-symbol?’ symbol list or symbol
‘void?’                  void


File: lilypond-notation.info,  Node: LilyPond exported predicates,  Prev: LilyPond scheme predicates,  Up: Predefined type predicates

LilyPond exported predicates
----------------------------

Type predicate           Description
--------------------------------------------------------------------------
‘ly:book?’               book
‘ly:box?’                box
‘ly:context?’            context
‘ly:context-def?’        context definition
‘ly:context-mod?’        context modification
‘ly:dimension?’          dimension, in staff space
‘ly:dir?’                direction
‘ly:dispatcher?’         dispatcher
‘ly:duration?’           duration
‘ly:event?’              post event
‘ly:font-metric?’        font metric
‘ly:grob?’               graphical (layout) object
‘ly:grob-array?’         array of grobs
‘ly:grob-properties?’    grob properties
‘ly:input-location?’     input location
‘ly:item?’               item
‘ly:iterator?’           iterator
‘ly:lily-lexer?’         lily-lexer
‘ly:lily-parser?’        lily-parser
‘ly:listener?’           listener
‘ly:moment?’             moment
‘ly:music?’              music
‘ly:music-function?’     music function
‘ly:music-list?’         list of music objects
‘ly:music-output?’       music output
‘ly:otf-font?’           OpenType font
‘ly:output-def?’         output definition
‘ly:page-marker?’        page marker
‘ly:pango-font?’         pango font
‘ly:paper-book?’         paper book
‘ly:paper-system?’       paper-system Prob
‘ly:pitch?’              pitch
‘ly:prob?’               property object
‘ly:score?’              score
‘ly:skyline?’            skyline
‘ly:skyline-pair?’       pair of skylines
‘ly:source-file?’        source file
‘ly:spanner?’            spanner
‘ly:spring?’             spring
‘ly:stencil?’            stencil
‘ly:stream-event?’       stream event
‘ly:translator?’         translator
‘ly:translator-group?’   translator group
‘ly:undead?’             undead container
‘ly:unpure-pure-container?’unpure/pure container


File: lilypond-notation.info,  Node: Scheme functions,  Prev: Predefined type predicates,  Up: Notation manual tables

A.22 Scheme functions
=====================

 -- Function: ly:add-context-mod contextmods modification
     Adds the given context MODIFICATION to the list CONTEXTMODS of
     context modifications.

 -- Function: ly:add-file-name-alist alist
     Add mappings for error messages from ALIST.

 -- Function: ly:add-interface iface desc props
     Add a new grob interface.  IFACE is the interface name, DESC is the
     interface description, and PROPS is the list of user-settable
     properties for the interface.

 -- Function: ly:add-listener callback disp cl
     Add the single-argument procedure CALLBACK as listener to the
     dispatcher DISP.  Whenever DISP hears an event of class CL, it
     calls CALLBACK with it.

 -- Function: ly:add-option sym val description
     Add a program option SYM.  VAL is the default value and DESCRIPTION
     is a string description.

 -- Function: ly:all-grob-interfaces
     Return the hash table with all grob interface descriptions.

 -- Function: ly:all-options
     Get all option settings in an alist.

 -- Function: ly:all-stencil-expressions
     Return all symbols recognized as stencil expressions.

 -- Function: ly:assoc-get key alist default-value strict-checking
     Return value if KEY in ALIST, else DEFAULT-VALUE (or ‘#f’ if not
     specified).  If STRICT-CHECKING is set to ‘#t’ and KEY is not in
     ALIST, a programming_error is output.

 -- Function: ly:axis-group-interface::add-element grob grob-element
     Set GROB the parent of GROB-ELEMENT on all axes of GROB.

 -- Function: ly:basic-progress str rest
     A Scheme callable function to issue a basic progress message STR.
     The message is formatted with ‘format’ and REST.

 -- Function: ly:beam-score-count
     count number of beam scores.

 -- Function: ly:bigpdfs
     Return true if the command line includes the ‘--bigpdf’ parameter.

 -- Function: ly:book? x
     Is X a ‘Book’ object?

 -- Function: ly:book-add-bookpart! book-smob book-part
     Add BOOK-PART to BOOK-SMOB book part list.

 -- Function: ly:book-add-score! book-smob score
     Add SCORE to BOOK-SMOB score list.

 -- Function: ly:book-book-parts book
     Return book parts in BOOK.

 -- Function: ly:book-header book
     Return header in BOOK.

 -- Function: ly:book-paper book
     Return paper in BOOK.

 -- Function: ly:book-process book-smob default-paper default-layout
          output
     Print book.  OUTPUT is passed to the backend unchanged.  For
     example, it may be a string (for file based outputs) or a socket
     (for network based output).

 -- Function: ly:book-process-to-systems book-smob default-paper
          default-layout output
     Print book.  OUTPUT is passed to the backend unchanged.  For
     example, it may be a string (for file based outputs) or a socket
     (for network based output).

 -- Function: ly:book-scores book
     Return scores in BOOK.

 -- Function: ly:book-set-header! book module
     Set the book header.

 -- Function: ly:box? x
     Is X a ‘Box’ object?

 -- Function: ly:bp num
     NUM bigpoints (1/72th inch).

 -- Function: ly:bracket a iv t p
     Make a bracket in direction A.  The extent of the bracket is given
     by IV.  The wings protrude by an amount of P, which may be
     negative.  The thickness is given by T.

 -- Function: ly:broadcast disp ev
     Send the stream event EV to the dispatcher DISP.

 -- Function: ly:camel-case->lisp-identifier name-sym
     Convert ‘FooBar_Bla’ to ‘foo-bar-bla’ style symbol.

 -- Function: ly:chain-assoc-get key achain default-value
          strict-checking
     Return value for KEY from a list of alists ACHAIN.  If no entry is
     found, return DEFAULT-VALUE or ‘#f’ if DEFAULT-VALUE is not
     specified.  With STRICT-CHECKING set to ‘#t’, a programming_error
     is output in such cases.

 -- Function: ly:check-expected-warnings
     Check whether all expected warnings have really been triggered.

 -- Function: ly:cm num
     NUM cm.

 -- Function: ly:command-line-code
     The Scheme code specified on command-line with ‘-e’.

 -- Function: ly:command-line-options
     The Scheme options specified on command-line with ‘-d’.

 -- Function: ly:connect-dispatchers to from
     Make the dispatcher TO listen to events from FROM.

 -- Function: ly:context? x
     Is X a ‘Context’ object?

 -- Function: ly:context-current-moment context
     Return the current moment of CONTEXT.

 -- Function: ly:context-def? x
     Is X a ‘Context_def’ object?

 -- Function: ly:context-def-lookup def sym val
     Return the value of SYM in context definition DEF (e.g., ‘\Voice’).
     If no value is found, return VAL or ‘'()’ if VAL is undefined.  SYM
     can be any of ‘default-child’, ‘consists’, ‘description’,
     ‘aliases’, ‘accepts’, ‘property-ops’, ‘context-name’, ‘group-type’.

 -- Function: ly:context-def-modify def mod
     Return the result of applying the context-mod MOD to the context
     definition DEF.  Does not change DEF.

 -- Function: ly:context-event-source context
     Return ‘event-source’ of context CONTEXT.

 -- Function: ly:context-events-below context
     Return a ‘stream-distributor’ that distributes all events from
     CONTEXT and all its subcontexts.

 -- Function: ly:context-find context name
     Find a parent of CONTEXT that has name or alias NAME.  Return ‘#f’
     if not found.

 -- Function: ly:context-grob-definition context name
     Return the definition of NAME (a symbol) within CONTEXT as an
     alist.

 -- Function: ly:context-id context
     Return the ID string of CONTEXT, i.e., for ‘\context Voice = "one"
     …’ return the string ‘one’.

 -- Function: ly:context-matched-pop-property context grob cell
     This undoes a particular ‘\override’, ‘\once \override’ or ‘\once
     \revert’ when given the specific alist pair to undo.

 -- Function: ly:context-mod? x
     Is X a ‘Context_mod’ object?

 -- Function: ly:context-mod-apply! context mod
     Apply the context modification MOD to CONTEXT.

 -- Function: ly:context-name context
     Return the name of CONTEXT, i.e., for ‘\context Voice = "one" …’
     return the symbol ‘Voice’.

 -- Function: ly:context-now context
     Return ‘now-moment’ of context CONTEXT.

 -- Function: ly:context-parent context
     Return the parent of CONTEXT, ‘#f’ if none.

 -- Function: ly:context-property context sym def
     Return the value for property SYM in CONTEXT.  If DEF is given, and
     property value is ‘'()’, return DEF.

 -- Function: ly:context-property-where-defined context name
     Return the context above CONTEXT where NAME is defined.

 -- Function: ly:context-pushpop-property context grob eltprop val
     Do ‘\temporary \override’ or ‘\revert’ operation in CONTEXT.  The
     grob definition GROB is extended with ELTPROP (if VAL is specified)
     or reverted (if unspecified).

 -- Function: ly:context-set-property! context name val
     Set value of property NAME in context CONTEXT to VAL.

 -- Function: ly:context-unset-property context name
     Unset value of property NAME in context CONTEXT.

 -- Function: ly:debug str rest
     A Scheme callable function to issue a debug message STR.  The
     message is formatted with ‘format’ and REST.

 -- Function: ly:default-scale
     Get the global default scale.

 -- Function: ly:dimension? d
     Return D as a number.  Used to distinguish length variables from
     normal numbers.

 -- Function: ly:dir? s
     Is S a direction?  Valid directions are ‘-1’, ‘0’, or ‘1’, where
     ‘-1’ represents left or down, ‘1’ represents right or up, and ‘0’
     represents a neutral direction.

 -- Function: ly:disconnect-dispatchers to from
     Stop the dispatcher TO listening to events from FROM.

 -- Function: ly:dispatcher? x
     Is X a ‘Dispatcher’ object?

 -- Function: ly:duration? x
     Is X a ‘Duration’ object?

 -- Function: ly:duration<? p1 p2
     Is P1 shorter than P2?

 -- Function: ly:duration->string dur
     Convert DUR to a string.

 -- Function: ly:duration-dot-count dur
     Extract the dot count from DUR.

 -- Function: ly:duration-factor dur
     Extract the compression factor from DUR.  Return it as a pair.

 -- Function: ly:duration-length dur
     The length of the duration as a ‘moment’.

 -- Function: ly:duration-log dur
     Extract the duration log from DUR.

 -- Function: ly:duration-scale dur
     Extract the compression factor from DUR.  Return it as a rational.

 -- Function: ly:effective-prefix
     Return effective prefix.

 -- Function: ly:encode-string-for-pdf str
     Encode the given string to either Latin1 (which is a subset of the
     PDFDocEncoding) or if that’s not possible to full UTF-16BE with
     Byte-Order-Mark (BOM).

 -- Function: ly:engraver-announce-end-grob engraver grob cause
     Announce the end of a grob (i.e., the end of a spanner) originating
     from given ENGRAVER instance, with GROB being a grob.  CAUSE should
     either be another grob or a music event.

 -- Function: ly:engraver-make-grob engraver grob-name cause
     Create a grob originating from given ENGRAVER instance, with given
     GROB-NAME, a symbol.  CAUSE should either be another grob or a
     music event.

 -- Function: ly:error str rest
     A Scheme callable function to issue the error STR.  The error is
     formatted with ‘format’ and REST.

 -- Function: ly:event? obj
     Is OBJ a proper (non-rhythmic) event object?

 -- Function: ly:event-deep-copy m
     Copy M and all sub expressions of M.

 -- Function: ly:event-property sev sym val
     Get the property SYM of stream event SEV.  If SYM is undefined,
     return VAL or ‘'()’ if VAL is not specified.

 -- Function: ly:event-set-property! ev sym val
     Set property SYM in event EV to VAL.

 -- Function: ly:expand-environment str
     Expand ‘$VAR’ and ‘${VAR}’ in STR.

 -- Function: ly:expect-warning str rest
     A Scheme callable function to register a warning to be expected and
     subsequently suppressed.  If the warning is not encountered, a
     warning about the missing warning will be shown.  The message
     should be translated with ‘(_ ...)’ and changing parameters given
     after the format string.

 -- Function: ly:find-file name
     Return the absolute file name of NAME, or ‘#f’ if not found.

 -- Function: ly:font-config-add-directory dir
     Add directory DIR to FontConfig.

 -- Function: ly:font-config-add-font font
     Add font FONT to FontConfig.

 -- Function: ly:font-config-display-fonts
     Dump a list of all fonts visible to FontConfig.

 -- Function: ly:font-config-get-font-file name
     Get the file for font NAME.

 -- Function: ly:font-design-size font
     Given the font metric FONT, return the design size, relative to the
     current output-scale.

 -- Function: ly:font-file-name font
     Given the font metric FONT, return the corresponding file name.

 -- Function: ly:font-get-glyph font name
     Return a stencil from FONT for the glyph named NAME.  If the glyph
     is not available, return an empty stencil.

     Note that this command can only be used to access glyphs from fonts
     loaded with ‘ly:system-font-load’; currently, this means either the
     Emmentaler or Emmentaler-Brace fonts, corresponding to the font
     encodings ‘fetaMusic’ and ‘fetaBraces’, respectively.

 -- Function: ly:font-glyph-name-to-charcode font name
     Return the character code for glyph NAME in FONT.

     Note that this command can only be used to access glyphs from fonts
     loaded with ‘ly:system-font-load’; currently, this means either the
     Emmentaler or Emmentaler-Brace fonts, corresponding to the font
     encodings ‘fetaMusic’ and ‘fetaBraces’, respectively.

 -- Function: ly:font-glyph-name-to-index font name
     Return the index for NAME in FONT.

     Note that this command can only be used to access glyphs from fonts
     loaded with ‘ly:system-font-load’; currently, this means either the
     Emmentaler or Emmentaler-Brace fonts, corresponding to the font
     encodings ‘fetaMusic’ and ‘fetaBraces’, respectively.

 -- Function: ly:font-index-to-charcode font index
     Return the character code for INDEX in FONT.

     Note that this command can only be used to access glyphs from fonts
     loaded with ‘ly:system-font-load’; currently, this means either the
     Emmentaler or Emmentaler-Brace fonts, corresponding to the font
     encodings ‘fetaMusic’ and ‘fetaBraces’, respectively.

 -- Function: ly:font-magnification font
     Given the font metric FONT, return the magnification, relative to
     the current output-scale.

 -- Function: ly:font-metric? x
     Is X a ‘Font_metric’ object?

 -- Function: ly:font-name font
     Given the font metric FONT, return the corresponding name.

 -- Function: ly:font-sub-fonts font
     Given the font metric FONT of an OpenType font, return the names of
     the subfonts within FONT.

 -- Function: ly:format str rest
     LilyPond specific format, supporting ‘~a’ and ‘~[0-9]f’.  Basic
     support for ‘~s’ is also provided.

 -- Function: ly:format-output context
     Given a global context in its final state, process it and return
     the ‘Music_output’ object in its final state.

 -- Function: ly:generic-bound-extent grob common
     Determine the extent of GROB relative to COMMON along the X axis,
     finding its extent as a bound when it a has
     ‘bound-alignment-interfaces’ property list set and otherwise the
     full extent.

 -- Function: ly:get-all-function-documentation
     Get a hash table with all LilyPond Scheme extension functions.

 -- Function: ly:get-all-translators
     Return a list of all translator objects that may be instantiated.

 -- Function: ly:get-context-mods contextmod
     Returns the list of context modifications stored in CONTEXTMOD.

 -- Function: ly:get-option var
     Get a global option setting.

 -- Function: ly:get-spacing-spec from-scm to-scm
     Return the spacing spec going between the two given grobs, FROM_SCM
     and TO_SCM.

 -- Function: ly:get-undead undead
     Get back object from UNDEAD.

 -- Function: ly:gettext original
     A Scheme wrapper function for ‘gettext’.

 -- Function: ly:grob? x
     Is X a ‘Grob’ object?

 -- Function: ly:grob-alist-chain grob global
     Get an alist chain for grob GROB, with GLOBAL as the global
     default.  If unspecified, ‘font-defaults’ from the layout block is
     taken.

 -- Function: ly:grob-array? x
     Is X a ‘Grob_array’ object?

 -- Function: ly:grob-array->list grob-arr
     Return the elements of GROB-ARR as a Scheme list.

 -- Function: ly:grob-array-length grob-arr
     Return the length of GROB-ARR.

 -- Function: ly:grob-array-ref grob-arr index
     Retrieve the INDEXth element of GROB-ARR.

 -- Function: ly:grob-basic-properties grob
     Get the immutable properties of GROB.

 -- Function: ly:grob-chain-callback grob proc sym
     Find the callback that is stored as property SYM of grob GROB and
     chain PROC to the head of this, meaning that it is called using
     GROB and the previous callback’s result.

 -- Function: ly:grob-common-refpoint grob other axis
     Find the common refpoint of GROB and OTHER for AXIS.

 -- Function: ly:grob-common-refpoint-of-array grob others axis
     Find the common refpoint of GROB and OTHERS (a grob-array) for
     AXIS.

 -- Function: ly:grob-default-font grob
     Return the default font for grob GROB.

 -- Function: ly:grob-extent grob refp axis
     Get the extent in AXIS direction of GROB relative to the grob REFP.

 -- Function: ly:grob-get-vertical-axis-group-index grob
     Get the index of the vertical axis group the grob GROB belongs to;
     return ‘-1’ if none is found.

 -- Function: ly:grob-interfaces grob
     Return the interfaces list of grob GROB.

 -- Function: ly:grob-layout grob
     Get ‘\layout’ definition from grob GROB.

 -- Function: ly:grob-object grob sym
     Return the value of a pointer in grob GROB of property SYM.  It
     returns ‘'()’ (end-of-list) if SYM is undefined in GROB.

 -- Function: ly:grob-original grob
     Return the unbroken original grob of GROB.

 -- Function: ly:grob-parent grob axis
     Get the parent of GROB.  AXIS is 0 for the X-axis, 1 for the
     Y-axis.

 -- Function: ly:grob-pq<? a b
     Compare two grob priority queue entries.  This is an internal
     function.

 -- Function: ly:grob-properties grob
     Get the mutable properties of GROB.

 -- Function: ly:grob-properties? x
     Is X a ‘Grob_properties’ object?

 -- Function: ly:grob-property grob sym val
     Return the value for property SYM of GROB.  If no value is found,
     return VAL or ‘'()’ if VAL is not specified.

 -- Function: ly:grob-property-data grob sym
     Return the value for property SYM of GROB, but do not process
     callbacks.

 -- Function: ly:grob-pure-height grob refp beg end val
     Return the pure height of GROB given refpoint REFP.  If no value is
     found, return VAL or ‘'()’ if VAL is not specified.

 -- Function: ly:grob-pure-property grob sym beg end val
     Return the pure value for property SYM of GROB.  If no value is
     found, return VAL or ‘'()’ if VAL is not specified.

 -- Function: ly:grob-relative-coordinate grob refp axis
     Get the coordinate in AXIS direction of GROB relative to the grob
     REFP.

 -- Function: ly:grob-robust-relative-extent grob refp axis
     Get the extent in AXIS direction of GROB relative to the grob REFP,
     or ‘(0,0)’ if empty.

 -- Function: ly:grob-script-priority-less a b
     Compare two grobs by script priority.  For internal use.

 -- Function: ly:grob-set-nested-property! grob symlist val
     Set nested property SYMLIST in grob GROB to value VAL.

 -- Function: ly:grob-set-object! grob sym val
     Set SYM in grob GROB to value VAL.

 -- Function: ly:grob-set-parent! grob axis parent-grob
     Set PARENT-GROB the parent of grob GROB in axis AXIS.

 -- Function: ly:grob-set-property! grob sym val
     Set SYM in grob GROB to value VAL.

 -- Function: ly:grob-spanned-rank-interval grob
     Returns a pair with the ‘rank’ of the furthest left column and the
     ‘rank’ of the furthest right column spanned by ‘grob’.

 -- Function: ly:grob-staff-position sg
     Return the Y-position of SG relative to the staff.

 -- Function: ly:grob-suicide! grob
     Kill GROB.

 -- Function: ly:grob-system grob
     Return the system grob of GROB.

 -- Function: ly:grob-translate-axis! grob d a
     Translate GROB on axis A over distance D.

 -- Function: ly:grob-vertical<? a b
     Does A lie above B on the page?

 -- Function: ly:gulp-file name size
     Read SIZE characters from the file NAME, and return its contents in
     a string.  If SIZE is undefined, the entire file is read.  The file
     is looked up using the search path.

 -- Function: ly:hash-table-keys tab
     Return a list of keys in TAB.

 -- Function: ly:inch num
     NUM inches.

 -- Function: ly:input-both-locations sip
     Return input location in SIP as ‘(file-name first-line first-column
     last-line last-column)’.

 -- Function: ly:input-file-line-char-column sip
     Return input location in SIP as ‘(file-name line char column)’.

 -- Function: ly:input-location? x
     Is X a ‘Input’ object?

 -- Function: ly:input-message sip msg rest
     Print MSG as a GNU compliant error message, pointing to the
     location in SIP.  MSG is interpreted similar to ‘format’’s
     argument, using REST.

 -- Function: ly:input-warning sip msg rest
     Print MSG as a GNU compliant warning message, pointing to the
     location in SIP.  MSG is interpreted similar to ‘format’’s
     argument, using REST.

 -- Function: ly:interpret-music-expression mus ctx
     Interpret the music expression MUS in the global context CTX.  The
     context is returned in its final state.

 -- Function: ly:interpret-stencil-expression expr func arg1 offset
     Parse EXPR, feed bits to FUNC with first arg ARG1 having offset
     OFFSET.

 -- Function: ly:intlog2 d
     The 2-logarithm of 1/D.

 -- Function: ly:item? g
     Is G an ‘Item’ object?

 -- Function: ly:item-break-dir it
     The break status direction of item IT.  ‘-1’ means end of line,
     ‘0’ unbroken, and ‘1’ beginning of line.

 -- Function: ly:item-get-column it
     Return the ‘PaperColumn’ or ‘NonMusicalPaperColumn’ associated with
     this ‘Item’.

 -- Function: ly:iterator? x
     Is X a ‘Music_iterator’ object?

 -- Function: ly:lexer-keywords lexer
     Return a list of ‘(KEY . CODE)’ pairs, signifying the LilyPond
     reserved words list.

 -- Function: ly:lily-lexer? x
     Is X a ‘Lily_lexer’ object?

 -- Function: ly:lily-parser? x
     Is X a ‘Lily_parser’ object?

 -- Function: ly:line-interface::line grob startx starty endx endy
     Make a line using layout information from grob GROB.

 -- Function: ly:listened-event-class? disp cl
     Does DISP listen to any event type in the list CL?

 -- Function: ly:listened-event-types disp
     Return a list of all event types that DISP listens to.

 -- Function: ly:listener? x
     Is X a ‘Listener’ object?

 -- Function: ly:make-book paper header scores
     Make a ‘\book’ of PAPER and HEADER (which may be ‘#f’ as well)
     containing ‘\scores’.

 -- Function: ly:make-book-part scores
     Make a ‘\bookpart’ containing ‘\scores’.

 -- Function: ly:make-context-mod mod-list
     Creates a context modification, optionally initialized via the list
     of modifications MOD-LIST.

 -- Function: ly:make-dispatcher
     Return a newly created dispatcher.

 -- Function: ly:make-duration length dotcount num den
     LENGTH is the negative logarithm (base 2) of the duration: 1 is a
     half note, 2 is a quarter note, 3 is an eighth note, etc.  The
     number of dots after the note is given by the optional argument
     DOTCOUNT.

     The duration factor is optionally given by integers NUM and DEN,
     alternatively by a single rational number.

     A duration is a musical duration, i.e., a length of time described
     by a power of two (whole, half, quarter, etc.)  and a number of
     augmentation dots.

 -- Function: ly:make-global-context output-def
     Set up a global interpretation context, using the output block
     OUTPUT-DEF.  The context is returned.

 -- Function: ly:make-global-translator global
     Create a translator group and connect it to the global context
     GLOBAL.  The translator group is returned.

 -- Function: ly:make-grob-properties alist
     This packages the given property list ALIST in a grob property
     container stored in a context property with the name of a grob.

 -- Function: ly:make-moment m g gn gd
     Create the moment with rational main timing M, and optional grace
     timing G.

     A “moment” is a point in musical time.  It consists of a pair of
     rationals (M, G), where M is the timing for the main notes, and G
     the timing for grace notes.  In absence of grace notes, G is zero.

     For compatibility reasons, it is possible to write two numbers
     specifying numerator and denominator instead of the rationals.
     These forms cannot be mixed, and the two-argument form is
     disambiguated by the sign of the second argument: if it is
     positive, it can only be a denominator and not a grace timing.

 -- Function: ly:make-music props
     Make a C++ ‘Music’ object and initialize it with PROPS.

     This function is for internal use and is only called by
     ‘make-music’, which is the preferred interface for creating music
     objects.

 -- Function: ly:make-music-function signature func
     Make a function to process music, to be used for the parser.  FUNC
     is the function, and SIGNATURE describes its arguments.
     SIGNATURE’s cdr is a list containing either ‘ly:music?’ predicates
     or other type predicates.  Its car is the syntax function to call.

 -- Function: ly:make-music-relative! music pitch
     Make MUSIC relative to PITCH, return final pitch.

 -- Function: ly:make-output-def
     Make an output definition.

 -- Function: ly:make-page-label-marker label
     Return page marker with label LABEL.

 -- Function: ly:make-page-permission-marker symbol permission
     Return page marker with page breaking and turning permissions.

 -- Function: ly:make-pango-description-string chain size
     Make a ‘PangoFontDescription’ string for the property alist CHAIN
     at size SIZE.

 -- Function: ly:make-paper-outputter port format
     Create an outputter that evaluates within ‘output-’FORMAT, writing
     to PORT.

 -- Function: ly:make-pitch octave note alter
     OCTAVE is specified by an integer, zero for the octave containing
     middle C. NOTE is a number indexing the global default scale, with
     0 corresponding to pitch C and 6 usually corresponding to pitch B.
     Optional ALTER is a rational number of 200-cent whole tones for
     alteration.

 -- Function: ly:make-prob type init rest
     Create a ‘Prob’ object.

 -- Function: ly:make-scale steps
     Create a scale.  The argument is a vector of rational numbers, each
     of which represents the number of 200 cent tones of a pitch above
     the tonic.

 -- Function: ly:make-score music
     Return score with MUSIC encapsulated in it.

 -- Function: ly:make-spring ideal min-dist
     Make a spring.  IDEAL is the ideal distance of the spring, and
     MIN-DIST is the minimum distance.

 -- Function: ly:make-stencil expr xext yext
     Stencils are device independent output expressions.  They carry two
     pieces of information:

       1. A specification of how to print this object.  This
          specification is processed by the output backends, for example
          ‘scm/output-ps.scm’.

       2. The vertical and horizontal extents of the object, given as
          pairs.  If an extent is unspecified (or if you use
          ‘empty-interval’ as its value), it is taken to be empty.

 -- Function: ly:make-stream-event cl proplist
     Create a stream event of class CL with the given mutable property
     list.

 -- Function: ly:make-undead object
     This packages OBJECT in a manner that keeps it from triggering
     "Parsed object should be dead" messages.

 -- Function: ly:make-unpure-pure-container unpure pure
     Make an unpure-pure container.  UNPURE should be an unpure
     expression, and PURE should be a pure expression.  If PURE is
     omitted, the value of UNPURE will be used twice, except that a
     callback is given two extra arguments that are ignored for the sake
     of pure calculations.

 -- Function: ly:message str rest
     A Scheme callable function to issue the message STR.  The message
     is formatted with ‘format’ and REST.

 -- Function: ly:minimal-breaking pb
     Break (pages and lines) the ‘Paper_book’ object PB without looking
     for optimal spacing: stack as many lines on a page before moving to
     the next one.

 -- Function: ly:mm num
     NUM mm.

 -- Function: ly:module->alist mod
     Dump the contents of module MOD as an alist.

 -- Function: ly:module-copy dest src
     Copy all bindings from module SRC into DEST.

 -- Function: ly:modules-lookup modules sym def
     Look up SYM in the list MODULES, returning the first occurence.  If
     not found, return DEF or ‘#f’ if DEF isn’t specified.

 -- Function: ly:moment? x
     Is X a ‘Moment’ object?

 -- Function: ly:moment<? a b
     Compare two moments.

 -- Function: ly:moment-add a b
     Add two moments.

 -- Function: ly:moment-div a b
     Divide two moments.

 -- Function: ly:moment-grace mom
     Extract grace timing as a rational number from MOM.

 -- Function: ly:moment-grace-denominator mom
     Extract denominator from grace timing.

 -- Function: ly:moment-grace-numerator mom
     Extract numerator from grace timing.

 -- Function: ly:moment-main mom
     Extract main timing as a rational number from MOM.

 -- Function: ly:moment-main-denominator mom
     Extract denominator from main timing.

 -- Function: ly:moment-main-numerator mom
     Extract numerator from main timing.

 -- Function: ly:moment-mod a b
     Modulo of two moments.

 -- Function: ly:moment-mul a b
     Multiply two moments.

 -- Function: ly:moment-sub a b
     Subtract two moments.

 -- Function: ly:music? obj
     Is OBJ a music object?

 -- Function: ly:music-compress m factor
     Compress music object M by moment FACTOR.

 -- Function: ly:music-deep-copy m origin
     Copy M and all sub expressions of M.  M may be an arbitrary type;
     cons cells and music are copied recursively.  If ORIGIN is given,
     it is used as the origin for one level of music by calling
     ‘ly:set-origin!’ on the copy.

 -- Function: ly:music-duration-compress mus fact
     Compress MUS by factor FACT, which is a ‘Moment’.

 -- Function: ly:music-duration-length mus
     Extract the duration field from MUS and return the length.

 -- Function: ly:music-function? x
     Is X a ‘Music_function’ object?

 -- Function: ly:music-function-extract x
     Return the Scheme function inside X.

 -- Function: ly:music-function-signature x
     Return the function signature inside X.

 -- Function: ly:music-length mus
     Get the length of music expression MUS and return it as a ‘Moment’
     object.

 -- Function: ly:music-list? lst
     Is LST a list of music objects?

 -- Function: ly:music-mutable-properties mus
     Return an alist containing the mutable properties of MUS.  The
     immutable properties are not available, since they are constant and
     initialized by the ‘make-music’ function.

 -- Function: ly:music-output? x
     Is X a ‘Music_output’ object?

 -- Function: ly:music-property mus sym val
     Return the value for property SYM of music expression MUS.  If no
     value is found, return VAL or ‘'()’ if VAL is not specified.

 -- Function: ly:music-set-property! mus sym val
     Set property SYM in music expression MUS to VAL.

 -- Function: ly:music-transpose m p
     Transpose M such that central C is mapped to P.  Return M.

 -- Function: ly:note-column-accidentals note-column
     Return the ‘AccidentalPlacement’ grob from NOTE-COLUMN if any, or
     ‘SCM_EOL’ otherwise.

 -- Function: ly:note-column-dot-column note-column
     Return the ‘DotColumn’ grob from NOTE-COLUMN if any, or ‘SCM_EOL’
     otherwise.

 -- Function: ly:note-head::stem-attachment font-metric glyph-name
     Get attachment in FONT-METRIC for attaching a stem to notehead
     GLYPH-NAME.

 -- Function: ly:number->string s
     Convert S to a string without generating many decimals.

 -- Function: ly:one-line-auto-height-breaking pb
     Put each score on a single line, and put each line on its own page.
     Modify the paper-width setting so that every page is wider than the
     widest line.  Modify the paper-height setting to fit the height of
     the tallest line.

 -- Function: ly:one-line-breaking pb
     Put each score on a single line, and put each line on its own page.
     Modify the paper-width setting so that every page is wider than the
     widest line.

 -- Function: ly:optimal-breaking pb
     Optimally break (pages and lines) the ‘Paper_book’ object PB to
     minimize badness in bother vertical and horizontal spacing.

 -- Function: ly:option-usage port
     Print ‘ly:set-option’ usage.  Optional PORT argumentfor the
     destination defaults to current output port.

 -- Function: ly:otf->cff otf-file-name
     Convert the contents of an OTF file to a CFF file, returning it as
     a string.

 -- Function: ly:otf-font? font
     Is FONT an OpenType font?

 -- Function: ly:otf-font-glyph-info font glyph
     Given the font metric FONT of an OpenType font, return the
     information about named glyph GLYPH (a string).

 -- Function: ly:otf-font-table-data font tag
     Extract a table TAG from FONT.  Return empty string for
     non-existent TAG.

 -- Function: ly:otf-glyph-count font
     Return the number of glyphs in FONT.

 -- Function: ly:otf-glyph-list font
     Return a list of glyph names for FONT.

 -- Function: ly:output-def? x
     Is X a ‘Output_def’ object?

 -- Function: ly:output-def-clone def
     Clone output definition DEF.

 -- Function: ly:output-def-lookup def sym val
     Return the value of SYM in output definition DEF (e.g., ‘\paper’).
     If no value is found, return VAL or ‘'()’ if VAL is undefined.

 -- Function: ly:output-def-parent def
     Return the parent output definition of DEF.

 -- Function: ly:output-def-scope def
     Return the variable scope inside DEF.

 -- Function: ly:output-def-set-variable! def sym val
     Set an output definition DEF variable SYM to VAL.

 -- Function: ly:output-description output-def
     Return the description of translators in OUTPUT-DEF.

 -- Function: ly:output-find-context-def output-def context-name
     Return an alist of all context defs (matching CONTEXT-NAMEif given)
     in OUTPUT-DEF.

 -- Function: ly:output-formats
     Formats passed to ‘--format’ as a list of strings, used for the
     output.

 -- Function: ly:outputter-close outputter
     Close port of OUTPUTTER.

 -- Function: ly:outputter-dump-stencil outputter stencil
     Dump stencil EXPR onto OUTPUTTER.

 -- Function: ly:outputter-dump-string outputter str
     Dump STR onto OUTPUTTER.

 -- Function: ly:outputter-module outputter
     Return output module of OUTPUTTER.

 -- Function: ly:outputter-output-scheme outputter expr
     Eval EXPR in module of OUTPUTTER.

 -- Function: ly:outputter-port outputter
     Return output port for OUTPUTTER.

 -- Function: ly:page-marker? x
     Is X a ‘Page_marker’ object?

 -- Function: ly:page-turn-breaking pb
     Optimally break (pages and lines) the ‘Paper_book’ object PB such
     that page turns only happen in specified places, returning its
     pages.

 -- Function: ly:pango-font? f
     Is F a pango font?

 -- Function: ly:pango-font-physical-fonts f
     Return alist of ‘(ps-name file-name font-index)’ lists for Pango
     font F.

 -- Function: ly:paper-book? x
     Is X a ‘Paper_book’ object?

 -- Function: ly:paper-book-header pb
     Return the header definition (‘\header’) in ‘Paper_book’ object PB.

 -- Function: ly:paper-book-pages pb
     Return pages in ‘Paper_book’ object PB.

 -- Function: ly:paper-book-paper pb
     Return the paper output definition (‘\paper’) in ‘Paper_book’
     object PB.

 -- Function: ly:paper-book-performances pb
     Return performances in ‘Paper_book’ object PB.

 -- Function: ly:paper-book-scopes pb
     Return scopes in ‘Paper_book’ object PB.

 -- Function: ly:paper-book-systems pb
     Return systems in ‘Paper_book’ object PB.

 -- Function: ly:paper-column::print
     Optional stencil for ‘PaperColumn’ or‘NonMusicalPaperColumn’.
     Draws the ‘rank number’ of each column, its moment in time, a blue
     arrow showing the ideal distance, and a red arrow showing the
     minimum distance between columns.

 -- Function: ly:paper-fonts def
     Return a list containing the fonts from output definition DEF
     (e.g., ‘\paper’).

 -- Function: ly:paper-get-font def chain
     Find a font metric in output definition DEF satisfying the
     font-qualifiers in alist chain CHAIN, and return it.  (An alist
     chain is a list of alists, containing grob properties.)

 -- Function: ly:paper-get-number def sym
     Return the value of variable SYM in output definition DEF as a
     double.

 -- Function: ly:paper-outputscale def
     Return the output-scale for output definition DEF.

 -- Function: ly:paper-score-paper-systems paper-score
     Return vector of ‘paper_system’ objects from PAPER-SCORE.

 -- Function: ly:paper-system? obj
     Is OBJ a C++ ‘Prob’ object of type ‘paper-system’?

 -- Function: ly:paper-system-minimum-distance sys1 sys2
     Measure the minimum distance between these two paper-systems, using
     their stored skylines if possible and falling back to their extents
     otherwise.

 -- Function: ly:parse-file name
     Parse a single ‘.ly’ file.  Upon failure, throw ‘ly-file-failed’
     key.

 -- Function: ly:parse-string-expression parser-smob ly-code filename
          line
     Parse the string LY-CODE with PARSER-SMOB.  Return the contained
     music expression.  FILENAME and LINE are optional source
     indicators.

 -- Function: ly:parsed-undead-list!
     Return the list of objects that have been found live that should
     have been dead, and clear that list.

 -- Function: ly:parser-clear-error parser
     Clear error flag for PARSER, defaulting to current parser.

 -- Function: ly:parser-clone closures location
     Return a clone of current parser.  An association list of port
     positions to closures can be specified in CLOSURES in order to have
     ‘$’ and ‘#’ interpreted in their original lexical environment.  If
     LOCATION is a valid location, it becomes the source of all music
     expressions inside.

 -- Function: ly:parser-define! symbol val
     Bind SYMBOL to VAL in current parser’s module.

 -- Function: ly:parser-error msg input
     Display an error message and make current parser fail.  Without a
     current parser, trigger an ordinary error.

 -- Function: ly:parser-has-error? parser
     Does PARSER (defaulting to current parser) have an error flag?

 -- Function: ly:parser-include-string ly-code
     Include the string LY-CODE into the input stream for current
     parser.  Can only be used in immediate Scheme expressions (‘$’
     instead of ‘#’).

 -- Function: ly:parser-lexer parser
     Return the lexer for PARSER, defaulting to current parser

 -- Function: ly:parser-lookup symbol
     Look up SYMBOL in current parser’s module.  Return ‘'()’ if not
     defined.

 -- Function: ly:parser-output-name parser
     Return the base name of the output file.  If ‘parser’ is left off,
     use currently active parser.

 -- Function: ly:parser-parse-string parser-smob ly-code
     Parse the string LY-CODE with PARSER-SMOB.  Upon failure, throw
     ‘ly-file-failed’ key.

 -- Function: ly:parser-set-note-names names
     Replace current note names in parser.  NAMES is an alist of
     symbols.  This only has effect if the current mode is notes.

 -- Function: ly:performance-header performance
     Return header of performance.

 -- Function: ly:performance-set-header! performance module
     Set the performance header.

 -- Function: ly:performance-write performance filename name
     Write PERFORMANCE to FILENAME storing NAME as the name of the
     performance in the file metadata.

 -- Function: ly:pfb->pfa pfb-file-name
     Convert the contents of a Type 1 font in PFB format to PFA format.

 -- Function: ly:pitch? x
     Is X a ‘Pitch’ object?

 -- Function: ly:pitch<? p1 p2
     Is P1 lexicographically smaller than P2?

 -- Function: ly:pitch-alteration pp
     Extract the alteration from pitch PP.

 -- Function: ly:pitch-diff pitch root
     Return pitch DELTA such that ROOT transposed by DELTA equals PITCH.

 -- Function: ly:pitch-negate p
     Negate P.

 -- Function: ly:pitch-notename pp
     Extract the note name from pitch PP.

 -- Function: ly:pitch-octave pp
     Extract the octave from pitch PP.

 -- Function: ly:pitch-quartertones pp
     Calculate the number of quarter tones of PP from middle C.

 -- Function: ly:pitch-semitones pp
     Calculate the number of semitones of PP from middle C.

 -- Function: ly:pitch-steps p
     Number of steps counted from middle C of the pitch P.

 -- Function: ly:pitch-tones pp
     Calculate the number of tones of PP from middle C as a rational
     number.

 -- Function: ly:pitch-transpose p delta
     Transpose P by the amount DELTA, where DELTA is relative to
     middle C.

 -- Function: ly:pointer-group-interface::add-grob grob sym grob-element
     Add GROB-ELEMENT to GROB’s SYM grob array.

 -- Function: ly:position-on-line? sg spos
     Return whether SPOS is on a line of the staff associated with the
     grob SG (even on an extender line).

 -- Function: ly:prob? x
     Is X a ‘Prob’ object?

 -- Function: ly:prob-immutable-properties prob
     Retrieve an alist of immutable properties.

 -- Function: ly:prob-mutable-properties prob
     Retrieve an alist of mutable properties.

 -- Function: ly:prob-property prob sym val
     Return the value for property SYM of Prob object PROB.  If no value
     is found, return VAL or ‘'()’ if VAL is not specified.

 -- Function: ly:prob-property? obj sym
     Is boolean prop SYM of SYM set?

 -- Function: ly:prob-set-property! obj sym value
     Set property SYM of OBJ to VALUE.

 -- Function: ly:prob-type? obj type
     Is OBJ the specified prob-type?

 -- Function: ly:programming-error str rest
     A Scheme callable function to issue the internal warning STR.  The
     message is formatted with ‘format’ and REST.

 -- Function: ly:progress str rest
     A Scheme callable function to print progress STR.  The message is
     formatted with ‘format’ and REST.

 -- Function: ly:property-lookup-stats sym
     Return hash table with a property access corresponding to SYM.
     Choices are ‘prob’, ‘grob’, and ‘context’.

 -- Function: ly:protects
     Return hash of protected objects.

 -- Function: ly:pt num
     NUM printer points.

 -- Function: ly:pure-call data grob start end rest
     Convert property DATA (unpure-pure container or procedure) to value
     in a pure context defined by GROB, START, END, and possibly REST
     arguments.

 -- Function: ly:register-stencil-expression symbol
     Add SYMBOL as head of a stencil expression.

 -- Function: ly:relative-group-extent elements common axis
     Determine the extent of ELEMENTS relative to COMMON in the AXIS
     direction.

 -- Function: ly:reset-all-fonts
     Forget all about previously loaded fonts.

 -- Function: ly:round-filled-box xext yext blot
     Make a ‘Stencil’ object that prints a black box of dimensions XEXT,
     YEXT and roundness BLOT.

 -- Function: ly:round-filled-polygon points blot extroversion
     Make a ‘Stencil’ object that prints a black polygon with corners at
     the points defined by POINTS (list of coordinate pairs) and
     roundness BLOT.  OptionalEXTROVERSION shifts the outline outward,
     with thedefault of ‘-1.0’ keeping the outer boundary ofthe outline
     just inside of the polygon.

 -- Function: ly:run-translator mus output-def
     Process MUS according to OUTPUT-DEF.  An interpretation context is
     set up, and MUS is interpreted with it.  The context is returned in
     its final state.

     Optionally, this routine takes an object-key to to uniquely
     identify the score block containing it.

 -- Function: ly:score? x
     Is X a ‘Score’ object?

 -- Function: ly:score-add-output-def! score def
     Add an output definition DEF to SCORE.

 -- Function: ly:score-embedded-format score layout
     Run SCORE through LAYOUT (an output definition) scaled to correct
     output-scale already, returning a list of layout-lines.

 -- Function: ly:score-error? score
     Was there an error in the score?

 -- Function: ly:score-header score
     Return score header.

 -- Function: ly:score-music score
     Return score music.

 -- Function: ly:score-output-defs score
     All output definitions in a score.

 -- Function: ly:score-set-header! score module
     Set the score header.

 -- Function: ly:separation-item::print
     Optional stencil for ‘PaperColumn’ or‘NonMusicalPaperColumn’.
     Draws the ‘horizontal-skylines’ of each ‘PaperColumn’, showing the
     shapes used to determine the minimum distances between
     ‘PaperColumns’ at the note-spacing step, before staves have been
     spaced (vertically) on the page.

 -- Function: ly:set-default-scale scale
     Set the global default scale.  This determines the tuning of
     pitches with no accidentals or key signatures.  The first pitch is
     C. Alterations are calculated relative to this scale.  The number
     of pitches in this scale determines the number of scale steps that
     make up an octave.  Usually the 7-note major scale.

 -- Function: ly:set-grob-modification-callback cb
     Specify a procedure that will be called every time LilyPond
     modifies a grob property.  The callback will receive as arguments
     the grob that is being modified, the name of the C++ file in which
     the modification was requested, the line number in the C++ file in
     which the modification was requested, the name of the function in
     which the modification was requested, the property to be changed,
     and the new value for the property.

 -- Function: ly:set-middle-C! context
     Set the ‘middleCPosition’ variable in CONTEXT based on the
     variables ‘middleCClefPosition’ and ‘middleCOffset’.

 -- Function: ly:set-option var val
     Set a program option.

 -- Function: ly:set-origin! m origin
     This sets the origin given in ORIGIN to M.  M will typically be a
     music expression or a list of music.  List structures are searched
     recursively, but recursion stops at the changed music expressions
     themselves.  ORIGIN is generally of type ‘ly:input-location?’,
     defaulting to ‘(*location*)’.  Other valid values for ‘origin’ are
     a music expression which is then used as the source of location
     information, or ‘#f’ or ‘'()’ in which case no action is performed.
     The return value is M itself.

 -- Function: ly:set-property-cache-callback cb
     Specify a procedure that will be called whenever lilypond
     calculates a callback function and caches the result.  The callback
     will receive as arguments the grob whose property it is, the name
     of the property, the name of the callback that calculated the
     property, and the new (cached) value of the property.

 -- Function: ly:skyline? x
     Is X a ‘Skyline’ object?

 -- Function: ly:skyline-empty? sky
     Return whether SKY is empty.

 -- Function: ly:skyline-pair? x
     Is X a ‘Skyline_pair’ object?

 -- Function: ly:slur-score-count
     count number of slur scores.

 -- Function: ly:smob-protects
     Return LilyPond’s internal smob protection list.

 -- Function: ly:solve-spring-rod-problem springs rods length ragged
     Solve a spring and rod problem for COUNT objects, that are
     connected by COUNT-1 SPRINGS, and an arbitrary number of RODS.
     COUNT is implicitly given by SPRINGS and RODS.  The SPRINGS
     argument has the format ‘(ideal, inverse_hook)’ and RODS is of the
     form ‘(idx1, idx2, distance)’.

     LENGTH is a number, RAGGED a boolean.

     The function returns a list containing the force (positive for
     stretching, negative for compressing and ‘#f’ for non-satisfied
     constraints) followed by SPRING-COUNT+1 positions of the objects.

 -- Function: ly:source-file? x
     Is X a ‘Source_file’ object?

 -- Function: ly:source-files parser-smob
     A list of LilyPond files being processed;a PARSER may optionally be
     specified.

 -- Function: ly:spanner? g
     Is G a spanner object?

 -- Function: ly:spanner-bound spanner dir
     Get one of the bounds of SPANNER.  DIR is ‘-1’ for left, and ‘1’
     for right.

 -- Function: ly:spanner-broken-into spanner
     Return broken-into list for SPANNER.

 -- Function: ly:spanner-set-bound! spanner dir item
     Set grob ITEM as bound in direction DIR for SPANNER.

 -- Function: ly:spawn command rest
     Simple interface to g_spawn_sync STR.  The error is formatted with
     ‘format’ and REST.

 -- Function: ly:spring? x
     Is X a ‘Spring’ object?

 -- Function: ly:spring-set-inverse-compress-strength! spring strength
     Set the inverse compress STRENGTH of SPRING.

 -- Function: ly:spring-set-inverse-stretch-strength! spring strength
     Set the inverse stretch STRENGTH of SPRING.

 -- Function: ly:staff-symbol-line-thickness grob
     Returns the current staff-line thickness in the staff associated
     with GROB, expressed as a multiple of the current staff-space
     height.

 -- Function: ly:staff-symbol-staff-radius grob
     Returns the radius of the staff associated with GROB.

 -- Function: ly:staff-symbol-staff-space grob
     Returns the current staff-space height in the staff associated with
     GROB, expressed as a multiple of the default height of a
     staff-space in the traditional five-line staff.

 -- Function: ly:start-environment
     Return the environment (a list of strings) that was in effect at
     program start.

 -- Function: ly:stderr-redirect file-name mode
     Redirect stderr to FILE-NAME, opened with MODE.

 -- Function: ly:stencil? x
     Is X a ‘Stencil’ object?

 -- Function: ly:stencil-add args
     Combine stencils.  Takes any number of arguments.

 -- Function: ly:stencil-aligned-to stil axis dir
     Align STIL using its own extents.  DIR is a number.  ‘-1’ and ‘1’
     are left and right, respectively.  Other values are interpolated
     (so ‘0’ means the center).

 -- Function: ly:stencil-combine-at-edge first axis direction second
          padding
     Construct a stencil by putting SECOND next to FIRST.  AXIS can be 0
     (x-axis) or 1 (y-axis).  DIRECTION can be -1 (left or down) or 1
     (right or up).  The stencils are juxtaposed with PADDING as extra
     space.  FIRST and SECOND may also be ‘'()’ or ‘#f’.

 -- Function: ly:stencil-empty? stil axis
     Return whether STIL is empty.  If an optional AXIS is supplied, the
     emptiness check is restricted to that axis.

 -- Function: ly:stencil-expr stil
     Return the expression of STIL.

 -- Function: ly:stencil-extent stil axis
     Return a pair of numbers signifying the extent of STIL in AXIS
     direction (‘0’ or ‘1’ for x and y axis, respectively).

 -- Function: ly:stencil-fonts s
     Analyze S, and return a list of fonts used in S.

 -- Function: ly:stencil-in-color stc r g b
     Put STC in a different color.

 -- Function: ly:stencil-rotate stil angle x y
     Return a stencil STIL rotated ANGLE degrees around the relative
     offset (X, Y).  E.g., an offset of (-1, 1) will rotate the stencil
     around the left upper corner.

 -- Function: ly:stencil-rotate-absolute stil angle x y
     Return a stencil STIL rotated ANGLE degrees around point (X, Y),
     given in absolute coordinates.

 -- Function: ly:stencil-scale stil x y
     Scale stencil STIL using the horizontal and vertical scaling
     factors X and Y.  Negative values will flip or mirror STIL without
     changing its origin; this may result in collisions unless it is
     repositioned.

 -- Function: ly:stencil-stack first axis direction second padding
          mindist
     Construct a stencil by stacking SECOND next to FIRST.  AXIS can be
     0 (x-axis) or 1 (y-axis).  DIRECTION can be -1 (left or down) or 1
     (right or up).  The stencils are juxtaposed with PADDING as extra
     space.  FIRST and SECOND may also be ‘'()’ or ‘#f’.  As opposed to
     ‘ly:stencil-combine-at-edge’, metrics are suited for successively
     accumulating lines of stencils.  Also, SECOND stencil is drawn
     last.

     If MINDIST is specified, reference points are placed apart at least
     by this distance.  If either of the stencils is spacing, PADDING
     and MINDIST do not apply.

 -- Function: ly:stencil-translate stil offset
     Return a STIL, but translated by OFFSET (a pair of numbers).

 -- Function: ly:stencil-translate-axis stil amount axis
     Return a copy of STIL but translated by AMOUNT in AXIS direction.

 -- Function: ly:stream-event? obj
     Is ‘OBJ’ a ‘Stream_event’ object?

 -- Function: ly:string-percent-encode str
     Encode all characters in string STR with hexadecimal percent escape
     sequences, with the following exceptions: characters ‘-’, ‘.’, ‘/’,
     and ‘_’; and characters in ranges ‘0-9’, ‘A-Z’, and ‘a-z’.

 -- Function: ly:string-substitute a b s
     Replace string A by string B in string S.

 -- Function: ly:system-font-load name
     Load the OpenType system font ‘NAME.otf’.  Fonts loaded with this
     command must contain three additional SFNT font tables called
     ‘LILC’, ‘LILF’, and ‘LILY’, needed for typesetting musical
     elements.  Currently, only the Emmentaler and the Emmentaler-Brace
     fonts fulfill these requirements.

     Note that only ‘ly:font-get-glyph’ and derived code (like
     ‘\lookup’) can access glyphs from the system fonts; text strings
     are handled exclusively via the Pango interface.

 -- Function: ly:text-interface::interpret-markup
     Convert a text markup into a stencil.  Takes three arguments,
     LAYOUT, PROPS, and MARKUP.

     LAYOUT is a ‘\layout’ block; it may be obtained from a grob with
     ‘ly:grob-layout’.  PROPS is an alist chain, i.e.  a list of alists.
     This is typically obtained with ‘(ly:grob-alist-chain grob
     (ly:output-def-lookup layout 'text-font-defaults))’.  MARKUP is the
     markup text to be processed.

 -- Function: ly:translate-cpp-warning-scheme str
     Translates a string in C++ printf format and modifies it to use it
     for scheme formatting.

 -- Function: ly:translator? x
     Is X a ‘Translator’ object?

 -- Function: ly:translator-context trans
     Return the context of the translator object TRANS.

 -- Function: ly:translator-description me
     Return an alist of properties of translator ME.

 -- Function: ly:translator-group? x
     Is X a ‘Translator_group’ object?

 -- Function: ly:translator-name trans
     Return the type name of the translator object TRANS.  The name is a
     symbol.

 -- Function: ly:transpose-key-alist l pit
     Make a new key alist of L transposed by pitch PIT.

 -- Function: ly:truncate-list! lst i
     Take at most the first I of list LST.

 -- Function: ly:ttf->pfa ttf-file-name idx
     Convert the contents of a TrueType font file to PostScript Type 42
     font, returning it as a string.  The optional IDX argument is
     useful for TrueType collections (TTC) only; it specifies the font
     index within the TTC. The default value of IDX is 0.

 -- Function: ly:ttf-ps-name ttf-file-name idx
     Extract the PostScript name from a TrueType font.  The optional IDX
     argument is useful for TrueType collections (TTC) only; it
     specifies the font index within the TTC. The default value of IDX
     is 0.

 -- Function: ly:undead? x
     Is X a ‘Undead’ object?

 -- Function: ly:unit
     Return the unit used for lengths as a string.

 -- Function: ly:unpure-call data grob rest
     Convert property DATA (unpure-pure container or procedure) to value
     in an unpure context defined by GROB and possibly REST arguments.

 -- Function: ly:unpure-pure-container? x
     Is X a ‘Unpure_pure_container’ object?

 -- Function: ly:unpure-pure-container-pure-part pc
     Return the pure part of PC.

 -- Function: ly:unpure-pure-container-unpure-part pc
     Return the unpure part of PC.

 -- Function: ly:usage
     Print usage message.

 -- Function: ly:verbose-output?
     Was verbose output requested, i.e.  loglevel at least ‘DEBUG’?

 -- Function: ly:version
     Return the current lilypond version as a list, e.g., ‘(1 3 127
     uu1)’.

 -- Function: ly:warning str rest
     A Scheme callable function to issue the warning STR.  The message
     is formatted with ‘format’ and REST.

 -- Function: ly:warning-located location str rest
     A Scheme callable function to issue the warning STR at the
     specified location in an input file.  The message is formatted with
     ‘format’ and REST.

 -- Function: ly:wide-char->utf-8 wc
     Encode the Unicode codepoint WC, an integer, as UTF-8.


File: lilypond-notation.info,  Node: Cheat sheet,  Next: GNU Free Documentation License,  Prev: Notation manual tables,  Up: Top

Appendix B Cheat sheet
**********************

Syntax                    Description            Example
                                                 
‘1 2 8 16’                durations               [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘c4. c4..’                augmentation dots       [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘c d e f g a b ’          scale                   [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘fis bes’                 alteration              [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘\clef treble \clef       clefs                   [image src="" alt="[image of music]" text="image of music" ]
bass ’                                           
‘\time 3/4 \time 4/4 ’    time signature          [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘r4 r8’                   rest                    [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘d ~ d’                   tie                     [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘\key es \major ’         key signature           [image src="" alt="[image of music]" text="image of music" ]
                                                 
NOTE‘'’                   raise octave            [image src="" alt="[image of music]" text="image of music" ]
                                                 
NOTE‘,’                   lower octave            [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘c( d e)’                 slur                    [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘c\( c( d) e\)’           phrasing slur           [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘a8[ b]’                  beam                    [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘<< \new Staff … >>’      more staves             [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘c-> c-.’                 articulations           [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘c2\mf c\sfz’             dynamics                [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘a\< a a\!’               crescendo               [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘a\> a a\!’               decrescendo             [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘< >’                     chord                   [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘\partial 8’              pickup / upbeat         [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘\tuplet 3/2 {f g a}’     triplets                [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘\grace’                  grace notes             [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘\lyricmode { twinkle     entering lyrics        twinkle
}’                                               
‘\new Lyrics’             printing lyrics         [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘twin -- kle’             lyric hyphen            [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘\chordmode { c:dim       chords                  [image src="" alt="[image of music]" text="image of music" ]
f:maj7 }’                                        
‘\new ChordNames’         printing chord names    [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘<<{e f} \\ {c d}>>’      polyphony               [image src="" alt="[image of music]" text="image of music" ]
                                                 
‘s4 s8 s16’               spacer rests           


File: lilypond-notation.info,  Node: GNU Free Documentation License,  Next: LilyPond command index,  Prev: Cheat sheet,  Up: Top

Appendix C GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with…Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: lilypond-notation.info,  Node: LilyPond command index,  Next: LilyPond index,  Prev: GNU Free Documentation License,  Up: Top

Appendix D LilyPond command index
*********************************

This index lists all the LilyPond commands and keywords with links to
those sections of the manual which describe or discuss their use.  Each
link is in two parts.  The first part points to the exact location in
the manual where the command or keyword appears; the second part points
to the start of the section of the manual in which the command or
keyword appears.

 [index ]
* Menu:

* !:                                     Accidentals.         (line  33)
* "|":                                   Bar and bar number checks.
                                                              (line  38)
* ':                                     Absolute octave entry.
                                                              (line  16)
* ,:                                     Absolute octave entry.
                                                              (line  16)
* -:                                     Articulations and ornamentations.
                                                              (line   6)
* .:                                     Durations.           (line  47)
* /:                                     Extended and altered chords.
                                                              (line  79)
* /+:                                    Extended and altered chords.
                                                              (line  87)
* ::                                     Tremolo repeats.     (line  39)
* <:                                     Chorded notes.       (line   6)
* <...>:                                 Chorded notes.       (line   6)
* =:                                     Octave checks.       (line   6)
* >:                                     Chorded notes.       (line   6)
* ?:                                     Accidentals.         (line  33)
* [:                                     Manual beams.        (line   6)
* \!:                                    Dynamics.            (line  19)
* \(:                                    Phrasing slurs.      (line   6)
* \):                                    Phrasing slurs.      (line   6)
* \<:                                    Dynamics.            (line  19)
* \=:                                    Slurs.               (line  20)
* \= <1>:                                Available music functions.
                                                              (line 564)
* \>:                                    Dynamics.            (line  19)
* \abs-fontsize:                         Selecting font and font size.
                                                              (line  18)
* \abs-fontsize <1>:                     Font.                (line   7)
* \accent:                               Articulations and ornamentations.
                                                              (line   6)
* \accepts:                              Defining new contexts.
                                                              (line   6)
* \accepts <1>:                          Defining new contexts.
                                                              (line  87)
* \accepts <2>:                          Context layout order.
                                                              (line   6)
* \acciaccatura:                         Grace notes.         (line   6)
* \accidentalStyle:                      Automatic accidentals.
                                                              (line   6)
* \addChordShape:                        Predefined fret diagrams.
                                                              (line 183)
* \addlyrics:                            Aligning lyrics to a melody.
                                                              (line   6)
* \addlyrics <1>:                        Automatic syllable durations.
                                                              (line   6)
* \addlyrics <2>:                        Automatic syllable durations.
                                                              (line  54)
* \addQuote:                             Quoting other voices.
                                                              (line   6)
* \aeolian:                              Key signature.       (line  20)
* \afterGrace:                           Grace notes.         (line  40)
* \aikenHeads:                           Shape note heads.    (line   6)
* \aikenHeadsMinor:                      Shape note heads.    (line  25)
* \alias:                                Defining new contexts.
                                                              (line   6)
* \allowPageTurn:                        Optimal page turning.
                                                              (line  67)
* \alterBroken:                          Using alterBroken.   (line   6)
* \alternative:                          Long repeats.        (line  17)
* \appendToTag:                          Using tags.          (line 168)
* \appoggiatura:                         Grace notes.         (line   6)
* \arpeggio:                             Arpeggio.            (line   6)
* \arpeggioArrowDown:                    Arpeggio.            (line   6)
* \arpeggioArrowUp:                      Arpeggio.            (line   6)
* \arpeggioBracket:                      Arpeggio.            (line  27)
* \arpeggioNormal:                       Arpeggio.            (line   6)
* \arpeggioParenthesis:                  Arpeggio.            (line  27)
* \arpeggioParenthesisDashed:            Arpeggio.            (line  27)
* \arrow-head:                           Graphic notation inside markup.
                                                              (line  50)
* \arrow-head <1>:                       Graphic.             (line   7)
* \ascendens:                            Gregorian square neume ligatures.
                                                              (line  21)
* \ascendens <1>:                        Gregorian square neume ligatures.
                                                              (line 261)
* \auctum:                               Gregorian square neume ligatures.
                                                              (line  21)
* \auctum <1>:                           Gregorian square neume ligatures.
                                                              (line 261)
* \augmentum:                            Gregorian square neume ligatures.
                                                              (line 271)
* \auto-footnote:                        Other.               (line   7)
* \autoBeamOff:                          Automatic beams.     (line   8)
* \autoBeamOff <1>:                      Cross-staff stems.   (line   6)
* \autoBeamOn:                           Automatic beams.     (line   8)
* \autoBreaksOff:                        Line breaking.       (line   6)
* \autoBreaksOn:                         Line breaking.       (line   6)
* \autochange:                           Changing staff automatically.
                                                              (line   6)
* \autoLineBreaksOff:                    Line breaking.       (line   6)
* \autoLineBreaksOn:                     Line breaking.       (line   6)
* \autoPageBreaksOff:                    Manual page breaking.
                                                              (line   6)
* \autoPageBreaksOn:                     Manual page breaking.
                                                              (line   6)
* \backslashed-digit:                    Other.               (line  23)
* \balloonGrobText:                      Balloon help.        (line   6)
* \balloonLengthOff:                     Balloon help.        (line   6)
* \balloonLengthOn:                      Balloon help.        (line   6)
* \balloonText:                          Balloon help.        (line   6)
* \bar:                                  Bar lines.           (line   6)
* \bar <1>:                              Bar lines.           (line 268)
* \barNumberCheck:                       Bar and bar number checks.
                                                              (line  52)
* \beam:                                 Graphic.             (line  23)
* \beamExceptions:                       Setting automatic beam behavior.
                                                              (line   6)
* \bendAfter:                            Falls and doits.     (line   6)
* \bold:                                 Selecting font and font size.
                                                              (line   6)
* \bold <1>:                             Font.                (line  20)
* \book:                                 Multiple scores in a book.
                                                              (line   6)
* \book <1>:                             Multiple scores in a book.
                                                              (line  20)
* \book <2>:                             File structure.      (line   6)
* \bookOutputName:                       Output file names.   (line   6)
* \bookOutputSuffix:                     Output file names.   (line   6)
* \bookpart:                             Multiple scores in a book.
                                                              (line  62)
* \bookpart <1>:                         File structure.      (line   6)
* \bookpart <2>:                         Manual page breaking.
                                                              (line  37)
* \box:                                  Graphic notation inside markup.
                                                              (line   8)
* \box <1>:                              Font.                (line  31)
* \bracket:                              New dynamic marks.   (line  16)
* \bracket <1>:                          Graphic notation inside markup.
                                                              (line   8)
* \bracket <2>:                          Graphic.             (line  30)
* \break:                                Line breaking.       (line   6)
* \breathe:                              Breath marks.        (line   6)
* \breve:                                Durations.           (line   6)
* \breve <1>:                            Rests.               (line   6)
* \cadenzaOff:                           Unmetered music.     (line   6)
* \cadenzaOn:                            Unmetered music.     (line   6)
* \caesura:                              Divisiones.          (line  29)
* \caps:                                 Font.                (line  48)
* \cavum:                                Gregorian square neume ligatures.
                                                              (line  22)
* \cavum <1>:                            Gregorian square neume ligatures.
                                                              (line 262)
* \center-align:                         Text alignment.      (line  10)
* \center-align <1>:                     Align.               (line   7)
* \center-column:                        Text alignment.      (line  87)
* \center-column <1>:                    Align.               (line  20)
* \change:                               Changing staff manually.
                                                              (line   6)
* \char:                                 Other.               (line  38)
* \chordmode:                            Relative octave entry.
                                                              (line 152)
* \chordmode <1>:                        Transpose.           (line 145)
* \chordmode <2>:                        Predefined fret diagrams.
                                                              (line  66)
* \chordRepeats:                         Default tablatures.  (line  98)
* \chords:                               Printing chord names.
                                                              (line  52)
* \circle:                               Graphic notation inside markup.
                                                              (line   8)
* \circle <1>:                           Graphic.             (line  40)
* \clef:                                 Clef.                (line   6)
* \cm:                                   Distances and measurements.
                                                              (line   6)
* \coda:                                 Articulations and ornamentations.
                                                              (line   6)
* \column:                               Text alignment.      (line  87)
* \column <1>:                           Align.               (line  35)
* \column-lines:                         Text markup list commands.
                                                              (line   9)
* \combine:                              Graphic notation inside markup.
                                                              (line  50)
* \combine <1>:                          Align.               (line  51)
* \compound-meter:                       Music.               (line   7)
* \compoundMeter:                        Polymetric notation. (line  90)
* \compressMMRests:                      Full measure rests.  (line   6)
* \compressMMRests <1>:                  Full measure rests.  (line  84)
* \concat:                               Align.               (line  66)
* \consists:                             Defining new contexts.
                                                              (line   6)
* \context:                              Creating and referencing contexts.
                                                              (line   6)
* \context <1>:                          Changing all contexts of the same type.
                                                              (line   6)
* \cr:                                   Dynamics.            (line  19)
* \cresc:                                Dynamics.            (line  74)
* \crescHairpin:                         Dynamics.            (line  85)
* \crescTextCresc:                       Dynamics.            (line  85)
* \crossStaff:                           Cross-staff stems.   (line   6)
* \cueClef:                              Formatting cue notes.
                                                              (line   6)
* \cueDuring:                            Formatting cue notes.
                                                              (line   6)
* \cueDuringWithClef:                    Formatting cue notes.
                                                              (line   6)
* \customTabClef:                        Music.               (line  22)
* \decr:                                 Dynamics.            (line  19)
* \decresc:                              Dynamics.            (line  74)
* \defaultchild:                         Context layout order.
                                                              (line  57)
* \defaultTimeSignature:                 Time signature.      (line  28)
* \defineBarLine:                        Bar lines.           (line 173)
* \deminutum:                            Gregorian square neume ligatures.
                                                              (line  22)
* \deminutum <1>:                        Gregorian square neume ligatures.
                                                              (line 262)
* \denies:                               Defining new contexts.
                                                              (line   6)
* \denies <1>:                           Defining new contexts.
                                                              (line 116)
* \denies <2>:                           Context layout order.
                                                              (line   6)
* \descendens:                           Gregorian square neume ligatures.
                                                              (line  21)
* \descendens <1>:                       Gregorian square neume ligatures.
                                                              (line 261)
* \dim:                                  Dynamics.            (line  74)
* \dimHairpin:                           Dynamics.            (line  85)
* \dimTextDecr:                          Dynamics.            (line  85)
* \dimTextDecresc:                       Dynamics.            (line  85)
* \dimTextDim:                           Dynamics.            (line  85)
* \dir-column:                           Align.               (line  81)
* \discant:                              Accordion Registers. (line   7)
* \displayLilyMusic:                     Displaying LilyPond notation.
                                                              (line   6)
* \divisioMaior:                         Divisiones.          (line  29)
* \divisioMaxima:                        Divisiones.          (line  29)
* \divisioMinima:                        Divisiones.          (line  29)
* \dorian:                               Key signature.       (line  20)
* \dotsDown:                             Durations.           (line  63)
* \dotsNeutral:                          Durations.           (line  63)
* \dotsUp:                               Durations.           (line  63)
* \doubleflat:                           Music.               (line  26)
* \doublesharp:                          Music.               (line  34)
* \downbow:                              Articulations and ornamentations.
                                                              (line   6)
* \downbow <1>:                          Bowing indications.  (line   6)
* \downmordent:                          Articulations and ornamentations.
                                                              (line   6)
* \downprall:                            Articulations and ornamentations.
                                                              (line   6)
* \draw-circle:                          Graphic notation inside markup.
                                                              (line  50)
* \draw-circle <1>:                      Graphic.             (line  57)
* \draw-dashed-line:                     Graphic.             (line  68)
* \draw-dotted-line:                     Graphic.             (line  91)
* \draw-hline:                           Graphic.             (line 112)
* \draw-line:                            Graphic notation inside markup.
                                                              (line  50)
* \draw-line <1>:                        Graphic.             (line 129)
* \draw-squiggle-line:                   Graphic.             (line 141)
* \drummode:                             Instantiating new staves.
                                                              (line   6)
* \dynamic:                              New dynamic marks.   (line  16)
* \dynamic <1>:                          Font.                (line  60)
* \dynamicDown:                          Dynamics.            (line 104)
* \dynamicNeutral:                       Dynamics.            (line 104)
* \dynamicUp:                            Dynamics.            (line 104)
* \easyHeadsOff:                         Easy notation note heads.
                                                              (line   6)
* \easyHeadsOn:                          Easy notation note heads.
                                                              (line   6)
* \ellipse:                              Graphic.             (line 171)
* \epsfile:                              Graphic notation inside markup.
                                                              (line  67)
* \epsfile <1>:                          Graphic.             (line 189)
* \espressivo:                           Articulations and ornamentations.
                                                              (line   6)
* \espressivo <1>:                       Dynamics.            (line  65)
* \etc:                                  Substitution function examples.
                                                              (line  46)
* \eyeglasses:                           Other.               (line  47)
* \f:                                    Dynamics.            (line   6)
* \featherDurations:                     Feathered beams.     (line   6)
* \fermata:                              Articulations and ornamentations.
                                                              (line   6)
* \fermata <1>:                          Music.               (line  42)
* \fermataMarkup:                        Full measure rests.  (line  60)
* \fermataMarkup <1>:                    Full measure rests.  (line  84)
* \fermataMarkup <2>:                    Articulations and ornamentations.
                                                              (line   6)
* \ff:                                   Dynamics.            (line   6)
* \fff:                                  Dynamics.            (line   6)
* \ffff:                                 Dynamics.            (line   6)
* \fffff:                                Dynamics.            (line   6)
* \fill-line:                            Text alignment.      (line 105)
* \fill-line <1>:                        Align.               (line 108)
* \fill-with-pattern:                    Align.               (line 135)
* \filled-box:                           Graphic notation inside markup.
                                                              (line  50)
* \filled-box <1>:                       Graphic.             (line 200)
* \finalis:                              Divisiones.          (line  30)
* \finger:                               Fingering instructions.
                                                              (line   6)
* \finger <1>:                           Font.                (line  72)
* \first-visible:                        Other.               (line  53)
* \fixed:                                Absolute octave entry.
                                                              (line  29)
* \flageolet:                            Articulations and ornamentations.
                                                              (line   6)
* \flat:                                 Music.               (line  55)
* \flexa:                                Gregorian square neume ligatures.
                                                              (line 268)
* \fontCaps:                             Font.                (line  82)
* \fontsize:                             Selecting font and font size.
                                                              (line  18)
* \fontsize <1>:                         Font.                (line  89)
* \footnote:                             Footnotes in music expressions.
                                                              (line   6)
* \footnote <1>:                         Other.               (line  65)
* \fp:                                   Dynamics.            (line   6)
* \fraction:                             Other.               (line  77)
* \freeBass:                             Accordion Registers. (line  37)
* \frenchChords:                         Customizing chord names.
                                                              (line 135)
* \fret-diagram:                         Fret diagram markups.
                                                              (line  55)
* \fret-diagram <1>:                     Instrument Specific Markup.
                                                              (line   7)
* \fret-diagram-terse:                   Fret diagram markups.
                                                              (line 133)
* \fret-diagram-terse <1>:               Instrument Specific Markup.
                                                              (line  66)
* \fret-diagram-verbose:                 Fret diagram markups.
                                                              (line 200)
* \fret-diagram-verbose <1>:             Instrument Specific Markup.
                                                              (line 104)
* \fromproperty:                         Other.               (line  88)
* \funkHeads:                            Shape note heads.    (line   6)
* \funkHeadsMinor:                       Shape note heads.    (line  25)
* \general-align:                        Text alignment.      (line  65)
* \general-align <1>:                    Align.               (line 160)
* \germanChords:                         Customizing chord names.
                                                              (line 134)
* \glissando:                            Glissando.           (line   6)
* \grace:                                Grace notes.         (line   6)
* \halfopen:                             Articulations and ornamentations.
                                                              (line   6)
* \halign:                               Text alignment.      (line  24)
* \halign <1>:                           Align.               (line 192)
* \harmonic:                             Harmonics.           (line   6)
* \harmonic <1>:                         Default tablatures.  (line 193)
* \harmonicByFret:                       Default tablatures.  (line 193)
* \harmonicByRatio:                      Default tablatures.  (line 193)
* \harmonicsOff:                         Harmonics.           (line   8)
* \harmonicsOn:                          Harmonics.           (line   8)
* \harp-pedal:                           Instrument Specific Markup.
                                                              (line 163)
* \hbracket:                             Graphic notation inside markup.
                                                              (line   8)
* \hbracket <1>:                         Graphic.             (line 218)
* \hcenter-in:                           Align.               (line 222)
* \header:                               File structure.      (line   6)
* \hide:                                 Making objects transparent.
                                                              (line   6)
* \hideKeySignature:                     Bagpipe definitions. (line   6)
* \hideNotes:                            Hidden notes.        (line   6)
* \hideSplitTiedTabNotes:                Default tablatures.  (line 157)
* \hideStaffSwitch:                      Staff-change lines.  (line   6)
* \hspace:                               Align.               (line 245)
* \huge:                                 Selecting notation font size.
                                                              (line   6)
* \huge <1>:                             Selecting font and font size.
                                                              (line 114)
* \huge <2>:                             Font.                (line 106)
* \improvisationOff:                     Improvisation.       (line   6)
* \improvisationOff <1>:                 Showing melody rhythms.
                                                              (line  27)
* \improvisationOn:                      Improvisation.       (line   6)
* \improvisationOn <1>:                  Showing melody rhythms.
                                                              (line  27)
* \in:                                   Distances and measurements.
                                                              (line   6)
* \incipit:                              Incipits.            (line   6)
* \inclinatum:                           Gregorian square neume ligatures.
                                                              (line  20)
* \inclinatum <1>:                       Gregorian square neume ligatures.
                                                              (line 260)
* \include:                              Including LilyPond files.
                                                              (line   6)
* \inherit-acceptability:                Defining new contexts.
                                                              (line  96)
* \inStaffSegno:                         Normal repeats.      (line 128)
* \inversion:                            Inversion.           (line   6)
* \ionian:                               Key signature.       (line  20)
* \italianChords:                        Customizing chord names.
                                                              (line 135)
* \italic:                               Selecting font and font size.
                                                              (line   6)
* \italic <1>:                           Font.                (line 117)
* \justified-lines:                      Multi-page markup.   (line   6)
* \justified-lines <1>:                  Text markup list commands.
                                                              (line  18)
* \justify:                              Text alignment.      (line 125)
* \justify <1>:                          Align.               (line 300)
* \justify-field:                        Align.               (line 257)
* \justify-line:                         Align.               (line 283)
* \justify-string:                       Align.               (line 321)
* \keepWithTag:                          Using tags.          (line   6)
* \key:                                  Key signature.       (line   6)
* \key <1>:                              Shape note heads.    (line  25)
* \killCues:                             Formatting cue notes.
                                                              (line 194)
* \label:                                Reference to page numbers.
                                                              (line  43)
* \laissezVibrer:                        Ties.                (line  62)
* \large:                                Selecting notation font size.
                                                              (line   6)
* \large <1>:                            Selecting font and font size.
                                                              (line 114)
* \large <2>:                            Font.                (line 128)
* \larger:                               Selecting font and font size.
                                                              (line  18)
* \larger <1>:                           Selecting font and font size.
                                                              (line 114)
* \larger <2>:                           Font.                (line 139)
* \layout:                               File structure.      (line   6)
* \layout <1>:                           The layout block.    (line   6)
* \layout <2>:                           Output definitions - blueprints for contexts.
                                                              (line  10)
* \layout <3>:                           Changing all contexts of the same type.
                                                              (line   6)
* \left-align:                           Text alignment.      (line  10)
* \left-align <1>:                       Align.               (line 346)
* \left-brace:                           Other.               (line 106)
* \left-column:                          Align.               (line 359)
* \lheel:                                Articulations and ornamentations.
                                                              (line   6)
* \line:                                 Align.               (line 374)
* \linea:                                Gregorian square neume ligatures.
                                                              (line  22)
* \linea <1>:                            Gregorian square neume ligatures.
                                                              (line 262)
* \lineprall:                            Articulations and ornamentations.
                                                              (line   6)
* \locrian:                              Key signature.       (line  20)
* \longa:                                Durations.           (line   6)
* \longa <1>:                            Rests.               (line   6)
* \longfermata:                          Articulations and ornamentations.
                                                              (line   6)
* \lookup:                               Other.               (line 116)
* \lower:                                Text alignment.      (line  40)
* \lower <1>:                            Align.               (line 389)
* \ltoe:                                 Articulations and ornamentations.
                                                              (line   6)
* \lydian:                               Key signature.       (line  20)
* \lyricmode:                            Entering lyrics.     (line   6)
* \lyricmode <1>:                        Aligning lyrics to a melody.
                                                              (line   6)
* \lyricsto:                             Aligning lyrics to a melody.
                                                              (line   6)
* \lyricsto <1>:                         Automatic syllable durations.
                                                              (line   6)
* \lyricsto <2>:                         Automatic syllable durations.
                                                              (line  32)
* \magnify:                              Selecting font and font size.
                                                              (line  18)
* \magnify <1>:                          Font.                (line 150)
* \magnifyMusic:                         Selecting notation font size.
                                                              (line   6)
* \major:                                Key signature.       (line  20)
* \makeClusters:                         Clusters.            (line   6)
* \map-markup-commands:                  Text markup list commands.
                                                              (line  30)
* \marcato:                              Articulations and ornamentations.
                                                              (line   6)
* \mark:                                 Rehearsal marks.     (line   6)
* \mark <1>:                             Text marks.          (line   6)
* \markalphabet:                         Other.               (line 129)
* \markLengthOff:                        Metronome marks.     (line  54)
* \markLengthOff <1>:                    Text marks.          (line  52)
* \markLengthOn:                         Metronome marks.     (line  54)
* \markLengthOn <1>:                     Text marks.          (line  52)
* \markletter:                           Other.               (line 140)
* \markup:                               Text marks.          (line   6)
* \markup <1>:                           Separate text.       (line   6)
* \markup <2>:                           Separate text.       (line  33)
* \markup <3>:                           Text markup introduction.
                                                              (line   6)
* \markuplist:                           Separate text.       (line  33)
* \markuplist <1>:                       Multi-page markup.   (line   6)
* \markuplist <2>:                       Multi-page markup.   (line  44)
* \maxima:                               Durations.           (line   6)
* \maxima <1>:                           Rests.               (line   6)
* \medium:                               Font.                (line 169)
* \melisma:                              Multiple notes to one syllable.
                                                              (line   6)
* \melismaEnd:                           Multiple notes to one syllable.
                                                              (line   6)
* \mergeDifferentlyDottedOff:            Collision resolution.
                                                              (line   6)
* \mergeDifferentlyDottedOn:             Collision resolution.
                                                              (line   6)
* \mergeDifferentlyHeadedOff:            Collision resolution.
                                                              (line   6)
* \mergeDifferentlyHeadedOn:             Collision resolution.
                                                              (line   6)
* \mf:                                   Dynamics.            (line   6)
* \midi:                                 File structure.      (line   6)
* \midi <1>:                             Output definitions - blueprints for contexts.
                                                              (line  17)
* \minor:                                Key signature.       (line  20)
* \mixolydian:                           Key signature.       (line  20)
* \mm:                                   Distances and measurements.
                                                              (line   6)
* \modalInversion:                       Modal transformations.
                                                              (line  61)
* \modalTranspose:                       Modal transformations.
                                                              (line  18)
* \mordent:                              Articulations and ornamentations.
                                                              (line   6)
* \mp:                                   Dynamics.            (line   6)
* \musicglyph:                           Rehearsal marks.     (line  81)
* \musicglyph <1>:                       Music.               (line  63)
* \name:                                 Defining new contexts.
                                                              (line   6)
* \natural:                              Music.               (line  76)
* \new:                                  Creating and referencing contexts.
                                                              (line   6)
* \newSpacingSection:                    New spacing section. (line   6)
* \noBeam:                               Manual beams.        (line  18)
* \noBreak:                              Line breaking.       (line   6)
* \noPageBreak:                          Manual page breaking.
                                                              (line   6)
* \noPageTurn:                           Optimal page turning.
                                                              (line  67)
* \normal-size-sub:                      Font.                (line 185)
* \normal-size-super:                    Selecting font and font size.
                                                              (line  62)
* \normal-size-super <1>:                Font.                (line 199)
* \normal-text:                          Font.                (line 213)
* \normalsize:                           Selecting notation font size.
                                                              (line   6)
* \normalsize <1>:                       Selecting font and font size.
                                                              (line 114)
* \normalsize <2>:                       Font.                (line 230)
* \note:                                 Music.               (line 106)
* \note-by-number:                       Music.               (line  84)
* \null:                                 Text alignment.      (line  40)
* \null <1>:                             Other.               (line 152)
* \number:                               Font.                (line 246)
* \numericTimeSignature:                 Time signature.      (line  28)
* \octaveCheck:                          Octave checks.       (line   6)
* \omit:                                 Removing the stencil.
                                                              (line   6)
* \on-the-fly:                           Custom layout for headers and footers.
                                                              (line  16)
* \on-the-fly <1>:                       Other.               (line 160)
* \once:                                 The override command.
                                                              (line  80)
* \oneVoice:                             Single-staff polyphony.
                                                              (line   6)
* \open:                                 Articulations and ornamentations.
                                                              (line   6)
* \open <1>:                             Bowing indications.  (line   6)
* \oriscus:                              Gregorian square neume ligatures.
                                                              (line  21)
* \oriscus <1>:                          Gregorian square neume ligatures.
                                                              (line 261)
* \ottava:                               Ottava brackets.     (line   6)
* \oval:                                 Graphic.             (line 230)
* \overlay:                              Align.               (line 401)
* \override:                             The override command.
                                                              (line   6)
* \override <1>:                         set versus override. (line   6)
* \override <2>:                         Other.               (line 165)
* \override-lines:                       Text markup list commands.
                                                              (line  40)
* \overrideProperty:                     set versus override. (line  46)
* \overrideTimeSignatureSettings:        Time signature.      (line  48)
* \overtie:                              Font.                (line 258)
* \p:                                    Dynamics.            (line   6)
* \pad-around:                           Graphic notation inside markup.
                                                              (line  26)
* \pad-around <1>:                       Align.               (line 415)
* \pad-markup:                           Graphic notation inside markup.
                                                              (line  26)
* \pad-markup <1>:                       Align.               (line 431)
* \pad-to-box:                           Graphic notation inside markup.
                                                              (line  26)
* \pad-to-box <1>:                       Align.               (line 447)
* \pad-x:                                Graphic notation inside markup.
                                                              (line  26)
* \pad-x <1>:                            Align.               (line 463)
* \page-link:                            Other.               (line 189)
* \page-ref:                             Reference to page numbers.
                                                              (line  43)
* \page-ref <1>:                         Other.               (line 198)
* \pageBreak:                            Manual page breaking.
                                                              (line   6)
* \pageTurn:                             Optimal page turning.
                                                              (line  67)
* \paper:                                File structure.      (line   6)
* \paper <1>:                            Paper size and automatic scaling.
                                                              (line   6)
* \parallelMusic:                        Writing music in parallel.
                                                              (line   6)
* \parenthesize:                         Parentheses.         (line   6)
* \parenthesize <1>:                     Graphic.             (line 248)
* \partcombine:                          Automatic part combining.
                                                              (line   6)
* \partcombine <1>:                      Polyphony with shared lyrics.
                                                              (line   6)
* \partcombineApart:                     Automatic part combining.
                                                              (line  92)
* \partcombineAutomatic:                 Automatic part combining.
                                                              (line  92)
* \partcombineChords:                    Automatic part combining.
                                                              (line  92)
* \partcombineSoloI:                     Automatic part combining.
                                                              (line  92)
* \partcombineSoloII:                    Automatic part combining.
                                                              (line  92)
* \partcombineUnisono:                   Automatic part combining.
                                                              (line  92)
* \partial:                              Upbeats.             (line   6)
* \partial <1>:                          Long repeats.        (line  16)
* \partial <2>:                          Normal repeats.      (line  87)
* \path:                                 Graphic.             (line 279)
* \pattern:                              Other.               (line 209)
* \pes:                                  Gregorian square neume ligatures.
                                                              (line 268)
* \phrasingSlurDashed:                   Phrasing slurs.      (line  22)
* \phrasingSlurDashPattern:              Phrasing slurs.      (line  49)
* \phrasingSlurDotted:                   Phrasing slurs.      (line  22)
* \phrasingSlurDown:                     Phrasing slurs.      (line  14)
* \phrasingSlurHalfDashed:               Phrasing slurs.      (line  35)
* \phrasingSlurHalfSolid:                Phrasing slurs.      (line  35)
* \phrasingSlurNeutral:                  Phrasing slurs.      (line  14)
* \phrasingSlurSolid:                    Phrasing slurs.      (line  22)
* \phrasingSlurUp:                       Phrasing slurs.      (line  14)
* \phrygian:                             Key signature.       (line  20)
* \pitchedTrill:                         Trills.              (line  52)
* \portato:                              Articulations and ornamentations.
                                                              (line   6)
* \postscript:                           Graphic notation inside markup.
                                                              (line  67)
* \postscript <1>:                       Graphic.             (line 337)
* \powerChords:                          Indicating power chords.
                                                              (line   6)
* \pp:                                   Dynamics.            (line   6)
* \ppp:                                  Dynamics.            (line   6)
* \pppp:                                 Dynamics.            (line   6)
* \ppppp:                                Dynamics.            (line   6)
* \prall:                                Articulations and ornamentations.
                                                              (line   6)
* \pralldown:                            Articulations and ornamentations.
                                                              (line   6)
* \prallmordent:                         Articulations and ornamentations.
                                                              (line   6)
* \prallprall:                           Articulations and ornamentations.
                                                              (line   6)
* \prallup:                              Articulations and ornamentations.
                                                              (line   6)
* \predefinedFretboardsOff:              Automatic fret diagrams.
                                                              (line  28)
* \predefinedFretboardsOn:               Automatic fret diagrams.
                                                              (line  28)
* \property-recursive:                   Other.               (line 222)
* \pt:                                   Distances and measurements.
                                                              (line   6)
* \pushToTag:                            Using tags.          (line 168)
* \put-adjacent:                         Align.               (line 479)
* \quilisma:                             Gregorian square neume ligatures.
                                                              (line  21)
* \quilisma <1>:                         Gregorian square neume ligatures.
                                                              (line 261)
* \quoteDuring:                          Quoting other voices.
                                                              (line   6)
* \quoteDuring <1>:                      Formatting cue notes.
                                                              (line   6)
* \raise:                                Text alignment.      (line  40)
* \raise <1>:                            Align.               (line 483)
* \relative:                             Relative octave entry.
                                                              (line   6)
* \relative <1>:                         Relative octave entry.
                                                              (line 152)
* \relative <2>:                         Transpose.           (line 145)
* \relative <3>:                         Changing staff automatically.
                                                              (line  37)
* \RemoveAllEmptyStaves:                 Hiding staves.       (line   6)
* \RemoveEmptyStaves:                    Hiding staves.       (line   6)
* \removeWithTag:                        Using tags.          (line   6)
* \repeat:                               Long repeats.        (line  17)
* \repeat percent:                       Percent repeats.     (line   6)
* \repeat tremolo:                       Tremolo repeats.     (line   6)
* \repeatTie:                            Ties.                (line  49)
* \repeatTie <1>:                        Normal repeats.      (line 117)
* \repeatTie <2>:                        Lyrics and repeats.  (line 255)
* \replace:                              Font.                (line 278)
* \rest:                                 Rests.               (line   6)
* \rest <1>:                             Music.               (line 144)
* \rest-by-number:                       Music.               (line 126)
* \retrograde:                           Retrograde.          (line   6)
* \reverseturn:                          Articulations and ornamentations.
                                                              (line   6)
* \revert:                               The override command.
                                                              (line  48)
* \revertTimeSignatureSettings:          Time signature.      (line 103)
* \rfz:                                  Dynamics.            (line   6)
* \rheel:                                Articulations and ornamentations.
                                                              (line   6)
* \right-align:                          Text alignment.      (line  10)
* \right-align <1>:                      Align.               (line 506)
* \right-brace:                          Other.               (line 227)
* \right-column:                         Align.               (line 519)
* \rightHandFinger:                      Right-hand fingerings.
                                                              (line   6)
* \roman:                                Font.                (line 287)
* \romanStringNumbers:                   Bowing indications.  (line   6)
* \rotate:                               Align.               (line 534)
* \rounded-box:                          Graphic notation inside markup.
                                                              (line   8)
* \rounded-box <1>:                      Graphic.             (line 361)
* \rtoe:                                 Articulations and ornamentations.
                                                              (line   6)
* \sacredHarpHeads:                      Shape note heads.    (line   6)
* \sacredHarpHeadsMinor:                 Shape note heads.    (line  25)
* \sans:                                 Font.                (line 303)
* \scale:                                Graphic.             (line 382)
* \scaleDurations:                       Scaling durations.   (line  34)
* \scaleDurations <1>:                   Polymetric notation. (line   6)
* \score:                                Structure of a score.
                                                              (line   6)
* \score <1>:                            File structure.      (line   6)
* \score <2>:                            Music.               (line 176)
* \score-lines:                          Text markup list commands.
                                                              (line  44)
* \segno:                                Articulations and ornamentations.
                                                              (line   6)
* \semiflat:                             Music.               (line 225)
* \semiGermanChords:                     Customizing chord names.
                                                              (line 134)
* \semisharp:                            Music.               (line 233)
* \sesquiflat:                           Music.               (line 241)
* \sesquisharp:                          Music.               (line 249)
* \set:                                  Setting automatic beam behavior.
                                                              (line   6)
* \set <1>:                              The set command.     (line   6)
* \set <2>:                              set versus override. (line   6)
* \sf:                                   Dynamics.            (line   6)
* \sff:                                  Dynamics.            (line   6)
* \sfz:                                  Dynamics.            (line   6)
* \shape:                                Modifying ties and slurs.
                                                              (line  40)
* \sharp:                                Music.               (line 257)
* \shiftOff:                             Collision resolution.
                                                              (line   6)
* \shiftOn:                              Collision resolution.
                                                              (line   6)
* \shiftOnn:                             Collision resolution.
                                                              (line   6)
* \shiftOnnn:                            Collision resolution.
                                                              (line   6)
* \shortfermata:                         Articulations and ornamentations.
                                                              (line   6)
* \showKeySignature:                     Bagpipe definitions. (line   6)
* \showStaffSwitch:                      Staff-change lines.  (line   6)
* \signumcongruentiae:                   Articulations and ornamentations.
                                                              (line   6)
* \simple:                               Font.                (line 315)
* \skip:                                 Invisible rests.     (line   6)
* \skip <1>:                             Lyrics and repeats.  (line 212)
* \slashed-digit:                        Other.               (line 237)
* \slashedGrace:                         Grace notes.         (line   6)
* \slurDashed:                           Slurs.               (line  31)
* \slurDashPattern:                      Slurs.               (line  58)
* \slurDotted:                           Slurs.               (line  31)
* \slurDown:                             Slurs.               (line  17)
* \slurHalfDashed:                       Slurs.               (line  44)
* \slurHalfSolid:                        Slurs.               (line  44)
* \slurNeutral:                          Slurs.               (line  17)
* \slurSolid:                            Slurs.               (line  31)
* \slurUp:                               Slurs.               (line  70)
* \small:                                Selecting notation font size.
                                                              (line   6)
* \small <1>:                            Selecting font and font size.
                                                              (line 114)
* \small <2>:                            Font.                (line 329)
* \smallCaps:                            Font.                (line 340)
* \smaller:                              Selecting font and font size.
                                                              (line  18)
* \smaller <1>:                          Selecting font and font size.
                                                              (line 114)
* \smaller <2>:                          Font.                (line 354)
* \snappizzicato:                        Articulations and ornamentations.
                                                              (line   6)
* \sostenutoOff:                         Piano pedals.        (line   6)
* \sostenutoOn:                          Piano pedals.        (line   6)
* \southernHarmonyHeads:                 Shape note heads.    (line   6)
* \southernHarmonyHeadsMinor:            Shape note heads.    (line  25)
* \sp:                                   Dynamics.            (line   6)
* \spp:                                  Dynamics.            (line   6)
* \staccatissimo:                        Articulations and ornamentations.
                                                              (line   6)
* \staccato:                             Articulations and ornamentations.
                                                              (line   6)
* \startGroup:                           Analysis brackets.   (line   6)
* \startStaff:                           Staff symbol.        (line   6)
* \startStaff <1>:                       Ossia staves.        (line   6)
* \startTrillSpan:                       Trills.              (line   6)
* \stdBass:                              Accordion Registers. (line  52)
* \stdBassIV:                            Accordion Registers. (line  83)
* \stdBassV:                             Accordion Registers. (line 112)
* \stdBassVI:                            Accordion Registers. (line 147)
* \stemDown:                             Stems.               (line   6)
* \stemNeutral:                          Stems.               (line   6)
* \stemUp:                               Stems.               (line   6)
* \stencil:                              Other.               (line 252)
* \stopGroup:                            Analysis brackets.   (line   6)
* \stopped:                              Articulations and ornamentations.
                                                              (line   6)
* \stopStaff:                            Staff symbol.        (line   6)
* \stopStaff <1>:                        Ossia staves.        (line   6)
* \stopStaff <2>:                        Hiding staves.       (line   6)
* \stopTrillSpan:                        Trills.              (line   6)
* \storePredefinedDiagram:               Predefined fret diagrams.
                                                              (line 183)
* \stringTuning:                         Custom tablatures.   (line  40)
* \stropha:                              Gregorian square neume ligatures.
                                                              (line  20)
* \stropha <1>:                          Gregorian square neume ligatures.
                                                              (line 260)
* \strut:                                Other.               (line 260)
* \sub:                                  Selecting font and font size.
                                                              (line  62)
* \sub <1>:                              Font.                (line 370)
* \super:                                Selecting font and font size.
                                                              (line  62)
* \super <1>:                            Font.                (line 387)
* \sustainOff:                           Piano pedals.        (line   6)
* \sustainOn:                            Piano pedals.        (line   6)
* \tabChordRepeats:                      Default tablatures.  (line  98)
* \tabFullNotation:                      Default tablatures.  (line  45)
* \table:                                Text markup list commands.
                                                              (line  50)
* \table-of-contents:                    Table of contents.   (line 131)
* \table-of-contents <1>:                Text markup list commands.
                                                              (line  86)
* \tag:                                  Using tags.          (line   6)
* \tagGroup:                             Using tags.          (line 136)
* \taor:                                 Bagpipe definitions. (line   6)
* \teeny:                                Selecting notation font size.
                                                              (line   6)
* \teeny <1>:                            Selecting font and font size.
                                                              (line 114)
* \teeny <2>:                            Font.                (line 403)
* \tempo:                                Metronome marks.     (line   6)
* \tenuto:                               Articulations and ornamentations.
                                                              (line   6)
* \text:                                 Font.                (line 414)
* \textLengthOff:                        Full measure rests.  (line  84)
* \textLengthOff <1>:                    Text scripts.        (line  38)
* \textLengthOn:                         Full measure rests.  (line  84)
* \textLengthOn <1>:                     Text scripts.        (line  38)
* \textSpannerDown:                      Text spanners.       (line  32)
* \textSpannerNeutral:                   Text spanners.       (line  32)
* \textSpannerUp:                        Text spanners.       (line  32)
* \thumb:                                Articulations and ornamentations.
                                                              (line   6)
* \thumb <1>:                            Fingering instructions.
                                                              (line  16)
* \tie:                                  Font.                (line 428)
* \tied-lyric:                           Music.               (line 265)
* \tieDashed:                            Ties.                (line  71)
* \tieDotted:                            Ties.                (line  71)
* \tieDown:                              Ties.                (line  68)
* \tieNeutral:                           Ties.                (line  68)
* \tieSolid:                             Ties.                (line  71)
* \tieUp:                                Ties.                (line  68)
* \time:                                 Time signature.      (line   6)
* \time <1>:                             Setting automatic beam behavior.
                                                              (line   6)
* \tiny:                                 Selecting notation font size.
                                                              (line   6)
* \tiny <1>:                             Selecting font and font size.
                                                              (line 114)
* \tiny <2>:                             Font.                (line 449)
* \tocItem:                              Table of contents.   (line 131)
* \translate:                            Text alignment.      (line  65)
* \translate <1>:                        Align.               (line 547)
* \translate-scaled:                     Text alignment.      (line  65)
* \translate-scaled <1>:                 Align.               (line 558)
* \transparent:                          Other.               (line 264)
* \transpose:                            Relative octave entry.
                                                              (line 152)
* \transpose <1>:                        Transpose.           (line   6)
* \transpose <2>:                        Transpose.           (line 145)
* \transposedCueDuring:                  Formatting cue notes.
                                                              (line 161)
* \transposition:                        Instrument transpositions.
                                                              (line   6)
* \transposition <1>:                    Quoting other voices.
                                                              (line   6)
* \treCorde:                             Piano pedals.        (line   6)
* \triangle:                             Graphic notation inside markup.
                                                              (line  50)
* \triangle <1>:                         Graphic.             (line 397)
* \trill:                                Articulations and ornamentations.
                                                              (line   6)
* \trill <1>:                            Trills.              (line   6)
* \tuplet:                               Tuplets.             (line   6)
* \tuplet <1>:                           Polymetric notation. (line   6)
* \tupletDown:                           Tuplets.             (line  30)
* \tupletNeutral:                        Tuplets.             (line  30)
* \tupletUp:                             Tuplets.             (line  30)
* \turn:                                 Articulations and ornamentations.
                                                              (line   6)
* \tweak:                                The tweak command.   (line   6)
* \tweak <1>:                            set versus override. (line  46)
* \type:                                 Defining new contexts.
                                                              (line   6)
* \typewriter:                           Font.                (line 460)
* \unaCorda:                             Piano pedals.        (line   6)
* \underline:                            Selecting font and font size.
                                                              (line   6)
* \underline <1>:                        Font.                (line 471)
* \undertie:                             Font.                (line 490)
* \unfoldRepeats:                        Using repeats with MIDI.
                                                              (line   6)
* \unHideNotes:                          Hidden notes.        (line   6)
* \unset:                                The set command.     (line  62)
* \upbow:                                Articulations and ornamentations.
                                                              (line   6)
* \upbow <1>:                            Bowing indications.  (line   6)
* \upmordent:                            Articulations and ornamentations.
                                                              (line   6)
* \upprall:                              Articulations and ornamentations.
                                                              (line   6)
* \upright:                              Font.                (line 508)
* \varcoda:                              Articulations and ornamentations.
                                                              (line   6)
* \vcenter:                              Align.               (line 573)
* \verbatim-file:                        Other.               (line 274)
* \verylongfermata:                      Articulations and ornamentations.
                                                              (line   6)
* \virga:                                Gregorian square neume ligatures.
                                                              (line  20)
* \virga <1>:                            Gregorian square neume ligatures.
                                                              (line 260)
* \virgula:                              Divisiones.          (line  29)
* \voiceFourStyle:                       Voice styles.        (line   6)
* \voiceNeutralStyle:                    Voice styles.        (line   6)
* \voiceOne:                             Single-staff polyphony.
                                                              (line   6)
* \voiceOne ... \voiceFour:              Single-staff polyphony.
                                                              (line   6)
* \voiceOneStyle:                        Voice styles.        (line   6)
* \voiceThreeStyle:                      Voice styles.        (line   6)
* \voiceTwoStyle:                        Voice styles.        (line   6)
* \void:                                 Displaying LilyPond notation.
                                                              (line  25)
* \vspace:                               Align.               (line 584)
* \walkerHeads:                          Shape note heads.    (line   6)
* \walkerHeadsMinor:                     Shape note heads.    (line  25)
* \whiteout:                             Other.               (line 282)
* \with:                                 Modifying context plug-ins.
                                                              (line  18)
* \with <1>:                             Changing just one specific context.
                                                              (line   6)
* \with-color:                           Coloring objects.    (line   6)
* \with-color <1>:                       Other.               (line 314)
* \with-dimensions:                      Other.               (line 333)
* \with-dimensions-from:                 Other.               (line 329)
* \with-link:                            Other.               (line 337)
* \with-url:                             Graphic.             (line 412)
* \woodwind-diagram:                     Instrument Specific Markup.
                                                              (line 207)
* \wordwrap:                             Text alignment.      (line 125)
* \wordwrap <1>:                         Align.               (line 626)
* \wordwrap-field:                       Align.               (line 599)
* \wordwrap-internal:                    Text markup list commands.
                                                              (line  88)
* \wordwrap-lines:                       Multi-page markup.   (line   6)
* \wordwrap-lines <1>:                   Text markup list commands.
                                                              (line  98)
* \wordwrap-string:                      Align.               (line 646)
* \wordwrap-string-internal:             Text markup list commands.
                                                              (line 110)
* ]:                                     Manual beams.        (line   6)
* ^:                                     Extended and altered chords.
                                                              (line  60)
* _:                                     Multiple syllables to one note.
                                                              (line   6)
* |:                                     Bar and bar number checks.
                                                              (line   6)
* | <1>:                                 Bar and bar number checks.
                                                              (line  38)
* ~:                                     Ties.                (line   6)
* absolute:                              Available music functions.
                                                              (line   7)
* accepts:                               Defining new contexts.
                                                              (line   6)
* acciaccatura:                          Available music functions.
                                                              (line  11)
* accidentalStyle:                       Available music functions.
                                                              (line  13)
* addChordShape:                         Predefined fret diagrams.
                                                              (line 183)
* addChordShape <1>:                     Available music functions.
                                                              (line  19)
* addInstrumentDefinition:               Available music functions.
                                                              (line  22)
* additionalPitchPrefix:                 Customizing chord names.
                                                              (line  50)
* addQuote:                              Quoting other voices.
                                                              (line   6)
* addQuote <1>:                          Available music functions.
                                                              (line  24)
* aeolian:                               Key signature.       (line  20)
* afterGrace:                            Grace notes.         (line  40)
* afterGrace <1>:                        Available music functions.
                                                              (line  26)
* aikenHeads:                            Shape note heads.    (line   6)
* aikenHeadsMinor:                       Shape note heads.    (line  25)
* alias:                                 Defining new contexts.
                                                              (line   6)
* alignAboveContext:                     Context layout order.
                                                              (line  71)
* alignBelowContext:                     Lyrics and repeats.  (line 140)
* alignBelowContext <1>:                 Context layout order.
                                                              (line  71)
* allowPageTurn:                         Available music functions.
                                                              (line  28)
* allowVoltaHook:                        Available music functions.
                                                              (line  31)
* alterBroken:                           Available music functions.
                                                              (line  33)
* annotate-spacing:                      Displaying spacing.  (line   6)
* appendToTag:                           Available music functions.
                                                              (line  39)
* applyContext:                          Available music functions.
                                                              (line  42)
* applyMusic:                            Available music functions.
                                                              (line  44)
* applyOutput:                           Available music functions.
                                                              (line  46)
* appoggiatura:                          Available music functions.
                                                              (line  49)
* arpeggio:                              Arpeggio.            (line   6)
* arpeggioArrowDown:                     Arpeggio.            (line   6)
* arpeggioArrowUp:                       Arpeggio.            (line   6)
* arpeggioBracket:                       Arpeggio.            (line  27)
* arpeggioNormal:                        Arpeggio.            (line   6)
* arpeggioParenthesis:                   Arpeggio.            (line  27)
* arpeggioParenthesisDashed:             Arpeggio.            (line  27)
* arrow-head:                            Graphic notation inside markup.
                                                              (line  50)
* assertBeamQuant:                       Available music functions.
                                                              (line  51)
* assertBeamSlope:                       Available music functions.
                                                              (line  53)
* aug:                                   Common chords.       (line  19)
* auto-first-page-number:                paper variables for page numbering.
                                                              (line  10)
* autoBeaming:                           Setting automatic beam behavior.
                                                              (line   6)
* autoBeaming <1>:                       Output definitions - blueprints for contexts.
                                                              (line  28)
* autoBeamOff:                           Automatic beams.     (line   8)
* autoBeamOn:                            Automatic beams.     (line   8)
* autochange:                            Changing staff automatically.
                                                              (line   6)
* autochange <1>:                        Available music functions.
                                                              (line  56)
* balloonGrobText:                       Balloon help.        (line   6)
* balloonGrobText <1>:                   Available music functions.
                                                              (line  61)
* balloonLengthOff:                      Balloon help.        (line   6)
* balloonLengthOn:                       Balloon help.        (line   6)
* balloonText:                           Balloon help.        (line   6)
* balloonText <1>:                       Available music functions.
                                                              (line  63)
* Balloon_engraver:                      Balloon help.        (line   6)
* banjo-c-tuning:                        Banjo tablatures.    (line  26)
* banjo-modal-tuning:                    Banjo tablatures.    (line  26)
* banjo-open-d-tuning:                   Banjo tablatures.    (line  26)
* banjo-open-dm-tuning:                  Banjo tablatures.    (line  26)
* bar:                                   Bar lines.           (line   6)
* bar <1>:                               Bar lines.           (line 268)
* bar <2>:                               Available music functions.
                                                              (line  65)
* barCheckSynchronize:                   Bar and bar number checks.
                                                              (line   6)
* BarNumber:                             Bar numbers.         (line  18)
* barNumberCheck:                        Bar and bar number checks.
                                                              (line  52)
* barNumberCheck <1>:                    Available music functions.
                                                              (line  67)
* barNumberVisibility:                   Bar numbers.         (line  18)
* bartype:                               Bar lines.           (line 268)
* base-shortest-duration:                Horizontal spacing overview.
                                                              (line  50)
* baseMoment:                            Setting automatic beam behavior.
                                                              (line   6)
* beamExceptions:                        Setting automatic beam behavior.
                                                              (line   6)
* beamExceptions <1>:                    Available music functions.
                                                              (line  69)
* beatStructure:                         Setting automatic beam behavior.
                                                              (line   6)
* bendAfter:                             Falls and doits.     (line   6)
* bendAfter <1>:                         Available music functions.
                                                              (line  74)
* binding-offset:                        paper variables for two-sided mode.
                                                              (line  31)
* blank-after-score-page-penalty:        paper variables for page breaking.
                                                              (line  65)
* blank-last-page-penalty:               paper variables for page breaking.
                                                              (line  56)
* blank-page-penalty:                    paper variables for page breaking.
                                                              (line  48)
* bold:                                  Selecting font and font size.
                                                              (line   6)
* bookOutputName:                        Available music functions.
                                                              (line  76)
* bookOutputSuffix:                      Available music functions.
                                                              (line  78)
* bookTitleMarkup:                       Custom layout for titles.
                                                              (line   6)
* bottom-margin:                         Fixed vertical spacing paper variables.
                                                              (line  25)
* box:                                   Graphic notation inside markup.
                                                              (line   8)
* bracket:                               New dynamic marks.   (line  16)
* bracket <1>:                           Graphic notation inside markup.
                                                              (line   8)
* bracket <2>:                           Piano pedals.        (line  19)
* breakable:                             Automatic beams.     (line  42)
* breathe:                               Breath marks.        (line   6)
* breathe <1>:                           Available music functions.
                                                              (line  81)
* breve:                                 Durations.           (line   6)
* breve <1>:                             Rests.               (line   6)
* cadenzaOff:                            Unmetered music.     (line   6)
* cadenzaOn:                             Unmetered music.     (line   6)
* center-align:                          Text alignment.      (line  10)
* center-column:                         Text alignment.      (line  87)
* change:                                Changing staff manually.
                                                              (line   6)
* check-consistency:                     paper variables for widths and margins.
                                                              (line  69)
* chordChanges:                          Printing chord names.
                                                              (line  68)
* chordmode:                             Relative octave entry.
                                                              (line 152)
* chordmode <1>:                         Transpose.           (line 145)
* chordmode <2>:                         Predefined fret diagrams.
                                                              (line  66)
* chordNameExceptions:                   Customizing chord names.
                                                              (line 103)
* chordNameLowercaseMinor:               Customizing chord names.
                                                              (line  24)
* ChordNames:                            Predefined fret diagrams.
                                                              (line  66)
* chordNameSeparator:                    Customizing chord names.
                                                              (line  72)
* chordNoteNamer:                        Customizing chord names.
                                                              (line  63)
* chordPrefixSpacer:                     Customizing chord names.
                                                              (line 123)
* chordRepeats:                          Available music functions.
                                                              (line  83)
* chordRootNamer:                        Customizing chord names.
                                                              (line  36)
* circle:                                Graphic notation inside markup.
                                                              (line   8)
* clef:                                  Clef.                (line   6)
* clef <1>:                              Available music functions.
                                                              (line  87)
* clip-regions:                          Controlling output.  (line  13)
* color:                                 Coloring objects.    (line   6)
* column:                                Text alignment.      (line  87)
* combine:                               Graphic notation inside markup.
                                                              (line  50)
* common-shortest-duration:              Horizontal spacing overview.
                                                              (line  50)
* Completion_heads_engraver:             Automatic note splitting.
                                                              (line   6)
* Completion_rest_engraver:              Automatic note splitting.
                                                              (line   6)
* compoundMeter:                         Available music functions.
                                                              (line  89)
* compressMMRests:                       Full measure rests.  (line   6)
* compressMMRests <1>:                   Full measure rests.  (line  84)
* compressMMRests <2>:                   Available music functions.
                                                              (line  99)
* consists:                              Defining new contexts.
                                                              (line   6)
* controlpitch:                          Octave checks.       (line   6)
* cr:                                    Dynamics.            (line  19)
* cresc:                                 Dynamics.            (line  74)
* crescHairpin:                          Dynamics.            (line  85)
* crescTextCresc:                        Dynamics.            (line  85)
* cross:                                 Special note heads.  (line   6)
* crossStaff:                            Available music functions.
                                                              (line 102)
* cueClef:                               Formatting cue notes.
                                                              (line   6)
* cueClef <1>:                           Available music functions.
                                                              (line 104)
* cueClefUnset:                          Available music functions.
                                                              (line 106)
* cueDuring:                             Formatting cue notes.
                                                              (line   6)
* cueDuring <1>:                         Available music functions.
                                                              (line 108)
* cueDuringWithClef:                     Formatting cue notes.
                                                              (line   6)
* cueDuringWithClef <1>:                 Available music functions.
                                                              (line 111)
* currentBarNumber:                      Bar numbers.         (line   6)
* currentBarNumber <1>:                  Time administration. (line   6)
* deadNote:                              Available music functions.
                                                              (line 114)
* decr:                                  Dynamics.            (line  19)
* decresc:                               Dynamics.            (line  74)
* default:                               Automatic accidentals.
                                                              (line   6)
* default <1>:                           Automatic accidentals.
                                                              (line  91)
* default-staff-staff-spacing:           Within-system spacing properties.
                                                              (line   6)
* defaultBarType:                        Bar lines.           (line 268)
* defaultNoteHeads:                      Available music functions.
                                                              (line 116)
* defaultTimeSignature:                  Time signature.      (line  28)
* defineBarLine:                         Bar lines.           (line 173)
* defineBarLine <1>:                     Available music functions.
                                                              (line 118)
* denies:                                Defining new contexts.
                                                              (line   6)
* dim:                                   Dynamics.            (line  74)
* dim <1>:                               Common chords.       (line  19)
* dimHairpin:                            Dynamics.            (line  85)
* dimTextDecr:                           Dynamics.            (line  85)
* dimTextDecresc:                        Dynamics.            (line  85)
* dimTextDim:                            Dynamics.            (line  85)
* displayLilyMusic:                      Available music functions.
                                                              (line 123)
* displayMusic:                          Available music functions.
                                                              (line 126)
* displayScheme:                         Available music functions.
                                                              (line 129)
* dodecaphonic:                          Automatic accidentals.
                                                              (line 209)
* dodecaphonic-first:                    Automatic accidentals.
                                                              (line 224)
* dodecaphonic-no-repeat:                Automatic accidentals.
                                                              (line 217)
* dorian:                                Key signature.       (line  20)
* dotsDown:                              Durations.           (line  63)
* dotsNeutral:                           Durations.           (line  63)
* dotsUp:                                Durations.           (line  63)
* draw-circle:                           Graphic notation inside markup.
                                                              (line  50)
* draw-line:                             Graphic notation inside markup.
                                                              (line  50)
* drummode:                              Instantiating new staves.
                                                              (line   6)
* DrumStaff:                             Instantiating new staves.
                                                              (line   6)
* dynamic:                               New dynamic marks.   (line  16)
* dynamicDown:                           Dynamics.            (line 104)
* DynamicLineSpanner:                    Dynamics.            (line 103)
* dynamicNeutral:                        Dynamics.            (line 104)
* dynamicUp:                             Dynamics.            (line 104)
* easyHeadsOff:                          Easy notation note heads.
                                                              (line   6)
* easyHeadsOn:                           Easy notation note heads.
                                                              (line   6)
* endSpanners:                           Available music functions.
                                                              (line 132)
* epsfile:                               Graphic notation inside markup.
                                                              (line  67)
* espressivo:                            Dynamics.            (line  65)
* eventChords:                           Available music functions.
                                                              (line 135)
* extra-offset:                          Within-system spacing properties.
                                                              (line   6)
* f:                                     Dynamics.            (line   6)
* featherDurations:                      Feathered beams.     (line   6)
* featherDurations <1>:                  Available music functions.
                                                              (line 139)
* fermataMarkup:                         Full measure rests.  (line  60)
* fermataMarkup <1>:                     Full measure rests.  (line  84)
* ff:                                    Dynamics.            (line   6)
* fff:                                   Dynamics.            (line   6)
* ffff:                                  Dynamics.            (line   6)
* fffff:                                 Dynamics.            (line   6)
* fill-line:                             Text alignment.      (line 105)
* filled-box:                            Graphic notation inside markup.
                                                              (line  50)
* finger:                                Fingering instructions.
                                                              (line   6)
* finger <1>:                            Available music functions.
                                                              (line 141)
* first-page-number:                     paper variables for page numbering.
                                                              (line  18)
* fixed:                                 Absolute octave entry.
                                                              (line  29)
* fixed <1>:                             Available music functions.
                                                              (line 143)
* followVoice:                           Staff-change lines.  (line   6)
* font-interface:                        Selecting notation font size.
                                                              (line 176)
* font-interface <1>:                    Fonts explained.     (line   6)
* font-size:                             Selecting notation font size.
                                                              (line   6)
* font-size <1>:                         Selecting notation font size.
                                                              (line 176)
* fontSize:                              Selecting notation font size.
                                                              (line   6)
* fontsize:                              Selecting font and font size.
                                                              (line  18)
* footnote:                              Available music functions.
                                                              (line 145)
* forget:                                Automatic accidentals.
                                                              (line 247)
* four-string-banjo:                     Banjo tablatures.    (line  26)
* fp:                                    Dynamics.            (line   6)
* fret-diagram:                          Fret diagram markups.
                                                              (line  55)
* fret-diagram-interface:                Fret diagram markups.
                                                              (line 320)
* fret-diagram-terse:                    Fret diagram markups.
                                                              (line 133)
* fret-diagram-verbose:                  Fret diagram markups.
                                                              (line 200)
* FretBoards:                            Predefined fret diagrams.
                                                              (line   6)
* funkHeads:                             Shape note heads.    (line   6)
* funkHeadsMinor:                        Shape note heads.    (line  25)
* general-align:                         Text alignment.      (line  65)
* glissando:                             Glissando.           (line   6)
* grace:                                 Available music functions.
                                                              (line 165)
* GregorianTranscriptionStaff:           Instantiating new staves.
                                                              (line   6)
* gridInterval:                          Grid lines.          (line   6)
* Grid_line_span_engraver:               Grid lines.          (line   6)
* Grid_point_engraver:                   Grid lines.          (line   6)
* grobdescriptions:                      Available music functions.
                                                              (line 167)
* grow-direction:                        Feathered beams.     (line   6)
* halign:                                Text alignment.      (line  24)
* harmonicByFret:                        Available music functions.
                                                              (line 170)
* harmonicByRatio:                       Available music functions.
                                                              (line 174)
* harmonicNote:                          Available music functions.
                                                              (line 178)
* harmonicsOn:                           Available music functions.
                                                              (line 180)
* hbracket:                              Graphic notation inside markup.
                                                              (line   8)
* hide:                                  Available music functions.
                                                              (line 182)
* hideKeySignature:                      Bagpipe definitions. (line   6)
* hideNotes:                             Hidden notes.        (line   6)
* hideStaffSwitch:                       Staff-change lines.  (line   6)
* horizontal-shift:                      paper variables for shifts and indents.
                                                              (line  10)
* Horizontal_bracket_engraver:           Analysis brackets.   (line   6)
* huge:                                  Selecting notation font size.
                                                              (line   6)
* huge <1>:                              Selecting font and font size.
                                                              (line 114)
* improvisationOff:                      Improvisation.       (line   6)
* improvisationOff <1>:                  Showing melody rhythms.
                                                              (line  27)
* improvisationOn:                       Improvisation.       (line   6)
* improvisationOn <1>:                   Showing melody rhythms.
                                                              (line  27)
* incipit:                               Incipits.            (line   6)
* incipit <1>:                           Available music functions.
                                                              (line 190)
* indent:                                Instrument names.    (line  50)
* indent <1>:                            paper variables for shifts and indents.
                                                              (line  15)
* indent <2>:                            Line width.          (line   6)
* inherit-acceptability:                 Available music functions.
                                                              (line 193)
* inner-margin:                          paper variables for two-sided mode.
                                                              (line  17)
* inStaffSegno:                          Available music functions.
                                                              (line 197)
* instrumentSwitch:                      Available music functions.
                                                              (line 200)
* inversion:                             Available music functions.
                                                              (line 203)
* ionian:                                Key signature.       (line  20)
* italic:                                Selecting font and font size.
                                                              (line   6)
* justified-lines:                       Multi-page markup.   (line   6)
* justify:                               Text alignment.      (line 125)
* keepWithTag:                           Available music functions.
                                                              (line 205)
* key:                                   Key signature.       (line   6)
* key <1>:                               Shape note heads.    (line  25)
* key <2>:                               Available music functions.
                                                              (line 213)
* killCues:                              Formatting cue notes.
                                                              (line 194)
* killCues <1>:                          Available music functions.
                                                              (line 216)
* label:                                 Available music functions.
                                                              (line 218)
* laissezVibrer:                         Ties.                (line  62)
* language:                              Available music functions.
                                                              (line 220)
* languageRestore:                       Available music functions.
                                                              (line 222)
* languageSaveAndChange:                 Available music functions.
                                                              (line 224)
* large:                                 Selecting notation font size.
                                                              (line   6)
* large <1>:                             Selecting font and font size.
                                                              (line 114)
* larger:                                Selecting font and font size.
                                                              (line  18)
* larger <1>:                            Selecting font and font size.
                                                              (line 114)
* last-bottom-spacing:                   List of flexible vertical spacing paper variables.
                                                              (line  41)
* layout file:                           Setting the staff size.
                                                              (line   6)
* layout-set-staff-size:                 Setting the staff size.
                                                              (line   6)
* left-align:                            Text alignment.      (line  10)
* left-margin:                           paper variables for widths and margins.
                                                              (line  42)
* line-width:                            paper variables for widths and margins.
                                                              (line  18)
* line-width <1>:                        Line width.          (line   6)
* locrian:                               Key signature.       (line  20)
* longa:                                 Durations.           (line   6)
* longa <1>:                             Rests.               (line   6)
* lower:                                 Text alignment.      (line  40)
* ly:minimal-breaking:                   Minimal page breaking.
                                                              (line   6)
* ly:one-line-auto-height-breaking:      One-line-auto-height page breaking.
                                                              (line   6)
* ly:one-line-breaking:                  One-line page breaking.
                                                              (line   6)
* ly:optimal-breaking:                   Optimal page breaking.
                                                              (line   6)
* ly:page-turn-breaking:                 Optimal page turning.
                                                              (line   6)
* lydian:                                Key signature.       (line  20)
* m:                                     Common chords.       (line  19)
* magnification->font-size:              Selecting notation font size.
                                                              (line   6)
* magnification->font-size <1>:          Setting the staff size.
                                                              (line   6)
* magnify:                               Selecting font and font size.
                                                              (line  18)
* magnifyMusic:                          Selecting notation font size.
                                                              (line   6)
* magnifyMusic <1>:                      Available music functions.
                                                              (line 226)
* magnifyStaff:                          Available music functions.
                                                              (line 230)
* magstep:                               Selecting notation font size.
                                                              (line   6)
* magstep <1>:                           Setting the staff size.
                                                              (line   6)
* magstep <2>:                           Distances and measurements.
                                                              (line  28)
* maj:                                   Common chords.       (line  19)
* major:                                 Key signature.       (line  20)
* major seven symbols:                   Customizing chord names.
                                                              (line 134)
* majorSevenSymbol:                      Customizing chord names.
                                                              (line  44)
* make-dynamic-script:                   New dynamic marks.   (line  29)
* make-pango-font-tree:                  Entire document fonts.
                                                              (line  14)
* makeClusters:                          Clusters.            (line   6)
* makeClusters <1>:                      Available music functions.
                                                              (line 233)
* makeDefaultStringTuning:               Available music functions.
                                                              (line 235)
* mark:                                  Rehearsal marks.     (line   6)
* mark <1>:                              Text marks.          (line   6)
* mark <2>:                              Available music functions.
                                                              (line 239)
* markLengthOff:                         Metronome marks.     (line  54)
* markLengthOff <1>:                     Text marks.          (line  52)
* markLengthOn:                          Metronome marks.     (line  54)
* markLengthOn <1>:                      Text marks.          (line  52)
* markup:                                Text marks.          (line   6)
* markup <1>:                            Separate text.       (line   6)
* markup <2>:                            Separate text.       (line  33)
* markup <3>:                            Text markup introduction.
                                                              (line   6)
* markup-markup-spacing:                 List of flexible vertical spacing paper variables.
                                                              (line  37)
* markup-system-spacing:                 List of flexible vertical spacing paper variables.
                                                              (line  17)
* markuplist:                            Separate text.       (line  33)
* markuplist <1>:                        Multi-page markup.   (line   6)
* markuplist <2>:                        Multi-page markup.   (line  44)
* markupMap:                             Available music functions.
                                                              (line 241)
* max-systems-per-page:                  paper variables for line breaking.
                                                              (line   7)
* maxima:                                Durations.           (line   6)
* maxima <1>:                            Rests.               (line   6)
* measureLength:                         Setting automatic beam behavior.
                                                              (line   6)
* measureLength <1>:                     Time administration. (line   6)
* measurePosition:                       Upbeats.             (line   6)
* measurePosition <1>:                   Time administration. (line   6)
* MensuralStaff:                         Instantiating new staves.
                                                              (line   6)
* mergeDifferentlyDottedOff:             Collision resolution.
                                                              (line   6)
* mergeDifferentlyDottedOn:              Collision resolution.
                                                              (line   6)
* mergeDifferentlyHeadedOff:             Collision resolution.
                                                              (line   6)
* mergeDifferentlyHeadedOn:              Collision resolution.
                                                              (line   6)
* mf:                                    Dynamics.            (line   6)
* midiBalance:                           Context properties for MIDI effects.
                                                              (line   6)
* midiChannelMapping:                    MIDI channel mapping.
                                                              (line   6)
* midiChorusLevel:                       Context properties for MIDI effects.
                                                              (line   6)
* midiExpression:                        Context properties for MIDI effects.
                                                              (line   6)
* midiPanPosition:                       Context properties for MIDI effects.
                                                              (line   6)
* midiReverbLevel:                       Context properties for MIDI effects.
                                                              (line   6)
* min-systems-per-page:                  paper variables for line breaking.
                                                              (line  13)
* minimum-Y-extent:                      Within-system spacing properties.
                                                              (line   6)
* minimumFret:                           Default tablatures.  (line  67)
* minimumFret <1>:                       Automatic fret diagrams.
                                                              (line  84)
* minimumPageTurnLength:                 Optimal page turning.
                                                              (line  33)
* minimumRepeatLengthForPageTurn:        Optimal page turning.
                                                              (line  51)
* minor:                                 Key signature.       (line  20)
* minorChordModifier:                    Customizing chord names.
                                                              (line 110)
* mixed:                                 Piano pedals.        (line  19)
* mixolydian:                            Key signature.       (line  20)
* modalInversion:                        Modal transformations.
                                                              (line  61)
* modalInversion <1>:                    Available music functions.
                                                              (line 253)
* modalTranspose:                        Modal transformations.
                                                              (line  18)
* modalTranspose <1>:                    Available music functions.
                                                              (line 256)
* modern:                                Automatic accidentals.
                                                              (line 119)
* modern-cautionary:                     Automatic accidentals.
                                                              (line 133)
* modern-voice:                          Automatic accidentals.
                                                              (line 141)
* modern-voice-cautionary:               Automatic accidentals.
                                                              (line 150)
* mp:                                    Dynamics.            (line   6)
* MultiMeasureRestText:                  Full measure rests.  (line  60)
* musicglyph:                            Rehearsal marks.     (line  81)
* musicMap:                              Available music functions.
                                                              (line 258)
* name:                                  Defining new contexts.
                                                              (line   6)
* neo-modern:                            Automatic accidentals.
                                                              (line 179)
* neo-modern-cautionary:                 Automatic accidentals.
                                                              (line 187)
* neo-modern-voice:                      Automatic accidentals.
                                                              (line 195)
* neo-modern-voice-cautionary:           Automatic accidentals.
                                                              (line 203)
* no-reset:                              Automatic accidentals.
                                                              (line 241)
* noBeam:                                Manual beams.        (line  18)
* nonstaff-nonstaff-spacing:             Within-system spacing properties.
                                                              (line   6)
* nonstaff-relatedstaff-spacing:         Within-system spacing properties.
                                                              (line   6)
* nonstaff-unrelatedstaff-spacing:       Within-system spacing properties.
                                                              (line   6)
* noPageBreak:                           Available music functions.
                                                              (line 260)
* noPageTurn:                            Available music functions.
                                                              (line 263)
* normal-size-super:                     Selecting font and font size.
                                                              (line  62)
* normalsize:                            Selecting notation font size.
                                                              (line   6)
* normalsize <1>:                        Selecting font and font size.
                                                              (line 114)
* Note_heads_engraver:                   Automatic note splitting.
                                                              (line   6)
* null:                                  Text alignment.      (line  40)
* numericTimeSignature:                  Time signature.      (line  28)
* octaveCheck:                           Octave checks.       (line   6)
* octaveCheck <1>:                       Available music functions.
                                                              (line 266)
* offset:                                Available music functions.
                                                              (line 268)
* omit:                                  Available music functions.
                                                              (line 273)
* once:                                  Available music functions.
                                                              (line 281)
* oneVoice:                              Single-staff polyphony.
                                                              (line   6)
* ottava:                                Ottava brackets.     (line   6)
* ottava <1>:                            Available music functions.
                                                              (line 287)
* outer-margin:                          paper variables for two-sided mode.
                                                              (line  24)
* outside-staff-horizontal-padding:      Vertical collision avoidance.
                                                              (line   6)
* outside-staff-padding:                 Vertical collision avoidance.
                                                              (line   6)
* outside-staff-priority:                Vertical collision avoidance.
                                                              (line   6)
* overrideProperty:                      Available music functions.
                                                              (line 289)
* overrideTimeSignatureSettings:         Available music functions.
                                                              (line 300)
* p:                                     Dynamics.            (line   6)
* pad-around:                            Graphic notation inside markup.
                                                              (line  26)
* pad-markup:                            Graphic notation inside markup.
                                                              (line  26)
* pad-to-box:                            Graphic notation inside markup.
                                                              (line  26)
* pad-x:                                 Graphic notation inside markup.
                                                              (line  26)
* page-breaking:                         paper variables for page breaking.
                                                              (line  10)
* page-breaking-system-system-spacing:   paper variables for page breaking.
                                                              (line  17)
* page-count:                            paper variables for page breaking.
                                                              (line  26)
* page-number-type:                      paper variables for page numbering.
                                                              (line  30)
* page-spacing-weight:                   Miscellaneous paper variables.
                                                              (line   7)
* pageBreak:                             Available music functions.
                                                              (line 304)
* pageTurn:                              Available music functions.
                                                              (line 307)
* palmMute:                              Available music functions.
                                                              (line 309)
* palmMuteOn:                            Available music functions.
                                                              (line 311)
* paper-height:                          Fixed vertical spacing paper variables.
                                                              (line  14)
* paper-width:                           paper variables for widths and margins.
                                                              (line  10)
* parallelMusic:                         Writing music in parallel.
                                                              (line   6)
* parallelMusic <1>:                     Available music functions.
                                                              (line 313)
* parenthesize:                          Parentheses.         (line   6)
* parenthesize <1>:                      Available music functions.
                                                              (line 337)
* partcombine:                           Automatic part combining.
                                                              (line   6)
* partcombine <1>:                       Available music functions.
                                                              (line 339)
* partcombineApart:                      Automatic part combining.
                                                              (line  92)
* partcombineAutomatic:                  Automatic part combining.
                                                              (line  92)
* partcombineChords:                     Automatic part combining.
                                                              (line  92)
* partcombineDown:                       Available music functions.
                                                              (line 345)
* partcombineForce:                      Available music functions.
                                                              (line 348)
* partcombineSoloI:                      Automatic part combining.
                                                              (line  92)
* partcombineSoloII:                     Automatic part combining.
                                                              (line  92)
* partcombineUnisono:                    Automatic part combining.
                                                              (line  92)
* partcombineUp:                         Available music functions.
                                                              (line 350)
* partial:                               Upbeats.             (line   6)
* partial <1>:                           Available music functions.
                                                              (line 353)
* pedalSustainStyle:                     Piano pedals.        (line  19)
* percent:                               Percent repeats.     (line   6)
* phrasingSlurDashed:                    Phrasing slurs.      (line  22)
* phrasingSlurDashPattern:               Phrasing slurs.      (line  49)
* phrasingSlurDashPattern <1>:           Available music functions.
                                                              (line 355)
* phrasingSlurDotted:                    Phrasing slurs.      (line  22)
* phrasingSlurDown:                      Phrasing slurs.      (line  14)
* phrasingSlurHalfDashed:                Phrasing slurs.      (line  35)
* phrasingSlurHalfSolid:                 Phrasing slurs.      (line  35)
* phrasingSlurNeutral:                   Phrasing slurs.      (line  14)
* phrasingSlurSolid:                     Phrasing slurs.      (line  22)
* phrasingSlurUp:                        Phrasing slurs.      (line  14)
* phrygian:                              Key signature.       (line  20)
* piano:                                 Automatic accidentals.
                                                              (line 161)
* piano-cautionary:                      Automatic accidentals.
                                                              (line 173)
* PianoStaff:                            References for keyboards.
                                                              (line   6)
* PianoStaff <1>:                        Changing staff automatically.
                                                              (line   6)
* pitchedTrill:                          Trills.              (line  52)
* pitchedTrill <1>:                      Available music functions.
                                                              (line 358)
* Pitch_squash_engraver:                 Showing melody rhythms.
                                                              (line  27)
* pointAndClickOff:                      Available music functions.
                                                              (line 361)
* pointAndClickOn:                       Available music functions.
                                                              (line 364)
* pointAndClickTypes:                    Available music functions.
                                                              (line 369)
* postscript:                            Graphic notation inside markup.
                                                              (line  67)
* powerChords:                           Indicating power chords.
                                                              (line   6)
* pp:                                    Dynamics.            (line   6)
* ppp:                                   Dynamics.            (line   6)
* pppp:                                  Dynamics.            (line   6)
* ppppp:                                 Dynamics.            (line   6)
* predefinedFretboardsOff:               Automatic fret diagrams.
                                                              (line  28)
* predefinedFretboardsOn:                Automatic fret diagrams.
                                                              (line  28)
* print-all-headers:                     Miscellaneous paper variables.
                                                              (line  13)
* print-first-page-number:               paper variables for page numbering.
                                                              (line  22)
* print-page-number:                     paper variables for page numbering.
                                                              (line  26)
* propertyOverride:                      Available music functions.
                                                              (line 372)
* propertyRevert:                        Available music functions.
                                                              (line 379)
* propertySet:                           Available music functions.
                                                              (line 386)
* propertyTweak:                         Available music functions.
                                                              (line 390)
* propertyUnset:                         Available music functions.
                                                              (line 405)
* pushToTag:                             Available music functions.
                                                              (line 409)
* quotedCueEventTypes:                   Quoting other voices.
                                                              (line 115)
* quotedEventTypes:                      Quoting other voices.
                                                              (line 115)
* quoteDuring:                           Quoting other voices.
                                                              (line   6)
* quoteDuring <1>:                       Formatting cue notes.
                                                              (line   6)
* quoteDuring <2>:                       Available music functions.
                                                              (line 412)
* r:                                     Rests.               (line   6)
* R:                                     Full measure rests.  (line   6)
* ragged-bottom:                         Fixed vertical spacing paper variables.
                                                              (line  31)
* ragged-last:                           paper variables for widths and margins.
                                                              (line  85)
* ragged-last <1>:                       Line width.          (line   6)
* ragged-last-bottom:                    Fixed vertical spacing paper variables.
                                                              (line  37)
* ragged-right:                          paper variables for widths and margins.
                                                              (line  78)
* ragged-right <1>:                      Line width.          (line   6)
* raise:                                 Text alignment.      (line  40)
* relative:                              Relative octave entry.
                                                              (line   6)
* relative <1>:                          Relative octave entry.
                                                              (line 151)
* relative <2>:                          Transpose.           (line 145)
* relative <3>:                          Changing staff automatically.
                                                              (line  37)
* relative <4>:                          Available music functions.
                                                              (line 417)
* removeWithTag:                         Available music functions.
                                                              (line 420)
* repeatCommands:                        Manual repeat marks. (line   6)
* repeatTie:                             Ties.                (line  49)
* resetRelativeOctave:                   Available music functions.
                                                              (line 423)
* rest:                                  Rests.               (line   6)
* restrainOpenStrings:                   Default tablatures.  (line  67)
* retrograde:                            Retrograde.          (line   6)
* retrograde <1>:                        Available music functions.
                                                              (line 425)
* revertTimeSignatureSettings:           Available music functions.
                                                              (line 427)
* rfz:                                   Dynamics.            (line   6)
* rgb-color:                             Coloring objects.    (line  44)
* RhythmicStaff:                         Instantiating new staves.
                                                              (line   6)
* right-align:                           Text alignment.      (line  10)
* right-margin:                          paper variables for widths and margins.
                                                              (line  55)
* rightHandFinger:                       Right-hand fingerings.
                                                              (line   6)
* rightHandFinger <1>:                   Available music functions.
                                                              (line 430)
* rounded-box:                           Graphic notation inside markup.
                                                              (line   8)
* s:                                     Invisible rests.     (line   6)
* sacredHarpHeads:                       Shape note heads.    (line   6)
* sacredHarpHeadsMinor:                  Shape note heads.    (line  25)
* scaleDurations:                        Scaling durations.   (line  34)
* scaleDurations <1>:                    Polymetric notation. (line   6)
* scaleDurations <2>:                    Available music functions.
                                                              (line 432)
* score-markup-spacing:                  List of flexible vertical spacing paper variables.
                                                              (line  22)
* score-system-spacing:                  List of flexible vertical spacing paper variables.
                                                              (line  27)
* scoreTitleMarkup:                      Custom layout for titles.
                                                              (line   6)
* self-alignment-X:                      Within-system spacing properties.
                                                              (line   6)
* set:                                   Setting automatic beam behavior.
                                                              (line   6)
* set-global-staff-size:                 Setting the staff size.
                                                              (line   6)
* set-octavation:                        Ottava brackets.     (line   6)
* settingsFrom:                          Available music functions.
                                                              (line 434)
* sf:                                    Dynamics.            (line   6)
* sff:                                   Dynamics.            (line   6)
* sfz:                                   Dynamics.            (line   6)
* shape:                                 Available music functions.
                                                              (line 438)
* shiftDurations:                        Available music functions.
                                                              (line 445)
* shiftOff:                              Collision resolution.
                                                              (line   6)
* shiftOn:                               Collision resolution.
                                                              (line   6)
* shiftOnn:                              Collision resolution.
                                                              (line   6)
* shiftOnnn:                             Collision resolution.
                                                              (line   6)
* short-indent:                          Instrument names.    (line  50)
* short-indent <1>:                      paper variables for shifts and indents.
                                                              (line  23)
* show-available-fonts:                  Single entry fonts.  (line  23)
* showFirstLength:                       Skipping corrected music.
                                                              (line   6)
* showKeySignature:                      Bagpipe definitions. (line   6)
* showLastLength:                        Skipping corrected music.
                                                              (line   6)
* showStaffSwitch:                       Staff-change lines.  (line   6)
* single:                                Available music functions.
                                                              (line 448)
* skip:                                  Invisible rests.     (line   6)
* skip <1>:                              Available music functions.
                                                              (line 451)
* skipTypesetting:                       Skipping corrected music.
                                                              (line   6)
* slashChordSeparator:                   Customizing chord names.
                                                              (line  87)
* slashedGrace:                          Available music functions.
                                                              (line 453)
* slurDashed:                            Slurs.               (line  31)
* slurDashPattern:                       Slurs.               (line  58)
* slurDashPattern <1>:                   Available music functions.
                                                              (line 456)
* slurDotted:                            Slurs.               (line  31)
* slurDown:                              Slurs.               (line  17)
* slurHalfDashed:                        Slurs.               (line  44)
* slurHalfSolid:                         Slurs.               (line  44)
* slurNeutral:                           Slurs.               (line  17)
* slurSolid:                             Slurs.               (line  31)
* slurUp:                                Slurs.               (line  70)
* small:                                 Selecting notation font size.
                                                              (line   6)
* small <1>:                             Selecting font and font size.
                                                              (line 114)
* smaller:                               Selecting font and font size.
                                                              (line  18)
* smaller <1>:                           Selecting font and font size.
                                                              (line 114)
* sostenutoOff:                          Piano pedals.        (line   6)
* sostenutoOn:                           Piano pedals.        (line   6)
* southernHarmonyHeads:                  Shape note heads.    (line   6)
* southernHarmonyHeadsMinor:             Shape note heads.    (line  25)
* sp:                                    Dynamics.            (line   6)
* spacing:                               Horizontal spacing overview.
                                                              (line  50)
* spacingTweaks:                         Available music functions.
                                                              (line 459)
* Span_stem_engraver:                    Cross-staff stems.   (line   6)
* spp:                                   Dynamics.            (line   6)
* staff-affinity:                        Within-system spacing properties.
                                                              (line   6)
* staff-staff-spacing:                   Within-system spacing properties.
                                                              (line   6)
* Staff.midiInstrument:                  Enhancing MIDI output.
                                                              (line  13)
* staffgroup-staff-spacing:              Within-system spacing properties.
                                                              (line   6)
* Staff_symbol_engraver:                 Hiding staves.       (line   6)
* start-repeat:                          Manual repeat marks. (line   6)
* startGroup:                            Analysis brackets.   (line   6)
* startStaff:                            Staff symbol.        (line   6)
* startStaff <1>:                        Ossia staves.        (line   6)
* startTrillSpan:                        Trills.              (line   6)
* Stem:                                  Cross-staff stems.   (line   6)
* stem-spacing-correction:               Horizontal spacing overview.
                                                              (line  50)
* stemDown:                              Stems.               (line   6)
* stemLeftBeamCount:                     Manual beams.        (line  37)
* stemNeutral:                           Stems.               (line   6)
* stemRightBeamCount:                    Manual beams.        (line  37)
* stemUp:                                Stems.               (line   6)
* stopGroup:                             Analysis brackets.   (line   6)
* stopStaff:                             Staff symbol.        (line   6)
* stopStaff <1>:                         Ossia staves.        (line   6)
* stopStaff <2>:                         Hiding staves.       (line   6)
* stopTrillSpan:                         Trills.              (line   6)
* storePredefinedDiagram:                Predefined fret diagrams.
                                                              (line 183)
* storePredefinedDiagram <1>:            Available music functions.
                                                              (line 462)
* stringTuning:                          Custom tablatures.   (line  40)
* stringTuning <1>:                      Available music functions.
                                                              (line 465)
* stringTunings:                         Custom tablatures.   (line   6)
* stringTunings <1>:                     Predefined fret diagrams.
                                                              (line   6)
* styledNoteHeads:                       Available music functions.
                                                              (line 469)
* sub:                                   Selecting font and font size.
                                                              (line  62)
* suggestAccidentals:                    Annotational accidentals (musica ficta).
                                                              (line  14)
* super:                                 Selecting font and font size.
                                                              (line  62)
* sus:                                   Extended and altered chords.
                                                              (line  69)
* sustainOff:                            Piano pedals.        (line   6)
* sustainOn:                             Piano pedals.        (line   6)
* system-count:                          paper variables for line breaking.
                                                              (line  26)
* system-separator-markup:               Miscellaneous paper variables.
                                                              (line  19)
* system-system-spacing:                 List of flexible vertical spacing paper variables.
                                                              (line  33)
* systems-per-page:                      paper variables for line breaking.
                                                              (line  20)
* tabChordRepeats:                       Available music functions.
                                                              (line 471)
* tabChordRepetition:                    Available music functions.
                                                              (line 475)
* TabStaff:                              Instantiating new staves.
                                                              (line   6)
* TabStaff <1>:                          Default tablatures.  (line   6)
* TabVoice:                              Default tablatures.  (line   6)
* tag:                                   Available music functions.
                                                              (line 478)
* tagGroup:                              Available music functions.
                                                              (line 482)
* taor:                                  Bagpipe definitions. (line   6)
* teaching:                              Automatic accidentals.
                                                              (line 232)
* teeny:                                 Selecting notation font size.
                                                              (line   6)
* teeny <1>:                             Selecting font and font size.
                                                              (line 114)
* tempo:                                 Metronome marks.     (line   6)
* temporary:                             Available music functions.
                                                              (line 485)
* text:                                  Piano pedals.        (line  19)
* textLengthOff:                         Full measure rests.  (line  84)
* textLengthOff <1>:                     Text scripts.        (line  38)
* textLengthOn:                          Full measure rests.  (line  84)
* textLengthOn <1>:                      Text scripts.        (line  38)
* textSpannerDown:                       Text spanners.       (line  32)
* textSpannerNeutral:                    Text spanners.       (line  32)
* textSpannerUp:                         Text spanners.       (line  32)
* thumb:                                 Fingering instructions.
                                                              (line  16)
* tieDashed:                             Ties.                (line  71)
* tieDashPattern:                        Available music functions.
                                                              (line 498)
* tieDotted:                             Ties.                (line  71)
* tieDown:                               Ties.                (line  68)
* tieNeutral:                            Ties.                (line  68)
* tieSolid:                              Ties.                (line  71)
* tieUp:                                 Ties.                (line  68)
* time:                                  Time signature.      (line   6)
* time <1>:                              Setting automatic beam behavior.
                                                              (line   6)
* time <2>:                              Available music functions.
                                                              (line 501)
* times:                                 Available music functions.
                                                              (line 504)
* timeSignatureFraction:                 Polymetric notation. (line   6)
* tiny:                                  Selecting notation font size.
                                                              (line   6)
* tiny <1>:                              Selecting font and font size.
                                                              (line 114)
* tocItem:                               Available music functions.
                                                              (line 506)
* top-margin:                            Fixed vertical spacing paper variables.
                                                              (line  19)
* top-markup-spacing:                    List of flexible vertical spacing paper variables.
                                                              (line  53)
* top-system-spacing:                    List of flexible vertical spacing paper variables.
                                                              (line  47)
* translate:                             Text alignment.      (line  65)
* translate-scaled:                      Text alignment.      (line  65)
* transpose:                             Relative octave entry.
                                                              (line 152)
* transpose <1>:                         Transpose.           (line   6)
* transpose <2>:                         Transpose.           (line 145)
* transpose <3>:                         Available music functions.
                                                              (line 509)
* transposedCueDuring:                   Formatting cue notes.
                                                              (line 161)
* transposedCueDuring <1>:               Available music functions.
                                                              (line 511)
* transposition:                         Instrument transpositions.
                                                              (line   6)
* transposition <1>:                     Quoting other voices.
                                                              (line   6)
* transposition <2>:                     Available music functions.
                                                              (line 517)
* treCorde:                              Piano pedals.        (line   6)
* tremolo:                               Tremolo repeats.     (line   6)
* triangle:                              Graphic notation inside markup.
                                                              (line  50)
* trill:                                 Trills.              (line   6)
* tuplet:                                Tuplets.             (line   6)
* tuplet <1>:                            Polymetric notation. (line   6)
* tuplet <2>:                            Available music functions.
                                                              (line 519)
* tupletDown:                            Tuplets.             (line  30)
* tupletNeutral:                         Tuplets.             (line  30)
* TupletNumber:                          Tuplets.             (line  69)
* tupletNumberFormatFunction:            Tuplets.             (line  60)
* tupletSpan:                            Available music functions.
                                                              (line 529)
* tupletSpannerDuration:                 Tuplets.             (line  60)
* tupletUp:                              Tuplets.             (line  30)
* tweak:                                 Available music functions.
                                                              (line 537)
* two-sided:                             paper variables for two-sided mode.
                                                              (line  10)
* type:                                  Defining new contexts.
                                                              (line   6)
* unaCorda:                              Piano pedals.        (line   6)
* underline:                             Selecting font and font size.
                                                              (line   6)
* undo:                                  Available music functions.
                                                              (line 547)
* unfold:                                Written-out repeats. (line   6)
* unfoldRepeats:                         Available music functions.
                                                              (line 551)
* unHideNotes:                           Hidden notes.        (line   6)
* VaticanaStaff:                         Instantiating new staves.
                                                              (line   6)
* VerticalAxisGroup:                     Within-system spacing properties.
                                                              (line   6)
* voice:                                 Automatic accidentals.
                                                              (line   6)
* voice <1>:                             Automatic accidentals.
                                                              (line 101)
* Voice:                                 Single-staff polyphony.
                                                              (line   6)
* voiceOne:                              Single-staff polyphony.
                                                              (line   6)
* void:                                  Available music functions.
                                                              (line 554)
* walkerHeads:                           Shape note heads.    (line   6)
* walkerHeadsMinor:                      Shape note heads.    (line  25)
* whichBar:                              Bar lines.           (line 268)
* with-color:                            Coloring objects.    (line   6)
* withMusicProperty:                     Available music functions.
                                                              (line 558)
* wordwrap:                              Text alignment.      (line 125)
* wordwrap-lines:                        Multi-page markup.   (line   6)
* X-offset:                              Within-system spacing properties.
                                                              (line   6)
* x11-color:                             Coloring objects.    (line   6)
* x11-color <1>:                         Coloring objects.    (line  69)
* xNote:                                 Available music functions.
                                                              (line 560)
* xNotesOn:                              Available music functions.
                                                              (line 562)

