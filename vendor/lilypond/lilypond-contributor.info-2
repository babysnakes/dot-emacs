This is lilypond-contributor.info, produced by makeinfo version 6.0 from
contributor.texi.

Copyright © 2007–2015 by the authors.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections.  A copy of the license is
     included in the section entitled “GNU Free Documentation License”.


File: lilypond-contributor.info,  Node: Bug Squad checklists,  Prev: Bug Squad setup,  Up: The Bug Squad

8.2.2 Bug Squad checklists
--------------------------

When you do Bug Squad work, start at the top of this page and work your
way down.  Stop when you’ve done 20 minutes.

   Please use the email sorting described in *note Bug Squad setup::.
This means that (as Bug Squad members) you will only ever respond to
emails sent or CC’d to the ‘bug-lilypond’ mailing list.

Emails to you personally
........................

You are not expected to work on Bug Squad matters outside of your 20
minutes, but sometimes a confused user will send a bug report (or an
update to a report) to you personally.  If that happens, please forward
such emails to the ‘bug-lilypond’ list so that the currently-active Bug
Squad member(s) can handle the message.

Daily schedule as of July 2015
..............................

     Monday: Federico Bruni
     Tuesday: Simon Albrecht
     Wednesday: Simon Albrecht
     Thursday: Colin Campbell
     Friday: Ralph Palmer
     Saturday: Colin Campbell
     Sunday:

Emails to ‘bug-answers’
.......................

Some of these emails will be comments on issues that you added to the
tracker.

     If they are asking for more information, give the additional
     information.

   • If the email says that the issue was classified in some other
     manner, read the rationale given and take that into account for the
     next issue you add.

   • Otherwise, move them to your ‘bug-ignore’ folder.

   Some of these emails will be discussions about Bug Squad work; read
those.

Emails to ‘bug-current’
.......................

Dealing with these emails is your main task.  Your job is to get rid of
these emails in the first method which is applicable:

  1. If the email has already been handled by a Bug Squad member (i.e.
     check to see who else has replied to it), delete it.

  2. If the email is a question about how to use LilyPond, reply with
     this response:

          For questions about how to use LilyPond, please read our
          documentation available from:
            <http://lilypond.org/website/manuals.html>
          or ask the lilypond-user mailing list.

  3. If the email mentions “the latest git”, or any version number that
     has not yet been officially released, forward it to
     ‘lilypond-devel’.

  4. If a bug report is not in the form of a Tiny example, direct the
     user to resubmit the report with this response:

          I'm sorry, but due to our limited resources for handling bugs, we
          can only accept reports in the form of Tiny examples.  Please see
          step 2 in our bug reporting guidelines:
            <http://lilypond.org/website/bug-reports.html>

  5. If anything is unclear, ask the user for more information.

     How does the graphical output differ from what the user expected?
     What version of lilypond was used (if not given) and operating
     system (if this is a suspected cause of the problem)?  In short, if
     you cannot understand what the problem is, ask the user to explain
     more.  It is the user’s responsibility to explain the problem, not
     your responsibility to understand it.

  6. If the behavior is expected, the user should be told to read the
     documentation:

          I believe that this is the expected behaviour -- please read our
          documentation about this topic.  If you think that it really is a
          mistake, please explain in more detail.  If you think that the
          docs are unclear, please suggest an improvement as described by
          “Simple tasks -- Documentation” on:
            <http://lilypond.org/website/help-us.html>

  7. If the issue already exists in the tracker, send an email to that
     effect:

          This issue has already been reported; you can follow the
          discussion and be notified about fixes here:

     (copy+paste the google code issue URL)

  8. Accept the report as described in *note Adding issues to the
     tracker::.

   All emails should be CC’d to the ‘bug-lilypond’ list so that other
Bug Squad members know that you have processed the email.

          Note: There is no option for “ignore the bug report” – if you
          cannot find a reason to reject the report, you must accept it.

Regular maintenance
-------------------

After *every release* (both stable and unstable):

   • Issues to verify: go to

          <https://sourceforge.net/p/testlilyissues/issues/search/?q=status%3AFixed>

     (You can also generate this list by selecting the “Open (Fixed)”
     button down the left-hand frame)

     You should see a list of Issues that have been marked as ’Fixed’ by
     a developer.  If the developer has done their job properly, the
     Issue should have the “Labels” field filled in with “Fixed_x_y_z”,
     where X is the major version, y the minor version and z the current
     release.

          Fixed_2_19_39

     This will help you work out which you can verify - do not verify
     any Issues where the claimed fixed build is not yet released.  Work
     your way through these as follows:

     If the Issue refers to a bug, try to reproduce the bug with the
     latest officially released version (not one you’ve built yourself
     from source); if the bug is no longer there, mark the issue
     “Verified” (i.e.  “the fix has been verified to work”).

     Quite a few of these will be issues tracking patches.  *You do not
     have to prove these patches work - simply that they have been
     pushed into the code base.*  The developer should have put
     information similar to “Pushed as as
     d8fce1e1ea2aca1a82e25e47805aef0f70f511b9” in the tracker.  The long
     list of letters and numbers is called the “committish”.  Providing
     you can find this at the git tracker:

          <http://git.savannah.gnu.org/gitweb/?p=lilypond.git>

     then you should mark the issue as verified.  A quick way of finding
     these is to enter the committish at the following address:

          <http://philholmes.net/lilypond/git/>

     The Issue tracker also requires that any issues labelled as
     “Duplicate” are also verified.  Check that the linked issue is a
     duplicate and verify the issue.

     A few (approximately 10%) of the fixed issues relate to the build
     system or fundamental architecture changes; there is no way for you
     to verify these.  Leave those issues alone; somebody else will
     handle them.

   • The official regression test comparison is online at:

          <http://lilypond.org/test/>

     If anything has changed suspiciously, ask if it was deliberate.  If
     the text output from LilyPond (the logfile) changes, the
     differences will be displayed with a + before text added to the
     logfile and - before any text removed from the logfile.  This may
     or may not be suspicious.

     There is one test designed to produce output every time the
     regtests are created.  ‘test-output-distance.ly’ creates randomly
     spaced notes and will always have different output if the regtest
     checker is working.

     More information is available from in *note Precompiled regression
     tests::.

   • Check for any incorrectly-classified items in the tracker.  This
     generally just means looking at the grid to see any items without a
     Type.


File: lilypond-contributor.info,  Node: Issue classification,  Next: Adding issues to the tracker,  Prev: The Bug Squad,  Up: Issues

8.3 Issue classification
========================

The Bug Squad should classify issues according to the guidelines given
by developers.  Every issue should have a Status and Type; the other
fields are optional.

Status (mandatory)
------------------

Open issues:

   • New: the item was added by a non-member, despite numerous warnings
     not to do this.  Should be reviewed by a member of the Bug Squad.

   • Accepted: the Bug Squad added it, or reviewed the item.

   • Started: a contributor is working on a fix.  Owner should change to
     be this contributor.

   Closed issues:

   • Invalid: issue should not have been added in the current state.

   • Duplicate: issue already exists in the tracker.

   • Fixed: a contributor claims to have fixed the bug.  The Bug Squad
     should check the fix with the next official binary release (not by
     compiling the source from git).  Owner should be set to that
     contributor.

   • Verified: Bug Squad has confirmed that the issue is closed.  This
     means that nobody should ever need look at the report again – if
     there is any information in the issue that should be kept, open a
     new issue for that info.

Owner (optional)
----------------

Newly-added issues should have _no owner_.  When a contributor indicates
that he has Started or Fixed an item, he should become the owner.

Type (mandatory)
----------------

The issue’s Type should be the first relevant item in this list.

   • Type-Critical: normally a regression against the current stable
     version or the previous stable version.  Alternatively, a
     regression against a fix developed for the current version.  This
     does not apply where the “regression” occurred because a feature
     was removed deliberately - this is not a bug.

     Currently, only Critical items will block a stable release.

   • Type-Maintainability: hinders future development.

   • Type-Crash: any input which produces a crash.

   • Type-Ugly: overlapping or other ugly notation in graphical output.

   • Type-Defect: a problem in the core program.  (the ‘lilypond’
     binary, scm files, fonts, etc).

   • Type-Documentation: inaccurate, missing, confusing, or desired
     additional info.  Must be fixable by editing a texinfo, ly, or scm
     file.

   • Type-Build: problem or desired features in the build system.  This
     includes the makefiles, stepmake, python scripts, and GUB.

   • Type-Scripts: problem or desired feature in the non-build-system
     scripts.  Mostly used for convert-ly, lilypond-book, etc.

   • Type-Enhancement: a feature request for the core program.  The
     distinction between enhancement and defect isn’t extremely clear;
     when in doubt, mark it as enhancement.

   • Type-Patch: tracking a patch on Rietveld.  Bug squad should not
     need to use this label.

   • Type-Other: anything else.

Opsys (optional)
----------------

Issues that only affect specific operating systems.

Patch label (optional)
----------------------

Normal Bug Squad members should not add or modify Patch issues except to
verify them; for all other Patch work, leave them to the Patch Meister.

   • Patch-new: the patch has not been checked for “obvious” mistakes.
     When in doubt, use this tag.

   • Patch-review: the patch has no “obvious” mistakes (as checked by
     the Patch Meister), and is ready for review from main developers.

     Developers with git push ability can use this category, skipping
     over ‘patch-new’.

   • Patch-needs_work: a developer has some concerns about the patch.
     This does not necessarily mean that the patch must be changed; in
     some cases, the developer’s concerns can be resolved simply by
     discussion the situation or providing notation examples.

     If the patch is updated, the category should be changed to
     ‘patch-new’ (for normal contributors) or ‘patch-review’ (for
     developers who are very confident about their patch).

   • Patch-countdown: final call for any patch problems

   • Patch-push: patch has passed the countdown and should be pushed.

   • Patch-abandoned: the author has not responded to review comments
     for a few months.

Other items (optional)
----------------------

Other labels:

   • Regression: it used to work intentionally in the current stable
     release or the previous stable release.  If the earlier output was
     accidental (i.e.  we didn’t try to stop a collision, but it just so
     happened that two grobs didn’t collide), then breaking it does not
     count as a regression.

     To help decide whether the change is a regression, please adopt the
     following process:

       1. Are you certain the change is OK? If so, do nothing.

       2. Are you certain that the change is bad?  Add it to the tracker
          as a regression.

       3. If you’re not certain either way, add it to the tracker as a
          regression but be aware that it may be recategorised or marked
          invalid.

     In particular, anything that breaks a regression test is a
     regression.

   • Frog: the fix is believed to be suitable for a new contributor
     (does not require a great deal of knowledge about LilyPond).  The
     issue should also have an estimated time in a comment.

   • Bounty: somebody is willing to pay for the fix.  Only add this tag
     if somebody has offered an exact figure in US dollars or euros.

   • Warning: graphical output is fine, but lilypond prints a
     false/misleading warning message.  Alternately, a warning should be
     printed (such as a bar line error), but was not.  Also applies to
     warnings when compiling the source code or generating
     documentation.

   • Security: security risk.

   • Performance: performance issue.

   If you particularly want to add a label not in the list, go ahead,
but this is not recommended, except when an issue is marked as fixed.
In this case it should be labeled Fixed_mm_MM_ss, where mm is major
version, MM minor version and ss current release.


File: lilypond-contributor.info,  Node: Adding issues to the tracker,  Next: Patch handling,  Prev: Issue classification,  Up: Issues

8.4 Adding issues to the tracker
================================

          Note: This should only be done by the Bug Squad or experienced
          developers.  Normal users should not do this; instead, they
          should follow the guidelines for *note (lilypond-web)Bug
          reports::.

   In order to assign labels to issues, Bug Squad members should log in
to their google account before adding an item.

  1. Check if the issue falls into any previous category given on the
     relevant checklists in *note Bug Squad checklists::.  If in doubt,
     add a new issue for a report.  We would prefer to have some
     incorrectly-added issues rather than lose information that should
     have been added.

  2. Add the issue and classify it according to the guidelines in *note
     Issue classification::.  In particular, the item should have
     ‘Status’ and ‘Type-’ labels.

     Include output with the first applicable method:

        • If the issue has a notation example which fits in one system,
          generate a small ‘bug.preview.png’ file with:

               lilypond -dpreview bug.ly

        • If the issue has an example which requires more than one
          system (i.e.  a spacing bug), generate a ‘bug.png’ file with:

               lilypond --png bug.ly

        • If the issue requires one or two pages of output, then
          generate a ‘bug.png’ file with the normal:

               lilypond --png bug.ly

        • Images created as ‘bug.png’ may be trimmed to a minimum size
          by using the ‘trimtagline.sh’ script, which can be found at

               <https://raw.github.com/gperciva/lilypond-extra/master/bug-squad/trimtagline.sh>

               trimtagline.sh bug.ly

        • If the issue cannot be shown with less than three pages, then
          generate a ‘bug.pdf’ file with:

               lilypond --pdf bug.ly

          Note that this is likely to be extremely rare; most bugs
          should fit into the first two categories above.

  3. After adding the issue, please send a response email to the same
     group(s) that the initial patch was sent to.  If the initial email
     was sent to multiple mailing lists (such as both ‘user’ and
     ‘bugs’), then reply to all those mailing lists as well.  The email
     should contain a link to the issue you just added.


File: lilypond-contributor.info,  Node: Patch handling,  Next: Summary of project status,  Prev: Adding issues to the tracker,  Up: Issues

8.5 Patch handling
==================

          Note: This is not a Bug Squad responsibility; we have a
          separate person handling this task.

   For contributors/developers: follow the steps in *note Patches::, and
*note Pushing to staging::.


File: lilypond-contributor.info,  Node: Summary of project status,  Prev: Patch handling,  Up: Issues

8.6 Summary of project status
=============================

Project overview
................

Project activity

     <https://sourceforge.net/projects/testlilyissues/>

Hindering development
.....................

These issues stop or slow development work:

     <https://sourceforge.net/p/testlilyissues/issues/search/?q=status:Accepted%20AND%20_type:Maintainability>

Easy tasks
..........

Issues tagged with ‘Frog’ indicates a task suitable for a relatively new
contributor.  The time given is a quick (and probably inaccurate)
estimate of the time required for somebody who is familiar with material
in this manual, but does not know anything else about LilyPond
development.

     <https://sourceforge.net/p/testlilyissues/issues/search/?q=status:Accepted%20AND%20labels:Frog>

Patches currently in the Patch Review cycle
...........................................

Overview

     http://philholmes.net/lilypond/allura/

New patches

     <https://sourceforge.net/p/testlilyissues/issues/search/?q=status%3AStarted+AND+_patch%3Anew>

Patches under Review

     <https://sourceforge.net/p/testlilyissues/issues/search/?q=status%3AStarted+AND+_patch%3Areview>

Patches on final Countdown

     <https://sourceforge.net/p/testlilyissues/issues/search/?q=status%3AStarted+AND+_patch%3Acountdown>

Patches that can be pushed

     <https://sourceforge.net/p/testlilyissues/issues/search/?q=status%3AStarted+AND+_patch%3Apush>


File: lilypond-contributor.info,  Node: Regression tests,  Next: Programming work,  Prev: Issues,  Up: Top

9 Regression tests
******************

* Menu:

* Introduction to regression tests::
* Precompiled regression tests::
* Compiling regression tests::
* Regtest comparison::
* Pixel-based regtest comparison::
* Finding the cause of a regression::
* Memory and coverage tests::
* MusicXML tests::
* Grand Regression Test Checking::


File: lilypond-contributor.info,  Node: Introduction to regression tests,  Next: Precompiled regression tests,  Up: Regression tests

9.1 Introduction to regression tests
====================================

LilyPond has a complete suite of regression tests that are used to
ensure that changes to the code do not break existing behavior.  These
regression tests comprise small LilyPond snippets that test the
functionality of each part of LilyPond.

   Regression tests are added when new functionality is added to
LilyPond.  We do not yet have a policy on when it is appropriate to add
or modify a regtest when bugs are fixed.  Individual developers should
use their best judgement until this is clarified during the *note Grand
Organization Project (GOP)::.

   The regression tests are compiled using special ‘make’ targets.
There are three primary uses for the regression tests.  First,
successful completion of the regression tests means that LilyPond has
been properly built.  Second, the output of the regression tests can be
manually checked to ensure that the graphical output matches the
description of the intended output.  Third, the regression test output
from two different versions of LilyPond can be automatically compared to
identify any differences.  These differences should then be manually
checked to ensure that the differences are intended.

   Regression tests (“regtests”) are available in precompiled form as
part of the documentation.  Regtests can also be compiled on any machine
that has a properly configured LilyPond build system.


File: lilypond-contributor.info,  Node: Precompiled regression tests,  Next: Compiling regression tests,  Prev: Introduction to regression tests,  Up: Regression tests

9.2 Precompiled regression tests
================================

Regression test output
----------------------

As part of the release process, the regression tests are run for every
LilyPond release.  Full regression test output is available for every
stable version and the most recent development version.

   Regression test output is available in HTML and PDF format.  Links to
the regression test output are available at the developer’s resources
page for the version of interest.

   The latest stable version of the regtests is found at:

     <http://lilypond.org/doc/stable/input/regression/collated-files.html>

   The latest development version of the regtests is found at:

     <http://lilypond.org/doc/latest/input/regression/collated-files.html>

Regression test comparison
--------------------------

Each time a new version is released, the regtests are compiled and the
output is automatically compared with the output of the previous
release.  The result of these comparisons is archived online:

     <http://lilypond.org/test/>

   Checking these pages is a very important task for the LilyPond
project.  You are invited to report anything that looks broken, or any
case where the output quality is not on par with the previous release,
as described in *note (lilypond-web)Bug reports::.

          Note: The special regression test ‘test-output-distance.ly’
          will always show up as a regression.  This test changes each
          time it is run, and serves to verify that the regression tests
          have, in fact, run.

What to look for
----------------

The test comparison shows all of the changes that occurred between the
current release and the prior release.  Each test that has a significant
(noticeable) difference in output is displayed, with the old version on
the left and the new version on the right.

   Some of the small changes can be ignored (slightly different slur
shapes, small variations in note spacing), but this is not always the
case: sometimes even the smallest change means that something is wrong.
To help in distinguishing these cases, we use bigger staff size when
small differences matter.

   Staff size 30 generally means "pay extra attention to details".
Staff size 40 (two times bigger than default size) or more means that
the regtest *is* about the details.

   Staff size smaller than default doesn’t mean anything.

   Regression tests whose output is the same for both versions are not
shown in the test comparison.

   • Images: green blurs in the new version show the approximate
     location of elements in the old version.

     There are often minor adjustments in spacing which do not indicate
     any problem.

   • Log files: show the difference in command-line output.

     The main thing to examine are any changes in page counts – if a
     file used to fit on 1 page but now requires 4 or 5 pages, something
     is suspicious!

   • Profile files: give information about TODO? I don’t know what
     they’re for.  Apparently they give some information about CPU
     usage.  If you got tons of changes in cell counts, this probably
     means that you compiled ‘make test-baseline’ with a different
     amount of CPU threads than ‘make check’.  Try redoing tests from
     scratch with the same number of threads each time – see *note
     Saving time with the -j option::.

          Note: The automatic comparison of the regtests checks the
          LilyPond bounding boxes.  This means that Ghostscript changes
          and changes in lyrics or text are not found.


File: lilypond-contributor.info,  Node: Compiling regression tests,  Next: Regtest comparison,  Prev: Precompiled regression tests,  Up: Regression tests

9.3 Compiling regression tests
==============================

Developers may wish to see the output of the complete regression test
suite for the current version of the source repository between releases.
Current source code is available; see *note Working with source code::.

   For regression testing ‘../configure’ should be run with the
‘--disable-optimising’ option.  Then you will need to build the LilyPond
binary; see *note Compiling LilyPond::.

   Uninstalling the previous LilyPond version is not necessary, nor is
running ‘make install’, since the tests will automatically be compiled
with the LilyPond binary you have just built in your source directory.

   From this point, the regtests are compiled with:

     make test

   If you have a multi-core machine you may want to use the ‘-j’ option
and CPU_COUNT variable, as described in *note Saving time with
CPU_COUNT::.  For a quad-core processor the complete command would be:

     make -j5 CPU_COUNT=5 test

   The regtest output will then be available in
‘input/regression/out-test’.
‘input/regression/out-test/collated-examples.html’ contains a listing of
all the regression tests that were run, but none of the images are
included.  Individual images are also available in this directory.

   The primary use of ‘make test’ is to verify that the regression tests
all run without error.  The regression test page that is part of the
documentation is created only when the documentation is built, as
described in *note Generating documentation::.  Note that building the
documentation requires more installed components than building the
source code, as described in *note Requirements for building
documentation::.


File: lilypond-contributor.info,  Node: Regtest comparison,  Next: Pixel-based regtest comparison,  Prev: Compiling regression tests,  Up: Regression tests

9.4 Regtest comparison
======================

Before modified code is committed to ‘master’ (via ‘staging’), a
regression test comparison must be completed to ensure that the changes
have not caused problems with previously working code.  The comparison
is made automatically upon compiling the regression test suite twice.

  1. Run ‘make’ with current git master without any of your changes.

  2. Before making changes to the code, establish a baseline for the
     comparison by going to the ‘$LILYPOND_GIT/build/’ directory and
     running:

          make test-baseline

  3. Make your changes, or apply the patch(es) to consider.

  4. Compile the source with ‘make’ as usual.

  5. Check for unintentional changes to the regtests:

          make check

     After this has finished, a regression test comparison will be
     available (relative to the current ‘build/’ directory) at:

          out/test-results/index.html

     For each regression test that differs between the baseline and the
     changed code, a regression test entry will be displayed.  Ideally,
     the only changes would be the changes that you were working on.  If
     regressions are introduced, they must be fixed before committing
     the code.

               Note: The special regression test
               ‘test-output-distance.ly’ will always show up as a
               regression.  This test changes each time it is run, and
               serves to verify that the regression tests have, in fact,
               run.

  6. If you are happy with the results, then stop now.

     If you want to continue programming, then make any additional code
     changes, and continue.

  7. Compile the source with ‘make’ as usual.

  8. To re-check files that differed between the initial
     ‘make test-baseline’ and your post-changes ‘make check’, run:

          make test-redo

     This updates the regression list at ‘out/test-results/index.html’.
     It does _not_ redo ‘test-output-distance.ly’.

  9. When all regressions have been resolved, the output list will be
     empty.

  10. Once all regressions have been resolved, a final check should be
     completed by running:

          make test-clean
          make check

     This cleans the results of the previous ‘make check’, then does the
     automatic regression comparison again.

     Advanced note: Once a test baseline has been established, there is
     no need to run it again unless git master changed.  In other words,
     if you work with several branches and want to do regtests
     comparison for all of them, you can ‘make test-baseline’ with git
     master, checkout some branch, ‘make’ and ‘make check’ it, then
     switch to another branch, ‘make test-clean’, ‘make’ and ‘make
     check’ it without doing ‘make test-baseline’ again.


File: lilypond-contributor.info,  Node: Pixel-based regtest comparison,  Next: Finding the cause of a regression,  Prev: Regtest comparison,  Up: Regression tests

9.5 Pixel-based regtest comparison
==================================

As an alternative to the ‘make test’ method for regtest checking (which
relies upon ‘.signature’ files created by a LilyPond run and which
describe the placing of grobs) there is a script which compares the
output of two LilyPond versions pixel-by-pixel.  To use this, start by
checking out the version of LilyPond you want to use as a baseline, and
run ‘make’.  Then, do the following:

     cd $LILYPOND_GIT/scripts/auxiliar/
     ./make-regtest-pngs.sh -j9 -o

   The ‘-j9’ option tells the script to use 9 CPUs to create the images
- change this to your own CPU count+1.  ‘-o’ means this is the "old"
version.  This will create images of all the regtests in

     $LILYPOND_BUILD_DIR/out-png-check/old-regtest-results/

   Now checkout the version you want to compare with the baseline.  Run
‘make’ again to recreate the LilyPond binary.  Then, do the following:

     cd $LILYPOND_GIT/scripts/auxiliar/
     ./make-regtest-pngs.sh -j9 -n

   The ‘-n’ option tells the script to make a "new" version of the
images.  They are created in

     $LILYPOND_BUILD_DIR/out-png-check/new-regtest-results/

   Once the new images have been created, the script compares the old
images with the new ones pixel-by-pixel and prints a list of the
different images to the terminal, together with a count of how many
differences were found.  The results of the checks are in

     $LILYPOND_BUILD_DIR/out-png-check/regtest-diffs/

   To check for differences, browse that directory with an image viewer.
Differences are shown in red.  Be aware that some images with complex
fonts or spacing annotations always display a few minor differences.
These can safely be ignored.


File: lilypond-contributor.info,  Node: Finding the cause of a regression,  Next: Memory and coverage tests,  Prev: Pixel-based regtest comparison,  Up: Regression tests

9.6 Finding the cause of a regression
=====================================

Git has special functionality to help tracking down the exact commit
which causes a problem.  See the git manual page for ‘git bisect’.  This
is a job that non-programmers can do, although it requires familiarity
with git, ability to compile LilyPond, and generally a fair amount of
technical knowledge.  A brief summary is given below, but you may need
to consult other documentation for in-depth explanations.

   Even if you are not familiar with git or are not able to compile
LilyPond you can still help to narrow down the cause of a regression
simply by downloading the binary releases of different LilyPond versions
and testing them for the regression.  Knowing which version of LilyPond
first exhibited the regression is helpful to a developer as it shortens
the ‘git bisect’ procedure.

   Once a problematic commit is identified, the programmers’ job is much
easier.  In fact, for most regression bugs, the majority of the time is
spent simply finding the problematic commit.

   More information is in *note Regression tests::.

git bisect setup
----------------

We need to set up the bisect for each problem we want to investigate.

   Suppose we have an input file which compiled in version 2.13.32, but
fails in version 2.13.38 and above.

  1. Begin the process:

          git bisect start

  2. Give it the earliest known bad tag:

          git bisect bad release/2.13.38-1

     (you can see tags with: ‘git tag’ )

  3. Give it the latest known good tag:

          git bisect good release/2.13.32-1

     You should now see something like:
          Bisecting: 195 revisions left to test after this (roughly 8 steps)
          [b17e2f3d7a5853a30f7d5a3cdc6b5079e77a3d2a] Web: Announcement
          update for the new “LilyPond Report”.

git bisect actual
-----------------

  1. Compile the source:

          make

  2. Test your input file:

          out/bin/lilypond test.ly

  3. Test results?

        • Does it crash, or is the output bad?  If so:

               git bisect bad

        • Does your input file produce good output?  If so:

               git bisect good

  4. Once the exact problem commit has been identified, git will inform
     you with a message like:

          6d28aebbaaab1be9961a00bf15a1ef93acb91e30 is the first bad commit
          %%% ... blah blah blah ...

     If there is still a range of commits, then git will automatically
     select a new version for you to test.  Go to step #1.

Recommendation: use two terminal windows
----------------------------------------

   • One window is open to the ‘build/’ directory, and alternates
     between these commands:

          make
          out/bin/lilypond test.ly

   • One window is open to the top source directory, and alternates
     between these commands:

          git bisect good
          git bisect bad


File: lilypond-contributor.info,  Node: Memory and coverage tests,  Next: MusicXML tests,  Prev: Finding the cause of a regression,  Up: Regression tests

9.7 Memory and coverage tests
=============================

In addition to the graphical output of the regression tests, it is
possible to test memory usage and to determine how much of the source
code has been exercised by the tests.

Memory usage
------------

For tracking memory usage as part of this test, you will need GUILE CVS;
especially the following patch:
     <http://www.lilypond.org/vc/old/gub.darcs/patches/guile-1.9-gcstats.patch>.

Code coverage
-------------

For checking the coverage of the test suite, do the following

     ./scripts/auxiliar/build-coverage.sh
     _# uncovered files, least covered first_
     ./scripts/auxiliar/coverage.py  --summary out-cov/*.cc
     _# consecutive uncovered lines, longest first_
     ./scripts/auxiliar/coverage.py  --uncovered out-cov/*.cc


File: lilypond-contributor.info,  Node: MusicXML tests,  Next: Grand Regression Test Checking,  Prev: Memory and coverage tests,  Up: Regression tests

9.8 MusicXML tests
==================

LilyPond comes with a complete set of regtests for the MusicXML
(http://www.musicxml.org/) language.  Originally developed to test
‘musicxml2ly’, these regression tests can be used to test any MusicXML
implementation.

   The MusicXML regression tests are found at
‘input/regression/musicxml/’.

   The output resulting from running these tests through ‘musicxml2ly’
followed by ‘lilypond’ is available in the LilyPond documentation:

     <http://lilypond.org/doc/latest/input/regression/musicxml/collated-files>


File: lilypond-contributor.info,  Node: Grand Regression Test Checking,  Prev: MusicXML tests,  Up: Regression tests

9.9 Grand Regression Test Checking
==================================

What is this all about?
-----------------------

Regression tests (usually abbreviated "regtests") is a collection of
‘.ly’ files used to check whether LilyPond is working correctly.
Example: before version 2.15.12 breve noteheads had incorrect width,
which resulted in collisions with other objects.  After the issue was
fixed, a small ‘.ly’ file demonstrating the problem was added to the
regression tests as a proof that the fix works.  If someone will
accidentally break breve width again, we will notice this in the output
of that regression test.

How can I help?
---------------

We ask you to help us by checking one or two regtests from time to time.
You don’t need programming skills to do this, not even LilyPond skills -
just basic music notation knowledge; checking one regtest takes less
than a minute.  Simply go here:

     <http://www.philholmes.net/lilypond/regtests/>

Some tips on checking regtests
------------------------------

Description text
................

The description should be clear even for a music beginner.  If there are
any special terms used in the description, they all should be explained
in our *note Music Glossary: (music-glossary)Top. or *note Internals
Reference: (lilypond-internals)Top.  Vague descriptions (like "behaves
well", "looks reasonable") shouldn’t be used.


File: lilypond-contributor.info,  Node: Programming work,  Next: Release work,  Prev: Regression tests,  Up: Top

10 Programming work
*******************

* Menu:

* Overview of LilyPond architecture::
* LilyPond programming languages::
* Programming without compiling::
* Finding functions::
* Code style::
* Warnings Errors Progress and Debug Output::
* Debugging LilyPond::
* Tracing object relationships::
* Adding or modifying features::
* Iterator tutorial::
* Engraver tutorial::
* Callback tutorial::
* Understanding pure properties::
* LilyPond scoping::
* Scheme->C interface::
* LilyPond miscellany::


File: lilypond-contributor.info,  Node: Overview of LilyPond architecture,  Next: LilyPond programming languages,  Up: Programming work

10.1 Overview of LilyPond architecture
======================================

LilyPond processes the input file into graphical and musical output in a
number of stages.  This process, along with the types of routines that
accomplish the various stages of the process, is described in this
section.  A more complete description of the LilyPond architecture and
internal program execution is found in Erik Sandberg’s master’s thesis
(http://lilypond.org/website/pdf/thesis-erik-sandberg.pdf).

   The first stage of LilyPond processing is _parsing_.  In the parsing
process, music expressions in LilyPond input format are converted to
music expressions in Scheme format.  In Scheme format, a music
expression is a list in tree form, with nodes that indicate the
relationships between various music events.  The LilyPond parser is
written in Bison.

   The second stage of LilyPond processing is _iterating_.  Iterating
assigns each music event to a context, which is the environment in which
the music will be finally engraved.  The context is responsible for all
further processing of the music.  It is during the iteration stage that
contexts are created as necessary to ensure that every note has a Voice
type context (e.g.  Voice, TabVoice, DrumVoice, CueVoice, MensuralVoice,
VaticanaVoice, GregorianTranscriptionVoice), that the Voice type
contexts exist in appropriate Staff type contexts, and that parallel
Staff type contexts exist in StaffGroup type contexts.  In addition,
during the iteration stage each music event is assigned a moment, or a
time in the music when the event begins.

   Each type of music event has an associated iterator.  Iterators are
defined in ‘*-iterator.cc’.  During iteration, an event’s iterator is
called to deliver that music event to the appropriate context(s).

   The final stage of LilyPond processing is _translation_.  During
translation, music events are prepared for graphical or midi output.
The translation step is accomplished by the polymorphic base class
Translator through its two derived classes: Engraver (for graphical
output) and Performer (for midi output).

   Translators are defined in C++ files named ‘*-engraver.cc’ and
‘*-performer.cc’.  Much of the work of translating is handled by Scheme
functions, which is one of the keys to LilyPond’s exceptional
flexibility.

[png]

File: lilypond-contributor.info,  Node: LilyPond programming languages,  Next: Programming without compiling,  Prev: Overview of LilyPond architecture,  Up: Programming work

10.2 LilyPond programming languages
===================================

Programming in LilyPond is done in a variety of programming languages.
Each language is used for a specific purpose or purposes.  This section
describes the languages used and provides links to reference manuals and
tutorials for the relevant language.

10.2.1 C++
----------

The core functionality of LilyPond is implemented in C++.

   C++ is so ubiquitous that it is difficult to identify either a
reference manual or a tutorial.  Programmers unfamiliar with C++ will
need to spend some time to learn the language before attempting to
modify the C++ code.

   The C++ code calls Scheme/GUILE through the GUILE interface, which is
documented in the GUILE Reference Manual
(http://www.gnu.org/software/guile/manual/html_node/index.html).

10.2.2 Flex
-----------

The LilyPond lexer is implemented in Flex, an implementation of the Unix
lex lexical analyser generator.  Resources for Flex can be found here
(http://flex.sourceforge.net/).

10.2.3 GNU Bison
----------------

The LilyPond parser is implemented in Bison, a GNU parser generator.
The Bison homepage is found at gnu.org
(http://www.gnu.org/software/bison/).  The manual (which includes both a
reference and tutorial) is available
(http://www.gnu.org/software/bison/manual/index.html) in a variety of
formats.

10.2.4 GNU Make
---------------

GNU Make is used to control the compiling process and to build the
documentation and the website.  GNU Make documentation is available at
the GNU website (http://www.gnu.org/software/make/manual/).

10.2.5 GUILE or Scheme
----------------------

GUILE is the dialect of Scheme that is used as LilyPond’s extension
language.  Many extensions to LilyPond are written entirely in GUILE.
The GUILE Reference Manual
(http://www.gnu.org/software/guile/manual/html_node/index.html) is
available online.

   Structure and Interpretation of Computer Programs
(http://mitpress.mit.edu/sicp/full-text/book/book.html), a popular
textbook used to teach programming in Scheme is available in its
entirety online.

   An introduction to Guile/Scheme as used in LilyPond can be found in
the *note (lilypond-extending)Scheme tutorial::.

10.2.6 MetaFont
---------------

MetaFont is used to create the music fonts used by LilyPond.  A MetaFont
tutorial is available at the METAFONT tutorial page
(http://metafont.tutorial.free.fr/).

10.2.7 PostScript
-----------------

PostScript is used to generate graphical output.  A brief PostScript
tutorial is available online
(http://local.wasp.uwa.edu.au/~pbourke/dataformats/postscript/).  The
PostScript Language Reference
(http://www.adobe.com/products/postscript/pdfs/PLRM.pdf) is available
online in PDF format.

10.2.8 Python
-------------

Python is used for XML2ly and is used for building the documentation and
the website.

   Python documentation is available at python.org
(http://www.python.org/doc/).


File: lilypond-contributor.info,  Node: Programming without compiling,  Next: Finding functions,  Prev: LilyPond programming languages,  Up: Programming work

10.3 Programming without compiling
==================================

Much of the development work in LilyPond takes place by changing ‘*.ly’
or ‘*.scm’ files.  These changes can be made without compiling LilyPond.
Such changes are described in this section.

10.3.1 Modifying distribution files
-----------------------------------

Much of LilyPond is written in Scheme or LilyPond input files.  These
files are interpreted when the program is run, rather than being
compiled when the program is built, and are present in all LilyPond
distributions.  You will find ‘.ly’ files in the ‘ly/’ directory and the
Scheme files in the ‘scm/’ directory.  Both Scheme files and ‘.ly’ files
can be modified and saved with any text editor.  It’s probably wise to
make a backup copy of your files before you modify them, although you
can reinstall if the files become corrupted.

   Once you’ve modified the files, you can test the changes just by
running LilyPond on some input file.  It’s a good idea to create a file
that demonstrates the feature you’re trying to add.  This file will
eventually become a regression test and will be part of the LilyPond
distribution.

10.3.2 Desired file formatting
------------------------------

Files that are part of the LilyPond distribution have Unix-style line
endings (LF), rather than DOS (CR+LF) or MacOS 9 and earlier (CR). Make
sure you use the necessary tools to ensure that Unix-style line endings
are preserved in the patches you create.

   Tab characters should not be included in files for distribution.  All
indentation should be done with spaces.  Most editors have settings to
allow the setting of tab stops and ensuring that no tab characters are
included in the file.

   Scheme files and LilyPond files should be written according to
standard style guidelines.  Scheme file guidelines can be found at
<http://community.schemewiki.org/?scheme-style>.  Following these
guidelines will make your code easier to read.  Both you and others that
work on your code will be glad you followed these guidelines.

   For LilyPond files, you should follow the guidelines for LilyPond
snippets in the documentation.  You can find these guidelines at *note
Texinfo introduction and usage policy::.


File: lilypond-contributor.info,  Node: Finding functions,  Next: Code style,  Prev: Programming without compiling,  Up: Programming work

10.4 Finding functions
======================

When making changes or fixing bugs in LilyPond, one of the initial
challenges is finding out where in the code tree the functions to be
modified live.  With nearly 3000 files in the source tree,
trial-and-error searching is generally ineffective.  This section
describes a process for finding interesting code.

10.4.1 Using the ROADMAP
------------------------

The file ROADMAP is located in the main directory of the lilypond
source.  ROADMAP lists all of the directories in the LilyPond source
tree, along with a brief description of the kind of files found in each
directory.  This can be a very helpful tool for deciding which
directories to search when looking for a function.

10.4.2 Using grep to search
---------------------------

Having identified a likely subdirectory to search, the grep utility can
be used to search for a function name.  The format of the grep command
is

     grep -i functionName subdirectory/*

   This command will search all the contents of the directory
subdirectory/ and display every line in any of the files that contains
functionName.  The ‘-i’ option makes ‘grep’ ignore case – this can be
very useful if you are not yet familiar with our capitalization
conventions.

   The most likely directories to grep for function names are ‘scm/’ for
scheme files, ly/ for lilypond input (‘*.ly’) files, and ‘lily/’ for C++
files.

10.4.3 Using git grep to search
-------------------------------

If you have used git to obtain the source, you have access to a powerful
tool to search for functions.  The command:

     git grep functionName

   will search through all of the files that are present in the git
repository looking for functionName.  It also presents the results of
the search using ‘less’, so the results are displayed one page at a
time.

10.4.4 Searching on the git repository at Savannah
--------------------------------------------------

You can also use the equivalent of git grep on the Savannah server.

   • Go to http://git.sv.gnu.org/gitweb/?p=lilypond.git

   • In the pulldown box that says commit, select grep.

   • Type functionName in the search box, and hit enter/return

   This will initiate a search of the remote git repository.


File: lilypond-contributor.info,  Node: Code style,  Next: Warnings Errors Progress and Debug Output,  Prev: Finding functions,  Up: Programming work

10.5 Code style
===============

This section describes style guidelines for LilyPond source code.

* Menu:

* Languages::
* Filenames::
* Indentation::
* Naming conventions::
* Broken code::
* Code comments::
* Handling errors::
* Localization::


File: lilypond-contributor.info,  Node: Languages,  Next: Filenames,  Up: Code style

10.5.1 Languages
----------------

C++ and Python are preferred.  Python code should use PEP 8.


File: lilypond-contributor.info,  Node: Filenames,  Next: Indentation,  Prev: Languages,  Up: Code style

10.5.2 Filenames
----------------

Definitions of classes that are only accessed via pointers (*) or
references (&) shall not be included as include files.

   filenames

        ".hh"   Include files
             ".cc"      Implementation files
             ".icc"     Inline definition files
             ".tcc"     non inline Template defs

   in emacs:

             (setq auto-mode-alist
                   (append '(("\\.make$" . makefile-mode)
                        ("\\.cc$" . c++-mode)
                        ("\\.icc$" . c++-mode)
                        ("\\.tcc$" . c++-mode)
                        ("\\.hh$" . c++-mode)
                        ("\\.pod$" . text-mode)
                        )
                      auto-mode-alist))

   The class Class_name is coded in ‘class-name.*’


File: lilypond-contributor.info,  Node: Indentation,  Next: Naming conventions,  Prev: Filenames,  Up: Code style

10.5.3 Indentation
------------------

Standard GNU coding style is used.

Indenting files with ‘fixcc.py’ (recommended)
.............................................

LilyPond provides a python script that will adjust the indentation and
spacing on a ‘.cc’ or ‘.hh’ file to very near the GNU standard:

     scripts/auxiliar/fixcc.py FILENAME

   This can be run on all files at once, but this is not recommended for
normal contributors or developers.

     scripts/auxiliar/fixcc.py \
       $(find flower lily -name '*cc' -o -name '*hh' | grep -v /out)

Indenting with emacs
....................

The following hooks will produce indentation which is similar to our
official indentation as produced with ‘fixcc.py’.

     (add-hook 'c++-mode-hook
          '(lambda ()
             (c-set-style "gnu")
             (setq indent-tabs-mode nil))

   If you like using font-lock, you can also add this to your ‘.emacs’:

     (setq font-lock-maximum-decoration t)
     (setq c++-font-lock-keywords-3
           (append
            c++-font-lock-keywords-3
            '(("\\b\\(a-zA-Z_?+_\\)\\b" 1 font-lock-variable-name-face) ("\\b\\(A-Z?+a-z_?+\\)\\b" 1 font-lock-type-face))
            ))

Indenting with vim
------------------

Although emacs indentation is the GNU standard, acceptable indentation
can usually be accomplished with vim.  Some hints for vim are as
follows:

   A workable .vimrc:

     set cindent
     set smartindent
     set autoindent
     set expandtab
     set softtabstop=2
     set shiftwidth=2
     filetype plugin indent on
     set incsearch
     set ignorecase smartcase
     set hlsearch
     set confirm
     set statusline=%F%m%r%h%w\ %{&ff}\ %Y\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ %04l,%04v\ %p%%\ [LEN=%L]
     set laststatus=2
     set number
     " Remove trailing whitespace on write
     autocmd BufWritePre * :%s/\s\+$//e

   With this ‘.vimrc’, files can be reindented automatically by
highlighting the lines to be indented in visual mode (use V to enter
visual mode) and pressing ‘=’.

   A ‘scheme.vim’ file will help improve the indentation.  This one was
suggested by Patrick McCarty.  It should be saved in
‘~/.vim/after/syntax/scheme.vim’.

     " Additional Guile-specific 'forms'
     syn keyword schemeSyntax define-public define*-public
     syn keyword schemeSyntax define* lambda* let-keywords*
     syn keyword schemeSyntax defmacro defmacro* define-macro
     syn keyword schemeSyntax defmacro-public defmacro*-public
     syn keyword schemeSyntax use-modules define-module
     syn keyword schemeSyntax define-method define-class

     " Additional LilyPond-specific 'forms'
     syn keyword schemeSyntax define-markup-command define-markup-list-command
     syn keyword schemeSyntax define-safe-public define-music-function
     syn keyword schemeSyntax def-grace-function

     " All of the above should influence indenting too
     set lw+=define-public,define*-public
     set lw+=define*,lambda*,let-keywords*
     set lw+=defmacro,defmacro*,define-macro
     set lw+=defmacro-public,defmacro*-public
     set lw+=use-modules,define-module
     set lw+=define-method,define-class
     set lw+=define-markup-command,define-markup-list-command
     set lw+=define-safe-public,define-music-function
     set lw+=def-grace-function

     " These forms should not influence indenting
     set lw-=if
     set lw-=set!

     " Try to highlight all ly: procedures
     syn match schemeFunc "ly:[^) ]\+"


File: lilypond-contributor.info,  Node: Naming conventions,  Next: Broken code,  Prev: Indentation,  Up: Code style

10.5.4 Naming Conventions
-------------------------

Naming conventions have been established for LilyPond source code.

Classes and Types
-----------------

Classes begin with an uppercase letter, and words in class names are
separated with ‘_’:

This_is_a_class

Members
-------

Member variable names end with an underscore:

Type Class::member_

Macros
------

Macro names should be written in uppercase completely, with words
separated by ‘_’:

THIS_IS_A_MACRO

Variables
---------

Variable names should be complete words, rather than abbreviations.  For
example, it is preferred to use ‘thickness’ rather than ‘th’ or ‘t’.

   Multi-word variable names in C++ should have the words separated by
the underscore character (‘_’):

cxx_multiword_variable

   Multi-word variable names in Scheme should have the words separated
by a hyphen (‘-’):

scheme-multiword-variable


File: lilypond-contributor.info,  Node: Broken code,  Next: Code comments,  Prev: Naming conventions,  Up: Code style

10.5.5 Broken code
------------------

Do not write broken code.  This includes hardwired dependencies,
hardwired constants, slow algorithms and obvious limitations.  If you
can not avoid it, mark the place clearly, and add a comment explaining
shortcomings of the code.

   Ideally, the comment marking the shortcoming would include TODO, so
that it is marked for future fixing.

   We reject broken-in-advance on principle.


File: lilypond-contributor.info,  Node: Code comments,  Next: Handling errors,  Prev: Broken code,  Up: Code style

10.5.6 Code comments
--------------------

Comments may not be needed if descriptive variable names are used in the
code and the logic is straightforward.  However, if the logic is
difficult to follow, and particularly if non-obvious code has been
included to resolve a bug, a comment describing the logic and/or the
need for the non-obvious code should be included.

   There are instances where the current code could be commented better.
If significant time is required to understand the code as part of
preparing a patch, it would be wise to add comments reflecting your
understanding to make future work easier.


File: lilypond-contributor.info,  Node: Handling errors,  Next: Localization,  Prev: Code comments,  Up: Code style

10.5.7 Handling errors
----------------------

As a general rule, you should always try to continue computations, even
if there is some kind of error.  When the program stops, it is often
very hard for a user to pinpoint what part of the input causes an error.
Finding the culprit is much easier if there is some viewable output.

   So functions and methods do not return errorcodes, they never crash,
but report a programming_error and try to carry on.

   Error and warning messages need to be localized.


File: lilypond-contributor.info,  Node: Localization,  Prev: Handling errors,  Up: Code style

10.5.8 Localization
-------------------

This document provides some guidelines to help programmers write proper
user messages.  To help translations, user messages must follow uniform
conventions.  Follow these rules when coding for LilyPond.  Hopefully,
this can be replaced by general GNU guidelines in the future.  Even
better would be to have an English (en_BR, en_AM) guide helping
programmers writing consistent messages for all GNU programs.

   Non-preferred messages are marked with ‘+’.  By convention,
ungrammatical examples are marked with ‘*’.  However, such ungrammatical
examples may still be preferred.

   • Every message to the user should be localized (and thus be marked
     for localization).  This includes warning and error messages.

   • Do not localize/gettextify:

        • ‘programming_error ()’s

        • ‘programming_warning ()’s

        • debug strings

        • output strings (PostScript, TeX, etc.)

   • Messages to be localized must be encapsulated in ‘_ (STRING)’ or
     ‘_f (FORMAT, ...)’.  E.g.:

          warning (_ ("need music in a score"));
          error (_f ("cannot open file: `%s'", file_name));

     In some rare cases you may need to call ‘gettext ()’ by hand.  This
     happens when you pre-define (a list of) string constants for later
     use.  In that case, you’ll probably also need to mark these string
     constants for translation, using ‘_i (STRING)’.  The ‘_i’ macro is
     a no-op, it only serves as a marker for ‘xgettext’.

          char const* messages[] = {
            _i ("enable debugging output"),
            _i ("ignore lilypond version"),
            0
          };

          void
          foo (int i)
          {
            puts (gettext (messages i));
          }

     See also ‘flower/getopt-long.cc’ and ‘lily/main.cc’.

   • Do not use leading or trailing whitespace in messages.  If you need
     whitespace to be printed, prepend or append it to the translated
     message

          message ("Calculating line breaks..." + " ");

   • Error or warning messages displayed with a file name and line
     number never start with a capital, eg,

          foo.ly: 12: not a duration: 3

     Messages containing a final verb, or a gerund (‘-ing’-form) always
     start with a capital.  Other (simpler) messages start with a
     lowercase letter

          Processing foo.ly...
          `foo': not declared.
          Not declaring: `foo'.

   • Avoid abbreviations or short forms, use ‘cannot’ and ‘do not’
     rather than ‘can’t’ or ‘don’t’ To avoid having a number of
     different messages for the same situation, well will use quoting
     like this ‘"message: ‘%s’"’ for all strings.  Numbers are not
     quoted:

          _f ("cannot open file: `%s'", name_str)
          _f ("cannot find character number: %d", i)

   • Think about translation issues.  In a lot of cases, it is better to
     translate a whole message.  English grammar must not be imposed on
     the translator.  So, instead of

          stem at  + moment.str () +  does not fit in beam

     have

          _f ("stem at %s does not fit in beam", moment.str ())

   • Split up multi-sentence messages, whenever possible.  Instead of

          warning (_f ("out of tune!  Can't find: `%s'", "Key_engraver"));
          warning (_f ("cannot find font `%s', loading default", font_name));

     rather say:

          warning (_ ("out of tune:"));
          warning (_f ("cannot find: `%s', "Key_engraver"));
          warning (_f ("cannot find font: `%s', font_name));
          warning (_f ("Loading default font"));

   • If you must have multiple-sentence messages, use full punctuation.
     Use two spaces after end of sentence punctuation.  No punctuation
     (esp.  period) is used at the end of simple messages.

          _f ("Non-matching braces in text `%s', adding braces", text)
          _ ("Debug output disabled.  Compiled with NPRINT.")
          _f ("Huh?  Not a Request: `%s'.  Ignoring.", request)

   • Do not modularize too much; words frequently cannot be translated
     without context.  It is probably safe to treat most occurrences of
     words like stem, beam, crescendo as separately translatable words.

   • When translating, it is preferable to put interesting information
     at the end of the message, rather than embedded in the middle.
     This especially applies to frequently used messages, even if this
     would mean sacrificing a bit of eloquence.  This holds for original
     messages too, of course.

          en: cannot open: `foo.ly'
          +   nl: kan `foo.ly' niet openen (1)
          kan niet openen: `foo.ly'*   (2)
          niet te openen: `foo.ly'*    (3)

     The first nl message, although grammatically and stylistically
     correct, is not friendly for parsing by humans (even if they speak
     dutch).  I guess we would prefer something like (2) or (3).

   • Do not run make po/po-update with GNU gettext < 0.10.35


File: lilypond-contributor.info,  Node: Warnings Errors Progress and Debug Output,  Next: Debugging LilyPond,  Prev: Code style,  Up: Programming work

10.6 Warnings, Errors, Progress and Debug Output
================================================

Available log levels
--------------------

LilyPond has several loglevels, which specify how verbose the output on
the console should be:
   • NONE: No output at all, even on failure
   • ERROR: Only error messages
   • WARN: Only error messages and warnings
   • BASIC_PROGRESS: Warnings, errors and basic progress (success, etc.)
   • PROGRESS: Warnings, errors and full progress messages
   • INFO: Warnings, errors, progress and more detailed information
     (default)
   • DEBUG: All messages, including full debug messages (very verbose!)

   The loglevel can either be set with the environment variable
‘LILYPOND_LOGLEVEL’ or on the command line with the ‘--loglevel=...’
option.

Functions for debug and log output
----------------------------------

LilyPond has two different types of error and log functions:

   • If a warning or error is caused by an identified position in the
     input file, e.g.  by a grob or by a music expression, the functions
     of the ‘Input’ class provide logging functionality that prints the
     position of the message in addition to the message.

   • If a message can not be associated with a particular position in an
     input file, e.g.  the output file cannot be written, then the
     functions in the ‘flower/include/warn.hh’ file will provide logging
     functionality that only prints out the message, but no location.

   There are also Scheme functions to access all of these logging
functions from scheme.  In addition, the Grob class contains some
convenience wrappers for even easier access to these functions.

   The message and debug functions in ‘warn.hh’ also have an optional
argument ‘newline’, which specifies whether the message should always
start on a new line or continue a previous message.  By default,
‘progress_indication’ does NOT start on a new line, but rather continue
the previous output.  They also do not have a particular input position
associated, so there are no progress functions in the Input class.  All
other functions by default start their output on a new line.

   The error functions come in three different flavors: fatal error
messages, programming error messages and normal error messages.  Errors
written by the ‘error ()’ function will cause LilyPond to exit
immediately, errors by ‘Input::error ()’ will continue the compilation,
but return a non-zero return value of the LilyPond call (i.e.  indicate
an unsuccessful program execution).  All other errors will be printed on
the console, but not exit LilyPond or indicate an unsuccessful return
code.  Their only differences to a warnings are the displayed text and
that they will be shown with loglevel ‘ERROR’.

   If the Scheme option ‘warning-as-error’ is set, any warning will be
treated as if ‘Input::error’ was called.

All logging functions at a glance
---------------------------------

             C++, no location               C++ from input location
                                            
---------------------------------------------------------------------------
ERROR        ‘error ()’,                    ‘Input::error (msg)’,
             ‘programming_error (msg)’,     ‘Input::programming_error
             ‘non_fatal_error (msg)’        (msg)’
                                            
WARN         ‘warning (msg)’                ‘Input::warning (msg)’
                                            
BASIC        ‘basic_progress (msg)’         -
                                            
PROGRESS     ‘progress_indication (msg)’    -
                                            
INFO         ‘message (msg)’                ‘Input::message (msg)’
                                            
DEBUG        ‘debug_output (msg)’           ‘Input::debug_output (msg)’
                                            
                                            
             C++ from a Grob                Scheme, music expression
                                            
---------------------------------------------------------------------------
ERROR        ‘Grob::programming_error       -
             (msg)’                         
WARN         ‘Grob::warning (msg)’          ‘(ly:music-warning music
                                            msg)’
                                            
BASIC        -                              -
                                            
PROGRESS     -                              -
                                            
INFO         -                              ‘(ly:music-message music
                                            msg)’
                                            
DEBUG        -                              -
                                            
                                            
             Scheme, no location            Scheme, input location
                                            
---------------------------------------------------------------------------
ERROR        -                              ‘(ly:error msg args)’,
                                            ‘(ly:programming-error msg
                                            args)’
                                            
WARN         ‘(ly:warning msg args)’        ‘(ly:input-warning input msg
                                            args)’
                                            
BASIC        ‘(ly:basic-progress msg        -
             args)’                         
PROGRESS     ‘(ly:progress msg args)’       -
                                            
INFO         ‘(ly:message msg args)’        ‘(ly:input-message input msg
                                            args)’
                                            
DEBUG        ‘(ly:debug msg args)’          -
                                            


File: lilypond-contributor.info,  Node: Debugging LilyPond,  Next: Tracing object relationships,  Prev: Warnings Errors Progress and Debug Output,  Up: Programming work

10.7 Debugging LilyPond
=======================

The most commonly used tool for debugging LilyPond is the GNU debugger
gdb.  The gdb tool is used for investigating and debugging core LilyPond
code written in C++.  Another tool is available for debugging Scheme
code using the Guile debugger.  This section describes how to use both
gdb and the Guile Debugger.

* Menu:

* Debugging overview::
* Debugging C++ code::
* Debugging Scheme code::


File: lilypond-contributor.info,  Node: Debugging overview,  Next: Debugging C++ code,  Up: Debugging LilyPond

10.7.1 Debugging overview
-------------------------

Using a debugger simplifies troubleshooting in at least two ways.

   First, breakpoints can be set to pause execution at any desired
point.  Then, when execution has paused, debugger commands can be issued
to explore the values of various variables or to execute functions.

   Second, the debugger can display a stack trace, which shows the
sequence in which functions have been called and the arguments passed to
the called functions.


File: lilypond-contributor.info,  Node: Debugging C++ code,  Next: Debugging Scheme code,  Prev: Debugging overview,  Up: Debugging LilyPond

10.7.2 Debugging C++ code
-------------------------

The GNU debugger, gdb, is the principal tool for debugging C++ code.

Compiling LilyPond for use with gdb
-----------------------------------

In order to use gdb with LilyPond, it is necessary to compile LilyPond
with debugging information.  This is the current default mode of
compilation.  Often debugging becomes more complicated when the compiler
has optimised variables and function calls away.  In that case it may be
helpful to run the following command in the main LilyPond source
directory:

     ./configure --disable-optimising
     make

   This will create a version of LilyPond with minimal optimization
which will allow the debugger to access all variables and step through
the source code in-order.  It may not accurately reproduce bugs
encountered with the optimized version, however.

   You should not do MAKE INSTALL if you want to use a debugger with
LilyPond.  The MAKE INSTALL command will strip debugging information
from the LilyPond binary.

Typical gdb usage
-----------------

Once you have compiled the LilyPond image with the necessary debugging
information it will have been written to a location in a subfolder of
your current working directory:

     out/bin/lilypond

   This is important as you will need to let gdb know where to find the
image containing the symbol tables.  You can invoke gdb from the command
line using the following:

     gdb out/bin/lilypond
This loads the LilyPond symbol tables into gdb.  Then, to run LilyPond
on ‘test.ly’ under the debugger, enter the following:

     run test.ly

at the gdb prompt.

   As an alternative to running gdb at the command line you may try a
graphical interface to gdb such as ddd:

     ddd out/bin/lilypond

   You can also use sets of standard gdb commands stored in a .gdbinit
file (see next section).

Typical .gdbinit files
----------------------

The behavior of gdb can be readily customized through the use of a
.GDBINIT file.  A .GDBINIT file is a file named .GDBINIT (notice the “.”
at the beginning of the file name) that is placed in a user’s home
directory.

   The .GDBINIT file below is from Han-Wen.  It sets breakpoints for all
errors and defines functions for displaying scheme objects (ps), grobs
(pgrob), and parsed music expressions (pmusic).

     file $LILYPOND_GIT/build/out/bin/lilypond
     b programming_error
     b Grob::programming_error

     define ps
        print ly_display_scm($arg0)
     end
     define pgrob
       print ly_display_scm($arg0->self_scm_)
       print ly_display_scm($arg0->mutable_property_alist_)
       print ly_display_scm($arg0->immutable_property_alist_)
       print ly_display_scm($arg0->object_alist_)
     end
     define pmusic
       print ly_display_scm($arg0->self_scm_)
       print ly_display_scm($arg0->mutable_property_alist_)
       print ly_display_scm($arg0->immutable_property_alist_)
     end


File: lilypond-contributor.info,  Node: Debugging Scheme code,  Prev: Debugging C++ code,  Up: Debugging LilyPond

10.7.3 Debugging Scheme code
----------------------------

Scheme code can be developed using the Guile command line interpreter
‘top-repl’.  You can either investigate interactively using just Guile
or you can use the debugging tools available within Guile.

Using Guile interactively with LilyPond
---------------------------------------

In order to experiment with Scheme programming in the LilyPond
environment, it is necessary to have a Guile interpreter that has all
the LilyPond modules loaded.  This requires the following steps.

   First, define a Scheme symbol for the active module in the ‘.ly’
file:

     #(module-define! (resolve-module '(guile-user))
                      'lilypond-module (current-module))

   Now place a Scheme function in the ‘.ly’ file that gives an
interactive Guile prompt:

     #(top-repl)

   When the ‘.ly’ file is compiled, this causes the compilation to be
interrupted and an interactive guile prompt to appear.  Once the guile
prompt appears, the LilyPond active module must be set as the current
guile module:

     guile> (set-current-module lilypond-module)

   You can demonstrate these commands are operating properly by typing
the name of a LilyPond public scheme function to check it has been
defined:

     guile> fret-diagram-verbose-markup
     #<procedure fret-diagram-verbose-markup (layout props marking-list)>

   If the LilyPond module has not been correctly loaded, an error
message will be generated:

     guile> fret-diagram-verbose-markup
     ERROR: Unbound variable: fret-diagram-verbose-markup
     ABORT: (unbound-variable)

   Once the module is properly loaded, any valid LilyPond Scheme
expression can be entered at the interactive prompt.

   After the investigation is complete, the interactive guile
interpreter can be exited:

     guile> (quit)

   The compilation of the ‘.ly’ file will then continue.

Using the Guile debugger
------------------------

To set breakpoints and/or enable tracing in Scheme functions, put

     \include "guile-debugger.ly"

   in your input file after any scheme procedures you have defined in
that file.  This will invoke the Guile command-line after having set up
the environment for the debug command-line.  When your input file is
processed, a guile prompt will be displayed.  You may now enter commands
to set up breakpoints and enable tracing by the Guile debugger.

Using breakpoints
-----------------

At the guile prompt, you can set breakpoints with the ‘set-break!’
procedure:

     guile> (set-break! my-scheme-procedure)

   Once you have set the desired breakpoints, you exit the guile repl
frame by typing:

     guile> (quit)

   Then, when one of the scheme routines for which you have set
breakpoints is entered, guile will interrupt execution in a debug frame.
At this point you will have access to Guile debugging commands.  For a
listing of these commands, type:

     debug> help

   Alternatively you may code the breakpoints in your LilyPond source
file using a command such as:

     #(set-break! my-scheme-procedure)

   immediately after the ‘\include’ statement.  In this case the
breakpoint will be set straight after you enter the ‘(quit)’ command at
the guile prompt.

   Embedding breakpoint commands like this is particularly useful if you
want to look at how the Scheme procedures in the ‘.scm’ files supplied
with LilyPond work.  To do this, edit the file in the relevant directory
to add this line near the top:

     (use-modules (scm guile-debugger))

   Now you can set a breakpoint after the procedure you are interested
in has been declared.  For example, if you are working on routines
called by PRINT-BOOK-WITH in ‘lily-library.scm’:

     (define (print-book-with book process-procedure)
       (let* ((paper (ly:parser-lookup '$defaultpaper))
              (layout (ly:parser-lookup '$defaultlayout))
              (outfile-name (get-outfile-name book)))
         (process-procedure book paper layout outfile-name)))

     (define-public (print-book-with-defaults book)
       (print-book-with book ly:book-process))

     (define-public (print-book-with-defaults-as-systems book)
       (print-book-with book ly:book-process-to-systems))

   At this point in the code you could add this to set a breakpoint at
print-book-with:

     (set-break! print-book-with)

Tracing procedure calls and evaluator steps
-------------------------------------------

Two forms of trace are available:

     (set-trace-call! my-scheme-procedure)

   and

     (set-trace-subtree! my-scheme-procedure)

   ‘set-trace-call!’ causes Scheme to log a line to the standard output
to show when the procedure is called and when it exits.

   ‘set-trace-subtree!’ traces every step the Scheme evaluator performs
in evaluating the procedure.


File: lilypond-contributor.info,  Node: Tracing object relationships,  Next: Adding or modifying features,  Prev: Debugging LilyPond,  Up: Programming work

10.8 Tracing object relationships
=================================

Understanding the LilyPond source often boils down to figuring out what
is happening to the Grobs.  Where (and why) are they being created,
modified and destroyed?  Tracing Lily through a debugger in order to
identify these relationships can be time-consuming and tedious.

   In order to simplify this process, a facility has been added to
display the grobs that are created and the properties that are set and
modified.  Although it can be complex to get set up, once set up it
easily provides detailed information about the life of grobs in the form
of a network graph.

   Each of the steps necessary to use the graphviz utility is described
below.

  1. Installing graphviz

     In order to create the graph of the object relationships, it is
     first necessary to install Graphviz.  Graphviz is available for a
     number of different platforms:

          <http://www.graphviz.org/Download..php>

  2. Modifying config.make

     In order for the Graphviz tool to work, config.make must be
     modified.  It is probably a good idea to first save a copy of
     config.make under a different name.

     In order to have the required functionality available, LilyPond
     needs to be compiled with the option ‘-DDEBUG’.  You can achieve
     this by configuring with

          ./configure --enable-checking

  3. Rebuilding LilyPond

     The executable code of LilyPond must be rebuilt from scratch:

          make -C lily clean && make -C lily

  4. Create a graphviz-compatible ‘.ly’ file

     In order to use the graphviz utility, the ‘.ly’ file must include
     ‘ly/graphviz-init.ly’, and should then specify the grobs and
     symbols that should be tracked.  An example of this is found in
     ‘input/regression/graphviz.ly’.

  5. Run LilyPond with output sent to a log file

     The Graphviz data is sent to stderr by LilyPond, so it is necessary
     to redirect stderr to a logfile:

          lilypond graphviz.ly 2> graphviz.log

  6. Edit the logfile

     The logfile has standard LilyPond output, as well as the Graphviz
     output data.  Delete everything from the beginning of the file up
     to but not including the first occurrence of ‘digraph’.

     Also, delete the final LilyPond message about success from the end
     of the file.

  7. Process the logfile with ‘dot’

     The directed graph is created from the log file with the program
     ‘dot’:

          dot -Tpdf graphviz.log > graphviz.pdf

   The pdf file can then be viewed with any pdf viewer.

   When compiled with ‘-DDEBUG’, LilyPond may run slower than normal.
The original configuration can be restored by rerunning ‘./configure’
with ‘--disable-checking’.  Then rebuild LilyPond with

     make -C lily clean && make -C lily


File: lilypond-contributor.info,  Node: Adding or modifying features,  Next: Iterator tutorial,  Prev: Tracing object relationships,  Up: Programming work

10.9 Adding or modifying features
=================================

When a new feature is to be added to LilyPond, it is necessary to ensure
that the feature is properly integrated to maintain its long-term
support.  This section describes the steps necessary for feature
addition and modification.

* Menu:

* Write the code::
* Write regression tests::
* Write convert-ly rule::
* Automatically update documentation::
* Manually update documentation::
* Edit changes.tely::
* Verify successful build::
* Verify regression tests::
* Post patch for comments::
* Push patch::
* Closing the issues::


File: lilypond-contributor.info,  Node: Write the code,  Next: Write regression tests,  Up: Adding or modifying features

10.9.1 Write the code
---------------------

You should probably create a new git branch for writing the code, as
that will separate it from the master branch and allow you to continue
to work on small projects related to master.

   Please be sure to follow the rules for programming style discussed
earlier in this chapter.


File: lilypond-contributor.info,  Node: Write regression tests,  Next: Write convert-ly rule,  Prev: Write the code,  Up: Adding or modifying features

10.9.2 Write regression tests
-----------------------------

In order to demonstrate that the code works properly, you will need to
write one or more regression tests.  These tests are typically ‘.ly’
files that are found in ‘input/regression’.

   Regression tests should be as brief as possible to demonstrate the
functionality of the code.

   Regression tests should generally cover one issue per test.  Several
short, single-issue regression tests are preferred to a single, long,
multiple-issue regression test.

   If the change in the output is small or easy to overlook, use bigger
staff size – 40 or more (up to 100 in extreme cases).  Size 30 means
"pay extra attention to details in general".

   Use existing regression tests as templates to demonstrate the type of
header information that should be included in a regression test.


File: lilypond-contributor.info,  Node: Write convert-ly rule,  Next: Automatically update documentation,  Prev: Write regression tests,  Up: Adding or modifying features

10.9.3 Write convert-ly rule
----------------------------

If the modification changes the input syntax, a convert-ly rule should
be written to automatically update input files from older versions.

   convert-ly rules are found in python/convertrules.py

   If possible, the convert-ly rule should allow automatic updating of
the file.  In some cases, this will not be possible, so the rule will
simply point out to the user that the feature needs manual correction.

Updating version numbers
........................

If a development release occurs between you writing your patch and
having it approved+pushed, you will need to update the version numbers
in your tree.  This can be done with:

     scripts/auxiliar/update-patch-version old.version.number new.version.number

   It will change all files in git, so use with caution and examine the
resulting diff.


File: lilypond-contributor.info,  Node: Automatically update documentation,  Next: Manually update documentation,  Prev: Write convert-ly rule,  Up: Adding or modifying features

10.9.4 Automatically update documentation
-----------------------------------------

‘convert-ly’ should be used to update the documentation, the snippets,
and the regression tests.  This not only makes the necessary syntax
changes, it also tests the ‘convert-ly’ rules.

   The automatic updating is performed by moving to the top-level source
directory, then running:

     scripts/auxiliar/update-with-convert-ly.sh

   If you did an out-of-tree build, pass in the relative path:

     LILYPOND_BUILD_DIR=../build-lilypond/ scripts/auxiliar/update-with-convert-ly.sh


File: lilypond-contributor.info,  Node: Manually update documentation,  Next: Edit changes.tely,  Prev: Automatically update documentation,  Up: Adding or modifying features

10.9.5 Manually update documentation
------------------------------------

Where the convert-ly rule is not able to automatically update the inline
LilyPond code in the documentation (i.e.  if a NOT_SMART rule is used),
the documentation must be manually updated.  The inline snippets that
require changing must be changed in the English version of the docs and
all translated versions.  If the inline code is not changed in the
translated documentation, the old snippets will show up in the English
version of the documentation.

   Where the convert-ly rule is not able to automatically update
snippets in Documentation/snippets/, those snippets must be manually
updated.  Those snippets should be copied to Documentation/snippets/new.
The comments at the top of the snippet describing its automatic
generation should be removed.  All translated texidoc strings should be
removed.  The comment “% begin verbatim” should be removed.  The syntax
of the snippet should then be manually edited.

   Where snippets in Documentation/snippets are made obsolete, the
snippet should be copied to Documentation/snippets/new.  The comments
and texidoc strings should be removed as described above.  Then the body
of the snippet should be changed to:

     \markup {
       This snippet is deprecated as of version X.Y.Z and
       will be removed from the documentation.
     }

where X.Y.Z is the version number for which the convert-ly rule was
written.

   Update the snippet files by running:

     scripts/auxiliar/makelsr.py

   Where the convert-ly rule is not able to automatically update
regression tests, the regression tests in input/regression should be
manually edited.

   Although it is not required, it is helpful if the developer can write
relevant material for inclusion in the Notation Reference.  If the
developer does not feel qualified to write the documentation, a
documentation editor will be able to write it from the regression tests.
In this case the developer should raise a new issue with the
Type=Documentation tag containing a reference to the original issue
number and/or the committish of the pushed patch so that the need for
new documention is not overlooked.

   Any text that is added to or removed from the documentation should be
changed only in the English version.


File: lilypond-contributor.info,  Node: Edit changes.tely,  Next: Verify successful build,  Prev: Manually update documentation,  Up: Adding or modifying features

10.9.6 Edit changes.tely
------------------------

An entry should be added to Documentation/changes.tely to describe the
feature changes to be implemented.  This is especially important for
changes that change input file syntax.

   Hints for changes.tely entries are given at the top of the file.

   New entries in changes.tely go at the top of the file.

   The changes.tely entry should be written to show how the new change
improves LilyPond, if possible.


File: lilypond-contributor.info,  Node: Verify successful build,  Next: Verify regression tests,  Prev: Edit changes.tely,  Up: Adding or modifying features

10.9.7 Verify successful build
------------------------------

When the changes have been made, successful completion must be verified
by doing

     make all
     make doc

   When these commands complete without error, the patch is considered
to function successfully.

   Developers on Windows who are unable to build LilyPond should get
help from a GNU/Linux or OSX developer to do the make tests.


File: lilypond-contributor.info,  Node: Verify regression tests,  Next: Post patch for comments,  Prev: Verify successful build,  Up: Adding or modifying features

10.9.8 Verify regression tests
------------------------------

In order to avoid breaking LilyPond, it is important to verify that the
regression tests succeed, and that no unwanted changes are introduced
into the output.  This process is described in *note Regtest
comparison::.

Typical developer’s edit/compile/test cycle
-------------------------------------------

   • Initial test:

          make [-jX]
          make [-jX CPU_COUNT=X] test-baseline
          make [-jX CPU_COUNT=X] check

   • Edit/compile/test cycle:

          _## edit source files, then..._

          make clean                       _## only if needed (see below)_
          make [-jX]                       _## only if needed (see below)_
          make [-jX CPU_COUNT=X] test-redo _## redo files differing from baseline_
          make [-jX CPU_COUNT=X] check

   • Reset:

          make test-clean

   If you modify any source files that have to be compiled (such as
‘.cc’ or ‘.hh’ files in ‘flower/’ or ‘lily/’), then you must run ‘make’
before ‘make test-redo’, so ‘make’ can compile the modified files and
relink all the object files.  If you only modify files which are
interpreted, like those in the ‘scm/’ and ‘ly/’ directories, then ‘make’
is not needed before ‘make test-redo’.

   Also, if you modify any font definitions in the ‘mf/’ directory then
you must run ‘make clean’ and ‘make’ before running ‘make test-redo’.
This will recompile everything, whether modified or not, and takes a lot
longer.

   Running ‘make check’ will leave an HTML page
‘out/test-results/index.html’.  This page shows all the important
differences that your change introduced, whether in the layout, MIDI,
performance or error reporting.

   You only need to use ‘make test-clean’ to start from scratch, prior
to running ‘make test-baseline’.  To check new modifications, all that
is needed is to repeat ‘make test-redo’ and ‘make test-check’ (not
forgetting ‘make’ if needed).


File: lilypond-contributor.info,  Node: Post patch for comments,  Next: Push patch,  Prev: Verify regression tests,  Up: Adding or modifying features

10.9.9 Post patch for comments
------------------------------

See *note Uploading a patch for review::.


File: lilypond-contributor.info,  Node: Push patch,  Next: Closing the issues,  Prev: Post patch for comments,  Up: Adding or modifying features

10.9.10 Push patch
------------------

Once all the comments have been addressed, the patch can be pushed.

   If the author has push privileges, the author will push the patch.
Otherwise, a developer with push privileges will push the patch.


File: lilypond-contributor.info,  Node: Closing the issues,  Prev: Push patch,  Up: Adding or modifying features

10.9.11 Closing the issues
--------------------------

Once the patch has been pushed, all the relevant issues should be
closed.

   On Rietveld, the author should log in and close the issue either by
using the ‘Edit Issue’ link, or by clicking the circled x icon to the
left of the issue name.

   If the changes were in response to a feature request on the Google
issue tracker for LilyPond, the author should change the status to Fixed
and a tag ‘fixed_x_y_z’ should be added, where the patch was fixed in
version x.y.z.  If the author does not have privileges to change the
status, an email should be sent to bug-lilypond requesting the
BugMeister to change the status.


File: lilypond-contributor.info,  Node: Iterator tutorial,  Next: Engraver tutorial,  Prev: Adding or modifying features,  Up: Programming work

10.10 Iterator tutorial
=======================

TODO – this is a placeholder for a tutorial on iterators

   Iterators are routines written in C++ that process music expressions
and sent the music events to the appropriate engravers and/or
performers.

   See a short example discussing iterators and their duties in *note
Articulations on EventChord::.


File: lilypond-contributor.info,  Node: Engraver tutorial,  Next: Callback tutorial,  Prev: Iterator tutorial,  Up: Programming work

10.11 Engraver tutorial
=======================

Engravers are C++ classes that catch music events and create the
appropriate grobs for display on the page.  Though the majority of
engravers are responsible for the creation of a single grob, in some
cases (e.g.  ‘New_fingering_engraver’), several different grobs may be
created.

   Engravers listen for events and acknowledge grobs.  Events are passed
to the engraver in time-step order during the iteration phase.  Grobs
are made available to the engraver when they are created by other
engravers during the iteration phase.

* Menu:

* Useful methods for information processing::
* Translation process::
* Preventing garbage collection for SCM member variables::
* Listening to music events::
* Acknowledging grobs::
* Engraver declaration/documentation::


File: lilypond-contributor.info,  Node: Useful methods for information processing,  Next: Translation process,  Up: Engraver tutorial

10.11.1 Useful methods for information processing
-------------------------------------------------

An engraver inherits the following public methods from the Translator
base class, which can be used to process listened events and
acknowledged grobs:

   • ‘virtual void initialize ()’
   • ‘void start_translation_timestep ()’
   • ‘void process_music ()’
   • ‘void process_acknowledged ()’
   • ‘void stop_translation_timestep ()’
   • ‘virtual void finalize ()’

   These methods are listed in order of translation time, with
‘initialize ()’ and ‘finalize ()’ bookending the whole process.
‘initialize ()’ can be used for one-time initialization of context
properties before translation starts, whereas ‘finalize ()’ is often
used to tie up loose ends at the end of translation: for example, an
unterminated spanner might be completed automatically or reported with a
warning message.


File: lilypond-contributor.info,  Node: Translation process,  Next: Preventing garbage collection for SCM member variables,  Prev: Useful methods for information processing,  Up: Engraver tutorial

10.11.2 Translation process
---------------------------

At each timestep in the music, translation proceeds by calling the
following methods in turn:

   ‘start_translation_timestep ()’ is called before any user information
enters the translators, i.e., no property operations (\set, \override,
etc.)  or events have been processed yet.

   ‘process_music ()’ and ‘process_acknowledged ()’ are called after all
events in the current time step have been heard, or all grobs in the
current time step have been acknowledged.  The latter tends to be used
exclusively with engravers which only acknowledge grobs, whereas the
former is the default method for main processing within engravers.

   ‘stop_translation_timestep ()’ is called after all user information
has been processed prior to beginning the translation for the next
timestep.


File: lilypond-contributor.info,  Node: Preventing garbage collection for SCM member variables,  Next: Listening to music events,  Prev: Translation process,  Up: Engraver tutorial

10.11.3 Preventing garbage collection for SCM member variables
--------------------------------------------------------------

In certain cases, an engraver might need to ensure private Scheme
variables (with type SCM) do not get swept away by Guile’s garbage
collector: for example, a cache of the previous key signature which must
persist between timesteps.  The method ‘virtual derived_mark () const’
can be used in such cases:

     Engraver_name::derived_mark ()
     {
       scm_gc_mark (private_scm_member_)
     }


File: lilypond-contributor.info,  Node: Listening to music events,  Next: Acknowledging grobs,  Prev: Preventing garbage collection for SCM member variables,  Up: Engraver tutorial

10.11.4 Listening to music events
---------------------------------

External interfaces to the engraver are implemented by protected macros
including one or more of the following:

   • ‘DECLARE_TRANSLATOR_LISTENER (event_name)’
   • ‘IMPLEMENT_TRANSLATOR_LISTENER (Engraver_name, event_name)’

where EVENT_NAME is the type of event required to provide the input the
engraver needs and ENGRAVER_NAME is the name of the engraver.

   Following declaration of a listener, the method is implemented as
follows:

     IMPLEMENT_TRANSLATOR_LISTENER (Engraver_name, event_name)
     void
     Engraver_name::listen_event_name (Stream event *event)
     {
       ...body of listener method...
     }


File: lilypond-contributor.info,  Node: Acknowledging grobs,  Next: Engraver declaration/documentation,  Prev: Listening to music events,  Up: Engraver tutorial

10.11.5 Acknowledging grobs
---------------------------

Some engravers also need information from grobs as they are created and
as they terminate.  The mechanism and methods to obtain this information
are set up by the macros:

   • ‘DECLARE_ACKNOWLEDGER (grob_interface)’
   • ‘DECLARE_END_ACKNOWLEDGER (grob_interface)’

   where GROB_INTERFACE is an interface supported by the grob(s) which
should be acknowledged.  For example, the following code would declare
acknowledgers for a ‘NoteHead’ grob (via the ‘note-head-interface’) and
any grobs which support the ‘side-position-interface’:

     DECLARE_ACKNOWLEDGER (note_head)
     DECLARE_ACKNOWLEDGER (side_position)

   The ‘DECLARE_END_ACKNOWLEDGER ()’ macro sets up a spanner-specific
acknowledger which will be called whenever a spanner ends.

   Following declaration of an acknowledger, the method is coded as
follows:

     void
     Engraver_name::acknowledge_interface_name (Grob_info info)
     {
       ...body of acknowledger method...
     }

   Acknowledge functions are called in the order engravers are
‘\consist’-ed (the only exception is if you set ‘must-be-last’ to ‘#t’).

   If useful things are to be done to the acknowledged grobs, this
should be deferred until all the acknowledging has finished, i.e., store
the acknowledged grobs and process the information in a
‘process-acknowledged ()’ or ‘stop-translation-timestep ()’ function.


File: lilypond-contributor.info,  Node: Engraver declaration/documentation,  Prev: Acknowledging grobs,  Up: Engraver tutorial

10.11.6 Engraver declaration/documentation
------------------------------------------

An engraver must have a public macro

   • ‘TRANSLATOR_DECLARATIONS (Engraver_name)’

where ‘Engraver_name’ is the name of the engraver.  This defines the
common variables and methods used by every engraver.

   At the end of the engraver file, one or both of the following macros
are generally called to document the engraver in the Internals
Reference:

   • ‘ADD_ACKNOWLEDGER (Engraver_name, grob_interface)’
   • ‘ADD_TRANSLATOR (Engraver_name, Engraver_doc, Engraver_creates,
     Engraver_reads, Engraver_writes)’

where ‘Engraver_name’ is the name of the engraver, ‘grob_interface’ is
the name of the interface that will be acknowledged, ‘Engraver_doc’ is a
docstring for the engraver, ‘Engraver_creates’ is the set of grobs
created by the engraver, ‘Engraver_reads’ is the set of properties read
by the engraver, and ‘Engraver_writes’ is the set of properties written
by the engraver.

   The ‘ADD_ACKNOWLEDGER’ and ‘ADD_TRANSLATOR’ macros use a non-standard
indentation system.  Each interface, grob, read property, and write
property is on its own line, and the closing parenthesis and semicolon
for the macro all occupy a separate line beneath the final interface or
write property.  See existing engraver files for more information.


File: lilypond-contributor.info,  Node: Callback tutorial,  Next: Understanding pure properties,  Prev: Engraver tutorial,  Up: Programming work

10.12 Callback tutorial
=======================

TODO – This is a placeholder for a tutorial on callback functions.


File: lilypond-contributor.info,  Node: Understanding pure properties,  Next: LilyPond scoping,  Prev: Callback tutorial,  Up: Programming work

10.13 Understanding pure properties
===================================

* Menu:

* Purity in LilyPond::
* Writing a pure function::
* How purity is defined and stored::
* Where purity is used::
* Case studies::
* Debugging tips::

Pure properties are some of the most difficult properties to understand
in LilyPond but, once understood, it is much easier to work with
horizontal spacing.  This document provides an overview of what it means
for something to be ‘pure’ in LilyPond, what this purity guarantees, and
where pure properties are stored and used.  It finishes by discussing a
few case studies for the pure programmer to save you some time and to
prevent you some major headaches.


File: lilypond-contributor.info,  Node: Purity in LilyPond,  Next: Writing a pure function,  Up: Understanding pure properties

10.13.1 Purity in LilyPond
--------------------------

Pure properties in LilyPond are properties that do not have any ‘side
effects’.  That is, looking up a pure property should never result in
calls to the following functions:
   • ‘set_property’
   • ‘set_object’
   • ‘suicide’
   This means that, if the property is calculated via a callback, this
callback must not only avoid the functions above but make sure that any
functions it calls also avoid the functions above.  Also, to date in
LilyPond, a pure function will always return the same value before line
breaking (or, more precisely, before any version of ‘break_into_pieces’
is called).  This convention makes it possible to cache pure functions
and be more flexible about the order in which functions are called.  For
example; Stem #’length has a pure property that will _never_ trigger one
of the functions listed above and will _always_ return the same value
before line breaking, independent of where it is called.  Sometimes,
this will be the actual length of the Stem.  But sometimes it will not.
For example; stem that links up with a beam will need its end set to the
Y position of the beam at the stem’s X position.  However, the beam’s Y
positions can only be known after the score is broken up in to several
systems (a beam that has a shallow slope on a compressed line of music,
for example, may have a steeper one on an uncompressed line).  Thus, we
only call the impure version of the properties once we are _absolutely
certain_ that all of the parameters needed to calculate their final
value have been calculated.  The pure version provides a useful estimate
of what this Stem length (or any property) will be, and the art of
creating good pure properties is trying to get the estimation as close
to the actual value as possible.

   Of course, like Gregory Peck and Tintin, some Grobs will have
properties that will always be pure.  For example, the height of a
note-head in not-crazy music will never depend on line breaking or other
parameters decided late in the typesetting process.  Inversely, in rare
cases, certain properties are difficult to estimate with pure values.
For example, the height of a Hairpin at a certain cross-section of its
horizontal span is difficult to know without knowing the horizontal
distance that the hairpin spans, and LilyPond provides an
over-estimation by reporting the pure height as the entire height of the
Hairpin.

   Purity, like for those living in a convent, is more like a contract
than an _a priori_.  If you write a pure-function, you are promising the
user (and the developer who may have to clean up after you) that your
function will not be dependent on factors that change at different
stages of the compilation process (compilation of a score, not of
LilyPond).

   One last oddity is that purity, in LilyPond, is currently limited
exclusively to things that have to do with Y-extent and positioning.
There is no concept of ‘pure X’ as, by design, X is always the
independent variable (i.e.  from column X1 to column X2, what will be
the Y height of a given grob).  Furthermore, there is no purity for
properties like color, text, and other things for which a meaningful
notion of estimation is either not necessary or has not yet been found.
For example, even if a color were susceptible to change at different
points of the compilation process, it is not clear what a pure estimate
of this color would be or how this pure color could be used.  Thus, in
this document and in the source, you will see purity discussed almost
interchangeably with Y-axis positioning issues.


File: lilypond-contributor.info,  Node: Writing a pure function,  Next: How purity is defined and stored,  Prev: Purity in LilyPond,  Up: Understanding pure properties

10.13.2 Writing a pure function
-------------------------------

Pure functions take, at a minimum, three arguments: the GROB, the
starting column at which the function is being evaluated (hereafter
referred to as START), and the end column at which the grob is being
evaluated (hereafter referred to as END).  For items, START and END must
be provided (meaning they are not optional) but will not have a
meaningful impact on the result, as items only occupy one column and
will thus yield a value or not (if they are not in the range from START
to END).  For spanners however, START and END are important, as we may
can get a better pure estimation of a slice of the spanner than
considering it on the whole.  This is useful during line breaking, for
example, when we want to estimate the Y-extent of a spanner broken at
given starting and ending columns.


File: lilypond-contributor.info,  Node: How purity is defined and stored,  Next: Where purity is used,  Prev: Writing a pure function,  Up: Understanding pure properties

10.13.3 How purity is defined and stored
----------------------------------------

Purity is defined in LilyPond with the creation of an unpure-pure
container (unpure is not a word, but hey, neither was LilyPond until the
90s).  For example:

     #(define (foo grob)
       '(-1 . 1))

     #(define (bar grob start end)
       '(-2 . 2))

     \override Stem #'length = #(ly:make-unpure-pure-container foo bar)

   Note that items can only ever have two pure heights: their actual
pure height if they are between ‘start’ and ‘end’, or an empty interval
if they are not.  Thus, their pure property is cached to speed LilyPond
up.  Pure heights for spanners are generally not cached as they change
depending on the start and end values.  They are only cached in certain
particular cases.  Before writing a lot of caching code, make sure that
it is a value that will be reused a lot.


File: lilypond-contributor.info,  Node: Where purity is used,  Next: Case studies,  Prev: How purity is defined and stored,  Up: Understanding pure properties

10.13.4 Where purity is used
----------------------------

Pure Y values must be used in any functions that are called before line
breaking.  Examples of this can be seen in ‘Separation_items::boxes’ to
construct horizontal skylines and in ‘Note_spacing::stem_dir_correction’
to correct for optical illusions in spacing.  Pure properties are also
used in the calculation of other pure properties.  For example, the
‘Axis_group_interface’ has pure functions that look up other pure
functions.

   Purity is also implicitly used in any functions that should only ever
return pure values.  For example, extra-spacing-height is only ever used
before line-breaking and thus should never use values that would only be
available after line breaking.  In this case, there is no need to create
callbacks with pure equivalents because these functions, by design, need
to be pure.

   To know if a property will be called before and/or after
line-breaking is sometimes tricky and can, like all things in coding, be
found by using a debugger and/or adding PRINTF statements to see where
they are called in various circumstances.


File: lilypond-contributor.info,  Node: Case studies,  Next: Debugging tips,  Prev: Where purity is used,  Up: Understanding pure properties

10.13.5 Case studies
--------------------

In each of these case studies, we expose a problem in pure properties, a
solution, and the pros and cons of this solution.

Time signatures
---------------

A time signature needs to prevent accidentals from passing over or under
it, but its extent does not necessarily extend to the Y-position of
accidentals.  LilyPond’s horizontal spacing sometimes makes a line of
music compact and, when doing so, allows certain columns to pass over
each other if they will not collide.  This type of passing over is not
desirable with time signatures in traditional engraving.  But how do we
know if this passing over will happen before line breaking, as we are
not sure what the X positions will be?  We need a pure estimation of how
much extra spacing height the time signatures would need to prevent this
form of passing over without making this height so large as to
overly-distort the Y-extent of an system, which could result in a very
‘loose’ looking score with lots of horizontal space between columns.
So, to approximate this extra spacing height, we use the Y-extent of a
time signature’s next-door-neighbor grobs via the pure-from-neighbor
interface.

   • pros: By extending the extra spacing height of a time signature to
     that of its next-door-neighbors, we make sure that grobs to the
     right of it that could pass above or below it do not.

   • cons: This over-estimation of the vertical height could prevent
     snug vertical spacing of systems, as the system will be registered
     as being taller at the point of the time signature than it actually
     is.  This approach can be used for clefs and bar lines as well.

Stems
-----

As described above, Stems need pure height approximations when they are
beamed, as we do not know the beam positions before line breaking.  To
estimate this pure height, we take all the stems in a beam and find
their pure heights as if they were not beamed.  Then, we find the union
of all these pure heights and take the intersection between this
interval (which is large) and an interval going from the note-head of a
stem to infinity in the direction of the stem so that the interval stops
at the note head.

   • pros: This is guaranteed to be at least as long as the beamed stem,
     as a beamed stem will never go over the ideal length of the
     extremal beam of a stem.

   • cons: Certain stems will be estimated as being too long, which
     leads to the same problem of too-much-vertical-height as described
     above.


File: lilypond-contributor.info,  Node: Debugging tips,  Prev: Case studies,  Up: Understanding pure properties

10.13.6 Debugging tips
----------------------

A few questions to ask yourself when working with pure properties:

   • Is the property really pure?  Are you sure that its value could not
     be changed later in the compiling process due to other changes?

   • Can the property be made to correspond even more exactly with the
     eventual impure property?

   • For a spanner, is the pure property changing correctly depending on
     the starting and ending points of the spanner?

   • For an Item, will the item’s pure height need to act in horizontal
     spacing but not in vertical spacing?  If so, use
     extra-spacing-height instead of pure height.


File: lilypond-contributor.info,  Node: LilyPond scoping,  Next: Scheme->C interface,  Prev: Understanding pure properties,  Up: Programming work

10.14 LilyPond scoping
======================

The LilyPond language has a concept of scoping, i.e.  you can do:

     foo = 1

     #(begin
        (display (+ foo 2)))

with ‘\paper’, ‘\midi’ and ‘\header’ being nested scope inside the ‘.ly’
file-level scope.  ‘foo = 1’ is translated in to a scheme variable
definition.

   This implemented using modules, with each scope being an anonymous
module that imports its enclosing scope’s module.

   LilyPond’s core, loaded from ‘.scm’ files, is usually placed in the
‘lily’ module, outside the ‘.ly’ level.  In the case of

     lilypond a.ly b.ly

we want to reuse the built-in definitions, without changes effected in
user-level ‘a.ly’ leaking into the processing of ‘b.ly’.

   The user-accessible definition commands have to take care to avoid
memory leaks that could occur when running multiple files.  All
information belonging to user-defined commands and markups is stored in
a manner that allows it to be garbage-collected when the module is
dispersed, either by being stored module-locally, or in weak hash
tables.


File: lilypond-contributor.info,  Node: Scheme->C interface,  Next: LilyPond miscellany,  Prev: LilyPond scoping,  Up: Programming work

10.15 Scheme->C interface
=========================

Most of the C functions interfacing with Guile/Scheme used in LilyPond
are described in the API Reference of the GUILE Reference Manual
(http://www.gnu.org/software/guile/manual/html_node/index.html).

   The remaining functions are defined in ‘lily/lily-guile.cc’,
‘lily/include/lily-guile.hh’ and ‘lily/include/lily-guile-macros.hh’.
Although their names are meaningful there’s a few things you should know
about them.

* Menu:

* Comparison::
* Conversion::


File: lilypond-contributor.info,  Node: Comparison,  Next: Conversion,  Up: Scheme->C interface

10.15.1 Comparison
------------------

This is the trickiest part of the interface.

   Mixing Scheme values with C comparison operators won’t produce any
crash or warning when compiling but must be avoided:

     scm_string_p (scm_value) == SCM_BOOL_T

   As we can read in the reference, ‘scm_string_p’ returns a Scheme
value: either ‘#t’ or ‘#f’ which are written ‘SCM_BOOL_T’ and
‘SCM_BOOL_F’ in C. This will work, but it is not following to the API
guidelines.  For further information, read this discussion:

     <http://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00646.html>

   There are functions in the Guile reference that returns C values
instead of Scheme values.  In our example, a function called
‘scm_is_string’ (described after ‘string?’ and ‘scm_string_p’) returns
the C value 0 or 1.

   So the best solution was simply:

     scm_is_string (scm_value)

   There a simple solution for almost every common comparison.  Another
example: we want to know if a Scheme value is a non-empty list.  Instead
of:

     (scm_is_true (scm_list_p (scm_value)) && scm_value != SCM_EOL)

   one can usually use:

     scm_is_pair (scm_value)

   since a list of at least one member is a pair.  This test is cheap;
‘scm_list_p’ is actually quite more complex since it makes sure that its
argument is neither a ‘dotted list’ where the last pair has a non-null
‘cdr’, nor a circular list.  There are few situations where the
complexity of those tests make sense.

   Unfortunately, there is not a ‘scm_is_[something]’ function for
everything.  That’s one of the reasons why LilyPond has its own Scheme
interface.  As a rule of thumb, tests that are cheap enough to be worth
inlining tend to have such a C interface.  So there is ‘scm_is_pair’ but
not ‘scm_is_list’, and ‘scm_is_eq’ but not ‘scm_is_equal’.

General definitions
-------------------

bool to_boolean (SCM b)
.......................

Return ‘true’ if B is ‘SCM_BOOL_T’, else return ‘false’.

   This should be used instead of ‘scm_is_true’ and ‘scm_is_false’ for
properties since in LilyPond, unset properties are read as an empty
list, and by convention unset Boolean properties default to false.
Since both ‘scm_is_true’ and ‘scm_is_false’ only compare with ‘##f’ in
line with what Scheme’s conditionals do, they are not really useful for
checking the state of a Boolean property.

bool ly_is_[something] (args)
.............................

Behave the same as scm_is_[something] would do if it existed.

bool is_[type] (SCM s)
......................

Test whether the type of S is [type].  [type] is a LilyPond-only set of
values (direction, axis...).  More often than not, the code checks
LilyPond specific C++-implemented types using

[Type *] unsmob<Type> (SCM s)
.............................

This tries converting a Scheme object to a pointer of the desired kind.
If the Scheme object is of the wrong type, a pointer value of ‘0’ is
returned, making this suitable for a Boolean test.


File: lilypond-contributor.info,  Node: Conversion,  Prev: Comparison,  Up: Scheme->C interface

10.15.2 Conversion
------------------

General definitions
-------------------

bool to_boolean (SCM b)
.......................

Return ‘true’ if B is ‘SCM_BOOL_T’, else return ‘false’.

   This should be used instead of ‘scm_is_true’ and ‘scm_is_false’ for
properties since empty lists are sometimes used to unset them.

[C type] ly_scm2[C type] (SCM s)
................................

Behave the same as scm_to_[C type] would do if it existed.

[C type] robust_scm2[C type] (SCM s, [C type] d)
................................................

Behave the same as scm_to_[C type] would do if it existed.  Return D if
type verification fails.


File: lilypond-contributor.info,  Node: LilyPond miscellany,  Prev: Scheme->C interface,  Up: Programming work

10.16 LilyPond miscellany
=========================

This is a place to dump information that may be of use to developers but
doesn’t yet have a proper home.  Ideally, the length of this section
would become zero as items are moved to other homes.

* Menu:

* Spacing algorithms::
* Info from Han-Wen email::
* Music functions and GUILE debugging::
* Articulations on EventChord::


File: lilypond-contributor.info,  Node: Spacing algorithms,  Next: Info from Han-Wen email,  Up: LilyPond miscellany

10.16.1 Spacing algorithms
--------------------------

Here is information from an email exchange about spacing algorithms.

   On Thu, 2010-02-04 at 15:33 -0500, Boris Shingarov wrote: I am
experimenting with some modifications to the line breaking code, and I
am stuck trying to understand how some of it works.  So far my
understanding is that Simple_spacer operates on a vector of Grobs, and
it is a well-known Constrained-QP problem (rods = constraints, springs =
quadratic function to minimize).  What I don’t understand is, if the
spacer operates at the level of Grobs, which are built at an earlier
stage in the pipeline, how are the changes necessitated by differences
in line breaking, taken into account?  in other words, if I take the
last measure of a line and place it on the next line, it is not just a
matter of literally moving that graphic to where the start of the next
line is, but I also need to draw a clef, key signature, and possibly
other fundamental things – but at that stage in the rendering pipeline,
is it not too late??

   Joe Neeman answered:

   We create lots of extra grobs (eg.  a BarNumber at every bar line)
but most of them are not drawn.  See the break-visibility property in
item-interface.

   Here is another e-mail exchange.  Janek Warchoł asked for a starting
point to fixing 1301 (change clef colliding with notes).  Neil Puttock
replied:

   The clef is on a loose column (it floats before the head), so the
first place I’d look would be lily/spacing-loose-columns.cc (and
possibly lily/spacing-determine-loose-columns.cc).  I’d guess the
problem is the way loose columns are spaced between other columns: in
this snippet, the columns for the quaver and tuplet minim are so close
together that the clef’s column gets dumped on top of the quaver (since
it’s loose, it doesn’t influence the spacing).


File: lilypond-contributor.info,  Node: Info from Han-Wen email,  Next: Music functions and GUILE debugging,  Prev: Spacing algorithms,  Up: LilyPond miscellany

10.16.2 Info from Han-Wen email
-------------------------------

In 2004, Douglas Linhardt decided to try starting a document that would
explain LilyPond architecture and design principles.  The material below
is extracted from that email, which can be found at
<http://thread.gmane.org/gmane.comp.gnu.lilypond.devel/2992>.  The
headings reflect questions from Doug or comments from Han-Wen; the body
text are Han-Wen’s answers.

Figuring out how things work.
-----------------------------

I must admit that when I want to know how a program works, I use grep
and emacs and dive into the source code.  The comments and the code
itself are usually more revealing than technical documents.

What’s a grob, and how is one used?
-----------------------------------

Graphical object - they are created from within engravers, either as
Spanners (derived class) -slurs, beams- or Items (also a derived class)
-notes, clefs, etc.

   There are two other derived classes System (derived from Spanner,
containing a "line of music") and Paper_column (derived from Item, it
contains all items that happen at the same moment).  They are separate
classes because they play a special role in the linebreaking process.

What’s a smob, and how is one used?
-----------------------------------

A C(++) object that is encapsulated so it can be used as a Scheme
object.  See GUILE info, "19.3 Defining New Types (Smobs)"

When is each C++ class constructed and used?
--------------------------------------------

   • Music classes

     In the parser.yy see the macro calls MAKE_MUSIC_BY_NAME().

   • Contexts

     Constructed during "interpreting" phase.

   • Engravers

     Executive branch of Contexts, plugins that create grobs, usually
     one engraver per grob type.  Created together with context.

   • Layout Objects

     = grobs

   • Grob Interfaces

     These are not C++ classes per se.  The idea of a Grob interface
     hasn’t crystallized well.  ATM, an interface is a symbol, with a
     bunch of grob properties.  They are not objects that are created or
     destroyed.

   • Iterators

     Objects that walk through different music classes, and deliver
     events in a synchronized way, so that notes that play together are
     processed at the same moment and (as a result) end up on the same
     horizontal position.

     Created during interpreting phase.

     BTW, the entry point for interpreting is ly:run-translator
     (ly_run_translator on the C++ side)

Can you get to Context properties from a Music object?
------------------------------------------------------

You can create music object with a Scheme function that reads context
properties (the \applycontext syntax).  However, that function is
executed during Interpreting, so you can not really get Context
properties from Music objects, since music objects are not directly
connected to Contexts.  That connection is made by the Music_iterators

Can you get to Music properties from a Context object?
------------------------------------------------------

Yes, if you are given the music object within a Context object.
Normally, the music objects enter Contexts in synchronized fashion, and
the synchronization is done by Music_iterators.

What is the relationship between C++ classes and Scheme objects?
----------------------------------------------------------------

Smobs are C++ objects in Scheme.  Scheme objects (lists, functions) are
manipulated from C++ as well using the GUILE C function interface
(prefix: scm_)

How do Scheme procedures get called from C++ functions?
-------------------------------------------------------

scm_call_*, where * is an integer from 0 to 4.  Also scm_c_eval_string
(), scm_eval ()

How do C++ functions get called from Scheme procedures?
-------------------------------------------------------

Export a C++ function to Scheme with LY_DEFINE.

What is the flow of control in the program?
-------------------------------------------

Good question.  Things used to be clear-cut, but we have Scheme and
SMOBs now, which means that interactions do not follow a very rigid
format anymore.  See below for an overview, though.

Does the parser make Scheme procedure calls or C++ function calls?
------------------------------------------------------------------

Both.  And the Scheme calls can call C++ and vice versa.  It’s nested,
with the SCM datatype as lubrication between the interactions

   (I think the word "lubrication" describes the process better than the
traditional word "glue")

How do the front-end and back-end get started?
----------------------------------------------

Front-end: a file is parsed, the rest follows from that.  Specifically,

   Parsing leads to a Music + Music_output_def object (see parser.yy,
definition of toplevel_expression )

   A Music + Music_output_def object leads to a Global_context object
(see ly_run_translator ())

   During interpreting, Global_context + Music leads to a bunch of
Contexts (see Global_translator::run_iterator_on_me ()).

   After interpreting, Global_context contains a Score_context (which
contains staves, lyrics etc.)  as a child.  Score_context::get_output ()
spews a Music_output object (either a Paper_score object for notation or
Performance object for MIDI).

   The Music_output object is the entry point for the backend (see
ly_render_output ()).

   The main steps of the backend itself are in

   • ‘paper-score.cc’ , Paper_score::process_

   • ‘system.cc’ , System::get_lines()

   • The step, where things go from grobs to output, is in
     System::get_line(): each grob delivers a Stencil (a Device
     independent output description), which is interpreted by our
     outputting backends (‘scm/output-tex.scm’ and ‘scm/output-ps.scm’)
     to produce TeX and PS.

   Interactions between grobs and putting things into .tex and .ps files
have gotten a little more complex lately.  Jan has implemented
page-breaking, so now the backend also involves Paper_book, Paper_lines
and other things.  This area is still heavily in flux, and perhaps not
something you should want to look at.

How do the front-end and back-end communicate?
----------------------------------------------

There is no communication from backend to front-end.  From front-end to
backend is simply the program flow: music + definitions gives contexts,
contexts yield output, after processing, output is written to disk.

Where is the functionality associated with KEYWORDs?
----------------------------------------------------

See ‘my-lily-lexer.cc’ (keywords, there aren’t that many) and ‘ly/*.ly’
(most of the other backslashed ‘/\words’ are identifiers)

What Contexts/Properties/Music/etc. are available when they are processed?
--------------------------------------------------------------------------

What do you mean exactly with this question?

   See ‘ly/engraver-init.ly’ for contexts, see ‘scm/define-*.scm’ for
other objects.

How do you decide if something is a Music, Context, or Grob property?
---------------------------------------------------------------------

Why is part-combine-status a Music property when it seems (IMO) to be
related to the Staff context?

   The Music_iterators and Context communicate through two channels

   Music_iterators can set and read context properties, idem for
Engravers and Contexts

   Music_iterators can send "synthetic" music events (which aren’t in
the input) to a context.  These are caught by Engravers.  This is mostly
a one way communication channel.

   part-combine-status is part of such a synthetic event, used by
Part_combine_iterator to communicate with Part_combine_engraver.

Deciding between context and music properties
---------------------------------------------

I’m adding a property to affect how \autochange works.  It seems to me
that it should be a context property, but the Scheme autochange
procedure has a Music argument.  Does this mean I should use a Music
property?

   \autochange is one of these extra strange beasts: it requires
look-ahead to decide when to change staves.  This is achieved by running
the interpreting step twice (see ‘scm/part-combiner.scm’ , at the
bottom), and storing the result of the first step (where to switch
staves) in a Music property.  Since you want to influence that
where-to-switch list, your must affect the code in make-autochange-music
(‘scm/part-combiner.scm’).  That code is called directly from the parser
and there are no official "parsing properties" yet, so there is no
generic way to tune \autochange.  We would have to invent something new
for this, or add a separate argument,

         \autochange #around-central-C ..music..

where around-central-C is some function that is called from
make-autochange-music.

More on context and music properties
------------------------------------

From Neil Puttock, in response to a question about transposition:

   Context properties (using \set & \unset) are tied to engravers: they
provide information relevant to the generation of graphical objects.

   Since transposition occurs at the music interpretation stage, it has
no direct connection with engravers: the pitch of a note is fixed before
a notehead is created.  Consider the following minimal snippet:

     { c' }

   This generates (simplified) a NoteEvent, with its pitch and duration
as event properties,

     (make-music
       'NoteEvent
       'duration
       (ly:make-duration 2 0 1 1)
       'pitch
       (ly:make-pitch 0 0 0)

   which the Note_heads_engraver hears.  It passes this information on
to the NoteHead grob it creates from the event, so the head’s correct
position and duration-log can be determined once it’s ready for
printing.

   If we transpose the snippet,

     \transpose c d { c' }

   the pitch is changed before it reaches the engraver (in fact, it
happens just after the parsing stage with the creation of a
TransposedMusic music object):

     (make-music
      'NoteEvent
      'duration
      (ly:make-duration 2 0 1 1)
      'pitch
      (ly:make-pitch 0 1 0)

   You can see an example of a music property relevant to transposition:
untransposable.

     \transpose c d { c'2 \withMusicProperty #'untransposable ##t c' }

   -> the second c’ remains untransposed.

   Take a look at ‘lily/music.cc’ to see where the transposition takes
place.

How do I tell about the execution environment?
----------------------------------------------

I get lost figuring out what environment the code I’m looking at is in
when it executes.  I found both the C++ and Scheme autochange code.
Then I was trying to figure out where the code got called from.  I
finally figured out that the Scheme procedure was called before the C++
iterator code, but it took me a while to figure that out, and I still
didn’t know who did the calling in the first place.  I only know a
little bit about Flex and Bison, so reading those files helped only a
little bit.

   _Han-Wen:_ GDB can be of help here.  Set a breakpoint in C++, and
run.  When you hit the breakpoint, do a backtrace.  You can inspect
Scheme objects along the way by doing

     p ly_display_scm(obj)

   this will display OBJ through GUILE.


File: lilypond-contributor.info,  Node: Music functions and GUILE debugging,  Next: Articulations on EventChord,  Prev: Info from Han-Wen email,  Up: LilyPond miscellany

10.16.3 Music functions and GUILE debugging
-------------------------------------------

Ian Hulin was trying to do some debugging in music functions, and came
up with the following question (edited and adapted to current versions):

   HI all, I’m working on the Guile Debugger Stuff, and would like to
try debugging a music function definition such as:

     conditionalMark =
     #(define-music-function () ()
       #{ \tag instrumental-part {\mark \default} #} )

   It appears ‘conditionalMark’ does not get set up as an equivalent of
a Scheme

     (define conditionalMark = define-music-function () () ...

although something gets defined because Scheme apparently recognizes

     #(set-break! conditionalMark)

later on in the file without signalling any Guile errors.

   However the breakpoint trap is never encountered as
‘define-music-function’ passed things on to ‘ly:make-music-function’,
which is really C++ code ‘ly_make_music_function’, so Guile never finds
out about the breakpoint.

   The answer in the mailing list archive at that time was less than
helpful.  The question already misidentifies the purpose of
‘ly:make-music-function’ which is only called once at the time of
_defining_ ‘conditionalMark’ but is not involved in its later
_execution_.

   Here is the real deal:

   A music function is not the same as a GUILE function.  It boxes both
a proper Scheme function (with argument list and body from the
‘define-music-function’ definition) along with a call signature
representing the _types_ of both function and arguments.

   Those components can be reextracted using ‘ly:music-function-extract’
and ‘ly:music-function-signature’, respectively.

   When LilyPond’s parser encounters a music function call in its input,
it reads, interprets, and verifies the arguments individually according
to the call signature and _then_ calls the proper Scheme function.

   While it is actually possible these days to call a music function _as
if_ it were a Scheme function itself, this pseudo-call uses its own
wrapping code matching the argument list _as a whole_ to the call
signature, substituting omitted optional arguments with defaults and
verifying the result type.

   So putting a breakpoint on the music function itself will still not
help with debugging uses of the function using LilyPond syntax.

   However, either calling mechanism ultimately calls the proper Scheme
function stored as part of the music function, and that is where the
breakpoint belongs:

     #(set-break! (ly:music-function-extract conditionalMark))

   will work for either calling mechanism.


File: lilypond-contributor.info,  Node: Articulations on EventChord,  Prev: Music functions and GUILE debugging,  Up: LilyPond miscellany

10.16.4 Articulations on EventChord
-----------------------------------

From David Kastrup’s email
<http://lists.gnu.org/archive/html/lilypond-devel/2012-02/msg00189.html>:

   LilyPond’s typesetting does not act on music expressions and music
events.  It acts exclusively on stream events.  It is the act of
iterators to convert a music expression into a sequence of stream events
played in time order.

   The EventChord iterator is pretty simple: it just takes its
"elements" field when its time comes up, turns every member into a
StreamEvent and plays that through the typesetting process.  The parser
currently appends all postevents belonging to a chord at the end of
"elements", and thus they get played at the same point of time as the
elements of the chord.  Due to this design, you can add per-chord
articulations or postevents or even assemble chords with a common stem
by using parallel music providing additional notes/events: the
typesetter does not see a chord structure or postevents belonging to a
chord, it just sees a number of events occuring at the same point of
time in a Voice context.

   So all one needs to do is let the EventChord iterator play
articulations after elements, and then adding to articulations in
EventChord is equivalent to adding them to elements (except in cases
where the order of events matters).


File: lilypond-contributor.info,  Node: Release work,  Next: Build system notes,  Prev: Programming work,  Up: Top

11 Release work
***************

* Menu:

* Development phases::
* Minor release checklist::
* Major release checklist::
* Release extra notes::
* Notes on builds with GUB::


File: lilypond-contributor.info,  Node: Development phases,  Next: Minor release checklist,  Up: Release work

11.1 Development phases
=======================

There are 2 states of development on ‘master’:

  1. *Normal development*: Any commits are fine.

  2. *Build-frozen*: Do not require any additional or updated libraries
     or make non-trivial changes to the build process.  Any such patch
     (or branch) may not be merged with master during this period.

     This should occur approximately 1 month before any alpha version of
     the next stable release, and ends when the next unstable branch
     begins.

   After announcing a beta release, branch ‘stable/2.x’.  There are 2
states of development for this branch:

  1. *Normal maintenance*: The following patches *MAY NOT* be merged
     with this branch:

        • Any change to the input syntax.  If a file compiled with a
          previous ‘2.x’ (beta) version, then it must compile in the new
          version.

          Exception: any bugfix to a Critical issue.

        • New features with new syntax _may be committed_, although once
          committed that syntax cannot change during the remainder of
          the stable phase.

        • Any change to the build dependencies (including programming
          libraries, documentation process programs, or python modules
          used in the buildscripts).  If a contributor could compile a
          previous lilypond ‘2.x’, then he must be able to compile the
          new version.

  2. *Release prep*: Only translation updates and important bugfixes are
     allowed.


File: lilypond-contributor.info,  Node: Minor release checklist,  Next: Major release checklist,  Prev: Development phases,  Up: Release work

11.2 Minor release checklist
============================

A “minor release” means an update of ‘y’ in ‘2.x.y’.

Pre-release
-----------

  1. Don’t forget to prepare the GUB build machine by deleting and
     moving unneeded files: see “Subsequent builds” in *note Notes on
     builds with GUB::.

  2. Using any system with git pull access (not necessarily the GUB
     build machine), use the commands below to do the following:

        • switch to the release branch

        • update the release branch from origin/master

        • update the translation files

        • create the release announcement

        • update the build versions.

             • VERSION_DEVEL = the current development version (previous
               VERSION_DEVEL + 0.01)

             • VERSION_STABLE = the current stable version (probably no
               change here)

        • update the “Welcome to LilyPond” version numbers to the
          version about to be released

     This requires a system which has the release/unstable branch.  If
     you get a warning saying you are in ‘detached HEAD’ state, then you
     should create a release/unstable branch with ‘git checkout
     release/unstable’.

     Check the environment variables are set as in *note Environment
     variables::.

     You need to ensure you have a clean index and work tree.  If the
     checkout displays modified files, you might want to run ‘git reset
     --hard’ before continuing.

          git fetch
          git checkout release/unstable
          git merge origin/master
          make -C $LILYPOND_BUILD_DIR po-replace
          mv $LILYPOND_BUILD_DIR/po/lilypond.pot po/
          gedit Documentation/web/news-front.itexi Documentation/web/news.itexi
          gedit VERSION
          gedit ly/Wel*.ly

  3. Commit, push, switch back to master (or wherever else):

          git commit -m "Release: bump VERSION_DEVEL." VERSION
          git commit -m "PO: update template." po/lilypond.pot
          git commit -m "Release: update news." Documentation/web/
          git commit -m "Release: bump Welcome versions." ly/Wel*.ly
          git push origin HEAD:release/unstable
          git checkout master

  4. If you do not have the previous release test-output tarball,
     download it and put it in ‘regtests/’

  5. Prepare GUB environment by running:

          ### my-gub.sh
          # special terminal, and default PATH environment.
          # import these special environment vars:
          #   HOME, HTTP_PROXY, TERM
          env -i \
            HOME=$HOME \
            HTTP_PROXY=$HTTP_PROXY \
            bash --rcfile my-bashrc

          ### my-bashrc
          export PS1="\[\e[1;33mGUB-ENV \w\]$ \[\e[0m\]"
          export PATH=$PATH
          export TERM=xterm

  6. Build release on GUB by running:

          make LILYPOND_BRANCH=release/unstable lilypond

     or something like:

          make LILYPOND_BRANCH=stable/2.16 lilypond

  7. Check the regtest comparison in ‘uploads/webtest/’ for any
     unintentional breakage.  More info in *note Precompiled regression
     tests::.

  8. If any work was done on GUB since the last release, upload binaries
     to a temporary location, ask for feedback, and wait a day or two in
     case there’s any major problems.

               Note: Always do this for a stable release.

Actual release
--------------

  1. If you’re not the right user on the webserver, remove the ‘t’ from
     the rsync command in:

          test-lily/rsync-lily-doc.py
          test-lily/rsync-test.py

  2. Upload GUB by running:

          make lilypond-upload \
            LILYPOND_REPO_URL=git://git.sv.gnu.org/lilypond.git \
            LILYPOND_BRANCH=release/unstable

     or something like:

          make lilypond-upload \
            LILYPOND_REPO_URL=git://git.sv.gnu.org/lilypond.git \
            LILYPOND_BRANCH=stable/2.12

Post release
------------

  1. Update the current staging branch with the current news:

          git fetch
          git checkout origin/staging
          git merge origin/release/unstable

  2. Update ‘VERSION’ in lilypond git and upload changes:

          gedit VERSION

        • VERSION = what you just did +0.0.1

          git commit -m "Release: bump VERSION." VERSION
          git push origin HEAD:staging

     If the push fails with a message like

           ! [rejected]        HEAD -> staging (non-fast-forward)

     it means that somebody else updated the staging branch while you
     were preparing your change.  In that case, you need to restart the
     Post Release process.  Otherwise, proceed:

  3. Wait a few hours for the website to update.

  4. Email release notice to ‘info-lilypond’


File: lilypond-contributor.info,  Node: Major release checklist,  Next: Release extra notes,  Prev: Minor release checklist,  Up: Release work

11.3 Major release checklist
============================

A “major release” means an update of ‘x’ in ‘2.x.0’.

Main requirements
-----------------

These are the current official guidelines.

   • 0 Critical issues for two weeks (14 days) after the latest release
     candidate.

Potential requirements
----------------------

These might become official guidelines in the future.

   • Check reg test

   • Check all 2ly scripts

   • Check for emergencies the docs:

          grep FIXME --exclude "misc/*" --exclude "*GNUmakefile" \
            --exclude "snippets/*" ????*/*

   • Check for altered regtests, and document as necessary:

          git diff -u -r release/2.FIRST-CURRENT-STABLE \
            -r release/2.LAST-CURRENT-DEVELOPMENT input/regression/

Housekeeping requirements
-------------------------

Before the release:

   • write release notes.  note: stringent size requirements for various
     websites, so be brief.

   • Run convert-ly on all files, bump parser minimum version.

   • Update lilypond.pot:

          make -C $LILYPOND_BUILD_DIR po-replace
          mv $LILYPOND_BUILD_DIR/po/lilypond.pot po/

   • Make directories on lilypond.org:

          ~/download/sources/v2.NEW-STABLE
          ~/download/sources/v2.NEW-DEVELOPMENT

   • Shortly after the release, move all current contributors to
     previous contributors in ‘Documentation/included/authors.itexi’.

   • Delete old material in ‘Documentation/changes.tely’, but don’t
     forget to check it still compiles!  Also update the version
     numbers:

          @node Top
          @top New features in 2.NEW-STABLE since 2.OLD-STABLE

   • Website:

        • make a link from the old unstable to the next stable in
          lilypond.org’s ‘/doc/’ dir.  Keep all previous
          unstable->stable doc symlinks.

          Also, make the old docs self-contained – if there’s a redirect
          in ‘/doc/v2.OLD-STABLE/Documentation/index.html’ , replace it
          with the ‘index.html.old-2.OLD-STABLE’ files.

          The post-2.13 docs will need another way of handling the
          self-containment.  It won’t be hard to whip up a python script
          that changes the link to ‘../../../../manuals.html’ to
          ‘../website/manuals.html’, but it’s still a 30-minute task
          that needs to be done before 2.16.

        • doc auto redirects to ‘v2.NEW-STABLE’

        • add these two lines to ‘Documentation/web/server/robots.txt’:

               Disallow: /doc/v2.OLD-STABLE/
               Disallow: /doc/v2.NEW-DEVELOPMENT/

Unsorted
--------

   • submit po template for translation: send url of tarball to
     <coordinator@translationproject.org>, mentioning
     lilypond-VERSION.pot

   • update links to distros providing lilypond packages?  link in:
     ‘Documentation/web/download.itexi’

     This has nothing to do with the release, but it’s a “periodic
     maintenance” task that might make sense to include with releases.

   • Send announcements to...

     News:

          comp.music.research
          comp.os.linux.announce

          comp.text.tex
          rec.music.compose

     Mail:

          info-lilypond@gnu.org

          linux-audio-announce@lists.linuxaudio.org
          linux-audio-user@lists.linuxaudio.org
          linux-audio-dev@lists.linuxaudio.org

          tex-music@icking-music-archive.org

          --- non-existant?
          abcusers@blackmill.net

          rosegarden-user@lists.sourceforge.net
          info-gnu@gnu.org
          noteedit-user@berlios.de

          gmane.comp.audio.fomus.devel
          gmane.linux.audio.users
          gmane.linux.audio.announce
          gmane.comp.audio.rosegarden.devel

     Web:

          lilypond.org
          freshmeat.net
          linuxfr.com
          http://www.apple.com/downloads
          harmony-central.com (news@harmony-central.com)
          versiontracker.com [auto]
          hitsquad.com [auto]
          http://www.svgx.org
          https://savannah.gnu.org/news/submit.php?group_id=1673  


File: lilypond-contributor.info,  Node: Release extra notes,  Next: Notes on builds with GUB,  Prev: Major release checklist,  Up: Release work

11.4 Release extra notes
========================

Regenerating regression tests
.............................

Regenerating regtests (if the lilypond-book naming has changed):

   • git checkout release/lilypond-X.Y.Z-A

   • take lilypond-book and any related makefile updates from the latest
     git.

   • configure; make; make test

   • tar -cjf lilypond-X.Y.Z-A.test-output.tar.bz2
     input/regression/out-test/

   • mv lilypond-X.Y.Z-A.test-output.tar.bz2 ../gub/regtests/

   • cd ../gub/regtests/

   • make lilypond

stable/2.12
...........

If releasing stable/2.12, then:

   • apply doc patch: patches/rsync-lily.patch (or something like that)

   • change infodir in gub/specs/lilypond-doc.py from "lilypond.info" to
     "lilypond-web.info"

Updating a release (changing a in x.y.z-a)
..........................................

Really tentative instructions, almost certainly can be done better.

  1. change the VERSION back to release you want.  push change.
     (hopefully you’ll have forgotten to update it when you made your
     last release)

  2. make sure that there aren’t any lilypond files floating around in
     target/ (like usr/bin/lilypond).

  3. build the specific package(s) you want, i.e.

          bin/gub mingw::lilypond-installer
          make LILYPOND_BRANCH=stable/2.12 -f lilypond.make doc
          bin/gub --platform=darwin-x86 \
            'git://git.sv.gnu.org/lilypond-doc.git?branch=stable/2.12'

     or

     build everything with the normal "make lilypond", then (maybe)
     manually delete stuff you don’t want to upload.

  4. manually upload them.  good luck figuring out the rsync command(s).
     Hints are in test-lily/

     or

     run the normal lilypond-upload command, and (maybe) manually delete
     stuff you didn’t want to upload from the server.


File: lilypond-contributor.info,  Node: Notes on builds with GUB,  Prev: Release extra notes,  Up: Release work

11.5 Notes on builds with GUB
=============================

Building GUB
............

GUB - the Grand Unified Builder - is used to build the release versions
of LilyPond.  For background information, see *note Grand Unified
Builder (GUB)::.  The simplest way to set up a GUB build environment is
to use a virtual machine with LilyDev (*note LilyDev::).  Follow the
instructions on that page to set this up.  Make sure that your virtual
machine has enough disk space - a GUB installation takes over 30 GBytes
of disk space, and if you allocate too little, it will fail during the
setting up stage and you will have to start again.  64 GBytes should be
sufficient.

   While GUB is being built, any interruptions are likely to make it
almost impossible to restart.  If at all possible, leave the build to
continue uninterrupted.

   Download GUB and start the set up:

     git clone git://github.com/gperciva/gub.git
     cd gub
     make bootstrap

   This will take a very long time, even on a very fast computer.  You
will need to be patient.  It’s also liable to fail - it downloads a
number of tools, and some will have moved and others won’t respond to
the network.  For example, the perl archive.  If this happens, download
it from <http://www.cpan.org/src/5.0/perl-5.10.0.tar.gz>, saving the
archive to ‘gub/downloads/perl/’.  Continue the set up with:

     make bootstrap

   Once this has completed successfully, you can build the LilyPond
release package.  However, this uses an archived version of the
regression tests, so it is better to download this first.  Download the
test output from lilypond.org (you will need to replace ‘2.15.33-1’ with
the latest build):

     <http://lilypond.org/downloads/binaries/test-output/lilypond-2.15.33-1.test-output.tar.bz2>

   Copy the tarball into ‘gub/regtests/’, and tell the build system that
you have done this:

     touch regtests/ignore

   Now start the GUB build:

     make lilypond

   That’s it.  This will build LilyPond from current master.  To build
the current unstable release, run:

     make LILYPOND_BRANCH=release/unstable lilypond

   The first time you do this, it will take a very long time.

   Assuming the build has gone well, it can be uploaded using:

     make lilypond-upload
       LILYPOND_BRANCH=release/unstable
       LILYPOND_REPO_URL=git://git.sv.gnu.org/lilypond.git

Output files
............

GUB builds the files it needs into the directory ‘gub/target/’.  As a
general rule, these don’t need to be touched unless there is a problem
building GUB (see below).  The files to be uploaded are in
‘gub/uploads/’.  Once the build has completed successfully, there should
be 8 installation files and 3 archives, totalling about 600MB. There are
also 4 directories:

     gub/signatures
     gub/localdoc
     gub/webdoc
     gub/webtest

   ‘signatures’ contains files that are used to track whether some of
the archives have already been built.  Don’t touch these.

   ‘localdoc’ probably contains local copies of the documentation.

   ‘webdoc’ contains the documentation to be uploaded.

   ‘webtest’ contains the regtest comparison, which should be checked
before upload, and is also uploaded for subsequent checking.

   The total upload is about 700 MB in total, and on an ADSL connection
will take about 4 hours to upload.

Subsequent builds
.................

In principle, building the next release of LilyPond requires no action
other then following the instructions in *note Minor release
checklist::.  Because much of the infrastructure has already been built,
it will take much less time - about an hour on a fast computer.

   Continuing to build LilyPond without any other archiving/deletion of
previous builds is likely to be successful, but will take up a fair
amount of disk space (around 2GB per build) which may be a problem with
a Virtual Machine.  It’s therefore recommended to move (not copy)
‘gub/uploads’ to another machine/disk after each build, if space is at a
premium.

   However, if a significant change has been made to the LilyPond source
(e.g.  added source files) the build may fail if tried on top of a
previous build.  If this happens, be sure to move/delete ‘gub/uploads’
and all mentions of LilyPond in ‘gub/target’.  The latter can be
achieved with this command:

     rm -rf target/*/*/*lilypond*

   Be _very_ careful with this command.  Typing it wrongly could wipe
your disk completely.

Updating the web site
.....................

The ‘make lilypond-upload’ command updates the documentation on the
LilyPond web site.  However, it does _not_ update any part of the site
that is not part of the documentation - for example, the front page
(‘index.html’).  The website is updated by 2 cron jobs running on the
web server.  One of these pulls git master to the web server, and the
other makes the website with the standard ‘make website’ command.  They
run hourly, 30 minutes apart.  So - to update the front page of the
website, it’s necessary to update ‘VERSION’ and ‘news-front.itexi’ in
master and then wait for the cron jobs to run.  (N.B. - this is done by
pushing the changes to staging and letting patchy do its checks before
it pushes to master).


File: lilypond-contributor.info,  Node: Build system notes,  Next: Modifying the feta font,  Prev: Release work,  Up: Top

12 Build system notes
*********************

          Note: This chapter is in high flux, and is being run in a
          “wiki-like” fashion.  Do not trust anything you read in this
          chapter.

* Menu:

* Build system overview::
* Tips for working on the build system::
* General build system notes::
* Doc build::
* Website build::


File: lilypond-contributor.info,  Node: Build system overview,  Next: Tips for working on the build system,  Up: Build system notes

12.1 Build system overview
==========================

Build system is currently GNU make, with an extra "stepmake" layer on
top.  Look at files in ‘make/’ and ‘stepmake/’ and all ‘GNUmakefile’s.

   There is wide-spread dissatisfaction with this system, and we are
considering changing.  This would be a huge undertaking (estimated 200+
hours).  This change will probably involve not using GNU make any more –
but a discussion about the precise build system will have to wait.
Before we reach that point, we need to figure out (at least
approximately) what the current build system does.

   Fundamentally, a build system does two things:

  1. Constructs command-line commands, for example:

          lilypond-book \
            --tons --of --options \
            pitches.itely
          texi2pdf \
            --more --imperial --and --metric --tons --of --options \
            pitches.texi

  2. If there was a previous build, it decides which parts of the system
     need to be rebuilt.

   When I try to do anything in the build system, it helps to remind
myself of this.  The "end result" is just a series of command-line
commands.  All the black magick is just an attempt to construct those
commands.


File: lilypond-contributor.info,  Node: Tips for working on the build system,  Next: General build system notes,  Prev: Build system overview,  Up: Build system notes

12.2 Tips for working on the build system
=========================================

   • Add:

          echo "aaa"

          echo "bbb"

     to the build system files in various places.  This will let you
     track where the program is, in various points of the build.

     PH note.  There are lots of places where Make doesn’t let you put
     echo commands.  My top tip for tracing how make runs is to put

          $(error Some Text to display)

     This will stop make running and print the text ‘Some Text to
     display’.

     End PH note.

   • First task: understand how ‘make website’ works, _without_ the
     translations.  Looking at the english-only website is the best
     introduction to the build system...  it only covers about 5% of the
     whole thing, but even that will likely take 10 hours or more.


File: lilypond-contributor.info,  Node: General build system notes,  Next: Doc build,  Prev: Tips for working on the build system,  Up: Build system notes

12.3 General build system notes
===============================

* Menu:

* How stepmake works::


File: lilypond-contributor.info,  Node: How stepmake works,  Up: General build system notes

12.3.1 How stepmake works
-------------------------

Typing make website runs the file ‘GNUmakefile’ from the build
directory.  This only contains 3 lines:

     depth = .
     include config$(if $(conf),-$(conf),).make
     include $(configure-srcdir)/GNUmakefile.in

   The variable ‘depth’ is used throughout the make system to track how
far down the directory structure the make is.  The first include sets
lots of variables but doesn’t "do" anything.  Default values for these
variables are automatically detected at the ./configure step, which
creates the file ‘config.make’.  The second include runs the file
‘GNUmakefile.in’ from the top level source directory.

   This sets another load of variables, and then includes (i.e.
immediately runs) ‘stepmake.make’ from the ‘make’ subdirectory.  This
sets a load of other variables, does some testing to see if SCONS
(another build tool?)  is being used, and then runs ‘make/config.make’ -
which doesn’t seem to exist...

   GP: scons is indeed a different build tool; I think that Jan
experimented with it 5 years ago or something.  It seems like we still
have bits and pieces of it floating around.

   Next, it runs ‘make/toplevel-version.make’, which sets the version
variables for major, minor, patch, stable, development and mypatchlevel
(which seems to be used for patch numbers for non-stable versions
only?).

   Next - ‘make/local.make’, which doesn’t exist.

   Then a few more variable and the interesting comment:

     # Don't try to outsmart us, you puny computer!
     # Well, UGH.  This only removes builtin rules from

   and then tests to see whether BUILTINS_REMOVED is defined.  It
appears to be when I run make, and so
‘stepmake/stepmake/no-builtin-rules.make’ is run.  The comment at the
head of this file says:

     # UGH.  GNU make comes with implicit rules.
     # We don't want any of them, and can't force users to run
     # --no-builtin-rules

   I’ve not studied that file at length, but assume it removes all
make’s build-in rules (e.g.  ‘*.c’ files are run through the GNU C
compiler) - there’s a lot of them in here, and a lot of comments, and
I’d guess most of it isn’t needed.

   We return to ‘stepmake.make’, where we hit the make rule all: The
first line of this is:

     -include $(addprefix $(depth)/make/,$(addsuffix -inclusions.make, $(LOCALSTEPMAKE_TEMPLATES)))

   which, when the variables are substituted, gives:

     ./make/generic-inclusions.make
     ./make/lilypond-inclusions.make.

   (Note - according to the make documentation, -include is only
different from include in that it doesn’t produce any kind of error
message when the included file doesn’t exist).

   And the first file doesn’t exist.  Nor the second.  Next:

     -include $(addprefix $(stepdir)/,$(addsuffix -inclusions.make, $(STEPMAKE_TEMPLATES)))

   which expands to the following files:

     /home/phil/lilypond-git/stepmake/stepmake/generic-inclusions.make
     /home/phil/lilypond-git/stepmake/stepmake/toplevel-inclusions.make
     /home/phil/lilypond-git/stepmake/stepmake/po-inclusions.make
     /home/phil/lilypond-git/stepmake/stepmake/install-inclusions.make.

   One little feature to notice here - these are all absolute file
locations - the line prior to this used relative locations.  And none of
these files exist, either.

   (Further note - I’m assuming all these lines of make I’m following
are autogenerated, but that’ll be something else to discover.)

   JM: _“No, these lines are not useful in LilyPond (this is why you
think they are autogenerated), but they are part of StepMake, which was
meant to be a package to be installed as a build system over
autoconf/make in software project source trees.”_

   Next in ‘stepmake.make’:

     include $(addprefix $(stepdir)/,$(addsuffix -vars.make, $(STEPMAKE_TEMPLATES)))

   which expands to:

     /home/phil/lilypond-git/stepmake/stepmake/generic-vars.make
     /home/phil/lilypond-git/stepmake/stepmake/toplevel-vars.make
     /home/phil/lilypond-git/stepmake/stepmake/po-vars.make
     /home/phil/lilypond-git/stepmake/stepmake/install-vars.make.

   Woo.  They all exist (they should as there’s no - in front of the
include).  ‘generic-vars.make’ sets loads of variables (funnily enough).
‘toplevel-vars.make’ is very short - one line commented as ‘# override
Generic_vars.make:’ and 2 as follows:

     # urg?
     include $(stepdir)/documentation-vars.make

   I assume the urg comment refers to the fact that this should really
just create more variables, but it actually sends us off to
‘/home/phil/lilypond-git/stepmake/stepmake/documentation-vars.make’.

   That file is a 3 line variable setting one.

   ‘po-vars.make’ has the one-line comment ‘# empty’, as does
‘install-vars.make’.

   So now we’re back to ‘stepmake.make’.

   The next lines are :
     # ugh. need to do this because of PATH :=$(top-src-dir)/..:$(PATH)
     include $(addprefix $(depth)/make/,$(addsuffix -vars.make, $(LOCALSTEPMAKE_TEMPLATES)))

   and the include expands to:

     include ./make/generic-vars.make ./make/lilypond-vars.make.

   These again set variables, and in some cases export them to allow
child ‘make’ processes to use them.

   The final 4 lines of ‘stepmake.make’ are:

     include $(addprefix $(depth)/make/,$(addsuffix -rules.make, $(LOCALSTEPMAKE_TEMPLATES)))
     include $(addprefix $(stepdir)/,$(addsuffix -rules.make, $(STEPMAKE_TEMPLATES)))
     include $(addprefix $(depth)/make/,$(addsuffix -targets.make, $(LOCALSTEPMAKE_TEMPLATES)))
     include $(addprefix $(stepdir)/,$(addsuffix -targets.make, $(STEPMAKE_TEMPLATES)))

   which expand as follows:

     include ./make/generic-rules.make ./make/lilypond-rules.make
     include
       /home/phil/lilypond-git/stepmake/stepmake/generic-rules.make
       /home/phil/lilypond-git/stepmake/stepmake/toplevel-rules.make
       /home/phil/lilypond-git/stepmake/stepmake/po-rules.make
       /home/phil/lilypond-git/stepmake/stepmake/install-rules.make
     include ./make/generic-targets.make ./make/lilypond-targets.make
     include
       /home/phil/lilypond-git/stepmake/stepmake/generic-targets.make
       /home/phil/lilypond-git/stepmake/stepmake/toplevel-targets.make
       /home/phil/lilypond-git/stepmake/stepmake/po-targets.make
       /home/phil/lilypond-git/stepmake/stepmake/install-targets.make

   ‘lilypond-rules.make’ is ‘#empty’

   ‘generic-rules.make’ does seem to have 2 rules in it.  They are:

     $(outdir)/%.ly: %.lym4
             $(M4) $< | sed "s/\`/,/g" > $@

     $(outdir)/%: %.in
             rm -f $@
             cat $< | sed $(sed-atfiles) | sed $(sed-atvariables) > $@

   I believe the first rule is for *.ly files, and has a prerequisite
that *.lym4 files must be built first.  The recipe is ‘m4 | sed
"s/\`/,/g" >’.  Perhaps someone with more Unix/make knowledge can
comment on exactly what the rules mean/do.

   ‘toplevel-rules.make’ is ‘#empty’

   ‘po-rules.make’ is ‘#empty’

   ‘install-rules.make’ is ‘#empty’

   ‘generic-targets.make’ contains 2 lines of comments.

   ‘lilypond-targets.make’ contains only:

     ## TODO: fail dist or web if no \version present.
     check-version:
             grep -L version $(LY_FILES)

   ‘stepmake/generic-targets.make’ contains lots of rules - too many to
list here - it seems to be the main file for rules.  (FWIW I haven’t
actually found a rule for website: anywhere, although it clearly exists.
I have also found that you can display a rule in the terminal by typing,
say ‘make -n website’.  This is probably common knowledge.

   ‘stepmake/toplevel-targets.make’ adds a load of other (and
occasionally the same) rules to the gernric-targets.

   ‘stepmake/po-targets.make’ is rules for po* makes.

   ‘stepmake/install-targets.make’ has rules for local-install*.

   And that’s the end of stepmake.make.  Back to ‘GNUmakefile.in’.

   A bit more info from 27 March.  I’ve put some error traces into
‘GNUmakefile’ in the build directory, and it looks like the following
lines actually cause the make to run (putting an error call above them -
no make; below them - make):

     ifeq ($(out),www)
     # All web targets, except info image symlinks and info docs are
     # installed in non-recursing target from TOP-SRC-DIR
     install-WWW:
             -$(INSTALL) -m 755 -d $(DESTDIR)$(webdir)
             rsync -rl --exclude='*.signature' $(outdir)/offline-root $(DESTDIR)$(webdir)
             $(MAKE) -C Documentation omf-local-install

   I don’t currently understand the ‘ifeq’, since ‘$(out)’ is empty at
this point, but the line starting ‘-$(INSTALL)’ translates to:

     -/usr/bin/python /home/phil/lilypond-git/stepmake/bin/install.py \
       -c -m 755 -d /usr/local/share/doc/lilypond/html

   End of work for Sunday 27th.

   Another alterative approach to understanding the website build would
be to redirect ‘make -n website’ and ‘make website’ to a text file and
work through a) what it does and b) where the errors are occurring.

   GP: wow, all the above is much more complicated than I’ve ever looked
at stuff – I tend to do a "back first" approach (where I begin from the
command-line that I want to modify, figure out where it’s generated, and
then figure out how to change the generated command-line), rather than a
"front first" (where you begin from the "make" command).


File: lilypond-contributor.info,  Node: Doc build,  Next: Website build,  Prev: General build system notes,  Up: Build system notes

12.4 Doc build
==============

* Menu:

* The function of make doc::
* Building a bibliography::


File: lilypond-contributor.info,  Node: The function of make doc,  Next: Building a bibliography,  Up: Doc build

12.4.1 The function of make doc
-------------------------------

The following is a set of notes on how make doc functions.

   Preliminary question to be answered some time: where do all the
GNUmakefiles come from.  They’re in the build directory, but this is not
part of source.  Must be the configure script.  And it looks like this
comes from autogen.sh.  Must at some point kill the whole git directory,
repull and see what is created when.

   Anyway, here’s how make doc progresses:

   This is the build dependency tree from
‘stepmake/stepmake/generic-targets.make’:

     doc: doc-stage-1
       doc-stage-1:
             $(MAKE) -C $(depth)/scripts/build out=
             $(MAKE) out=www WWW-1
               WWW-1: local-WWW-1
             $(LOOP)
               $(MAKE) out=www WWW-2
               WWW-2: local-WWW-2
                 $(LOOP)
               $(MAKE) out=www WWW-post

     MAKE = make --no-builtin-rules
     -C = Change to directory before make

   doc-stage-1 does lots of opening and looking in files, but no
processing.

     Variable LOOP =

     + make PACKAGE=LILYPOND package=lilypond -C python
     && make PACKAGE=LILYPOND package=lilypond -C scripts
     &&  make PACKAGE=LILYPOND package=lilypond -C flower
     &&  make PACKAGE=LILYPOND package=lilypond -C lily
     &&  make PACKAGE=LILYPOND package=lilypond -C mf
     &&  make PACKAGE=LILYPOND package=lilypond -C ly
     &&  make PACKAGE=LILYPOND package=lilypond -C tex
     &&  make PACKAGE=LILYPOND package=lilypond -C ps
     &&  make PACKAGE=LILYPOND package=lilypond -C scm
     &&  make PACKAGE=LILYPOND package=lilypond -C po
     &&  make PACKAGE=LILYPOND package=lilypond -C make
     &&  make PACKAGE=LILYPOND package=lilypond -C elisp
     &&  make PACKAGE=LILYPOND package=lilypond -C vim
     &&  make PACKAGE=LILYPOND package=lilypond -C input
     &&  make PACKAGE=LILYPOND package=lilypond -C stepmake
     &&  make PACKAGE=LILYPOND package=lilypond -C Documentation
     && true

   From git grep:

   stepmake/stepmake/generic-vars.make has this:

     LOOP=+$(foreach i, $(SUBDIRS), $(MAKE) PACKAGE=$(PACKAGE) package=$(package) -C $(i) $@ &&) true

   $@ is the name of the target - WWW-1 in this case.

   In GNUmakefile.in we find:

     SUBDIRS = python scripts \
             flower lily \
             mf ly \
             tex ps scm \
             po make \
             elisp vim \
             input \
             stepmake $(documentation-dir)

   So that’s how we get the main make loop...

   That loop expands like this:

     make PACKAGE=LILYPOND package=lilypond -C python WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C scripts WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C flower WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C lily WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C mf WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C ly WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C tex WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C ps WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C scm WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C po WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C make WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C elisp WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C vim WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C input WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C stepmake WWW-1 &&
     make PACKAGE=LILYPOND package=lilypond -C Documentation WWW-1 &&
     true

   The directories up to and including vim produce no effect with make
in non-debug mode, although debug does show lots of action.

   ‘git/build/input/GNUmakefile’ is:

     depth=../
     include $(depth)/config$(if $(conf),-$(conf),).make
     include $(configure-srcdir)/./input/GNUmakefile
     MODULE_INCLUDES += $(src-dir)/$(outbase)

   The first include is:

     ..//config.make

   (note the // which is strictly wrong)

   which has lots of variables to set, but no action occurs.

   The second is:

     lilypond-git/./input/GNUmakefile

   which similarly doesn’t create any actual action.

   An error message at the end of build/input/GNUmakefile stops make
processing before it moves on to regression - so where does that come
from?

   And the answer is - make processes all directories in the directory
it’s entered (with some exceptions like out and out-www) and so it
changes to /regression.

   It then seems to consider whether it needs to make/remake loads of
makefiles.  Don’t understand this yet.  Possibly these are all the
makefiles it’s processing, and it always checks they’re up to date
before processing other files?

   Could be correct - some of this output is:

     Must remake target `../../make/ly-inclusions.make'.
     Failed to remake target file `../../make/ly-inclusions.make'.

   Having decided that, it then leaves the directory and re-executes:

     make PACKAGE=LILYPOND package=lilypond -C regression WWW-1

   The top of this make is:

     This program built for i486-pc-linux-gnu
     Reading makefiles...
     Reading makefile `GNUmakefile'...
     Reading makefile `../..//config.make' (search path) (no ~ expansion)...

   which looks like it’s re-reading all its known makefiles to check
they’re up to date.

   (From the make manual:

   To this end, after reading in all makefiles, make will consider each
as a goal target and attempt to update it.  If a makefile has a rule
which says how to update it (found either in that very makefile or in
another one) or if an implicit rule applies to it (see Chapter 10 [Using
Implicit Rules], page 103), it will be updated if necessary.  After all
makefiles have been checked, if any have actually been changed, make
starts with a clean slate and reads all the makefiles over again.  (It
will also attempt to update each of them over again, but normally this
will not change them again, since they are already up to date.)

   So my assumption seems correct)

   There appear to be about 74 of them.  After all the makefile
checking, we get this:

     Updating goal targets....
     Considering target file `WWW-1'.
     File `WWW-1' does not exist.
     Considering target file `local-WWW-1'.
     File `local-WWW-1' does not exist.
     Considering target file `out-www/collated-files.texi'.
     File `out-www/collated-files.texi' does not exist.
     Looking for an implicit rule for `out-www/collated-files.texi'.
     Trying pattern rule with stem `collated-files.texi'.
     Trying implicit prerequisite `collated-files.texi.in'.
     Trying pattern rule with stem `collated-files.texi'.
     Trying implicit prerequisite `collated-files.texi.in'.
     Trying pattern rule with stem `collated-files'.
     Trying implicit prerequisite `collated-files.tely'.
     Trying pattern rule with stem `collated-files'.
     Trying implicit prerequisite `out-www/collated-files.tely'.
     Trying rule prerequisite `out-www/version.itexi'.
     Found prerequisite `out-www/version.itexi' as VPATH `/home/phil/lilypond-git/input/regression/out-www/version.itexi'

   grep finds this if searching for local-WWW-1:

     make/lysdoc-targets.make:
       local-WWW-1: $(outdir)/collated-files.texi $(outdir)/collated-files.pdf

   which means that local-WWW-1 depends on coll*.texi and coll*.pdf and
so these will need to be checked to see if they’re up to date.  So make
needs to find rules for both of those and (as it says) it certainly
needs to make coll*.texi, since it doesn’t exist.

   In ly-rules.make we have:

     .SUFFIXES: .doc .tely .texi .ly

   which I’ll work out at some point, and also this rule:

     $(outdir)/%.texi: $(outdir)/%.tely $(outdir)/version.itexi $(DOCUMENTATION_LOCALE_TARGET) $(INIT_LY_SOURCES) $(SCHEME_SOURCES)
       LILYPOND_VERSION=$(TOPLEVEL_VERSION) $(PYTHON) $(LILYPOND_BOOK) $(LILYPOND_BOOK_INCLUDES) --process='$(LILYPOND_BOOK_PROCESS) $(LILYPOND_BOOK_INCLUDES) $(LILYPOND_BOOK_LILYPOND_FLAGS)' --output=$(outdir) --format=$(LILYPOND_BOOK_FORMAT) $(LILYPOND_BOOK_FLAGS) $<

   Note that the recipe is a very long line - it could probably benefit
from splitting.  The same makefile also has:

     $(outdir)/%.texi: $(outdir)/%.tely $(outdir)/version.itexi $(DOCUMENTATION_LOCALE_TARGET) $(INIT_LY_SOURCES) $(SCHEME_SOURCES)
       LILYPOND_VERSION=$(TOPLEVEL_VERSION) $(PYTHON) $(LILYPOND_BOOK) $(LILYPOND_BOOK_INCLUDES) --process='$(LILYPOND_BOOK_PROCESS) $(LILYPOND_BOOK_INCLUDES) $(LILYPOND_BOOK_LILYPOND_FLAGS)' --output=$(outdir) --format=$(LILYPOND_BOOK_FORMAT) $(LILYPOND_BOOK_FLAGS) $<

which seems to be an almost exact duplicate.  Whatever, the first one is
executed first.  Have not checked if the second executes.

   The first recipe translates as this:

     LILYPOND_VERSION=2.15.0 /usr/bin/python   --process=' ' \
       --output=./out-www --format= --lily-output-dir \
         /home/phil/lilypond-git/build/out/lybook-db

if we stop the build with an $(error), but I think this is because we
need to allow it to process the dependencies first.  It looks like
foo.texi is shown as being dependent on foo.tely, plus a load of other
files.

     DOCUMENTATION_LOCALE_TARGET is blank
     INIT_LY_SOURCES = /home/phil/lilypond-git/scm/auto-beam.scm \
       /home/phil/lilypond-git/scm/autochange.scm

   plus 10s (100s?)  of other .scm files.

     SCHEME_SOURCES = /home/phil/lilypond-git/ly/Welcome-to-LilyPond-MacOS.ly \
       /home/phil/lilypond-git/ly/Welcome_to_LilyPond.ly

   ditto .ly files.  This does seem a teency bit wrong - it looks like
the .ly and .scm files have been interchanged.  ly-vars.make has these 2
lines:

     INIT_LY_SOURCES = $(wildcard $(top-src-dir)/scm/*.scm)
     SCHEME_SOURCES = $(wildcard $(top-src-dir)/ly/*.ly)

   Looks like a bug.....

   So it now works its way through all these files, checking if they
need to be remade.  This is 100s of lines of the debug listing, although
none in the normal list.  Clearly none has to be made since they’re
source files.  It concludes:

     Must remake target `out-www/collated-files.tely'

   ‘lysdoc-rules.make’ has this:

     $(outdir)/collated-files.tely: $(COLLATED_FILES)
             $(LYS_TO_TELY) --name=$(outdir)/collated-files.tely --title="$(TITLE)" --author="$(AUTHOR)" $^

   ‘lysdoc-vars.make’ has:

     COLLATED_FILES = $(sort $(TEXINFO_SOURCES) $(LY_FILES) $(OUT_LY_FILES) )

   We find that:

     TEXINFO_SOURCES = AAA-intro-regression.tely
     OUT_LY_FILES is empty

   so LY_FILES has the big long list of all the .ly files in the
regression directory.

   This kicks off

     /home/phil/lilypond-git/build/scripts/build/out/lys-to-tely

   with a list of all the files in the regression test directory.  This
should (I believe) create the file collated-files.tely.

   So the next rule in make is for ‘version.itexi’, and make duly checks
this.  There’s a rule in ‘doc-i18n-root-rules.make’ that this depends on
‘git/VERSION’:

     $(outdir)/version.%: $(top-src-dir)/VERSION
             $(PYTHON) $(top-src-dir)/scripts/build/create-version-itexi.py > $ 

   This causes create-version-itexi.py to run and create version.itexi.

   Once that’s done, all the other *.scm and *.ly files are checked and
since they have no rules associated, they aren’t remade (just as well
for source files, really).  Since version.itexi was remade make
concludes that collated-files.texi must be remade.  To do this, it runs
lilypond-book.py on collated-files.tely, as below:

     LILYPOND_VERSION=2.15.0
       /usr/bin/python
       /home/phil/lilypond-git/scripts/lilypond-book.py
         -I /home/phil/lilypond-git/input/regression/
         -I ./out-www -I /home/phil/lilypond-git/input
         -I /home/phil/lilypond-git/Documentation
         -I /home/phil/lilypond-git/Documentation/snippets
         -I /home/phil/lilypond-git/input/regression/
         -I /home/phil/lilypond-git/Documentation/included/
         -I /home/phil/lilypond-git/build/mf/out/
         -I /home/phil/lilypond-git/build/mf/out/
         -I /home/phil/lilypond-git/Documentation/pictures
         -I /home/phil/lilypond-git/build/Documentation/pictures/./out-www
         --process='/home/phil/lilypond-git/build/out/bin/lilypond
         -I /home/phil/lilypond-git/input/regression/
         -I ./out-www
         -I /home/phil/lilypond-git/input
         -I /home/phil/lilypond-git/Documentation
         -I /home/phil/lilypond-git/Documentation/snippets
         -I /home/phil/lilypond-git/input/regression/
         -I /home/phil/lilypond-git/Documentation/included/
         -I /home/phil/lilypond-git/build/mf/out/
         -I /home/phil/lilypond-git/build/mf/out/
         -I /home/phil/lilypond-git/Documentation/pictures
         -I /home/phil/lilypond-git/build/Documentation/pictures/./out-www
         -dbackend=eps
         --formats=ps,png,pdf
         -dinclude-eps-fonts
         -dgs-load-fonts
         --header=doctitle
         --header=doctitlecs
         --header=doctitlede
         --header=doctitlees
         --header=doctitlefr
         --header=doctitlehu
         --header=doctitleit
         --header=doctitleja
         --header=doctitlenl
         --header=doctitlezh
         --header=texidoc
         --header=texidoccs
         --header=texidocde
         --header=texidoces
         --header=texidocfr
         --header=texidochu
         --header=texidocit
         --header=texidocja
         --header=texidocnl
         --header=texidoczh
         -dcheck-internal-types
         -ddump-signatures
         -danti-alias-factor=2'
         --output=./out-www
         --format=texi-html
         --verbose
         --lily-output-dir /home/phil/lilypond-git/build/out/lybook-db
         out-www/collated-files.tely

   So - lilypond-book runs on:

     input/regression/out-www/collated-files.tely

   Note the –verbose flag - this is from the make variable
LILYPOND_BOOK_VERBOSE which is added to the make variable
LILYPOND_BOOK_FLAGS.

   Now found the invocation to write some of the image files.  It’s like
this:

     /home/phil/lilypond-git/build/out/bin/lilypond
       -I /home/phil/lilypond-git/input/regression/
       -I ./out-www -I /home/phil/lilypond-git/input
       -I /home/phil/lilypond-git/Documentation
       -I /home/phil/lilypond-git/Documentation/snippets
       -I /home/phil/lilypond-git/input/regression/
       -I /home/phil/lilypond-git/Documentation/included/
       -I /home/phil/lilypond-git/build/mf/out/
       -I /home/phil/lilypond-git/build/mf/out/
       -I /home/phil/lilypond-git/Documentation/pictures
       -I /home/phil/lilypond-git/build/Documentation/pictures/./out-www
       -dbackend=eps
       --formats=ps,png,pdf
       -dinclude-eps-fonts
       -dgs-load-fonts
       --header=doctitle
       --header=doctitlecs
       --header=doctitlede
       --header=doctitlees
       --header=doctitlefr
       --header=doctitlehu
       --header=doctitleit
       --header=doctitleja
       --header=doctitlenl
       --header=doctitlezh
       --header=texidoc
       --header=texidoccs
       --header=texidocde
       --header=texidoces
       --header=texidocfr
       --header=texidochu
       --header=texidocit
       --header=texidocja
       --header=texidocnl
       --header=texidoczh
       -dcheck-internal-types
       -ddump-signatures
       -danti-alias-factor=2
       -I  "/home/phil/lilypond-git/build/out/lybook-db"
       -I  "/home/phil/lilypond-git/build/input/regression"
       -I  "/home/phil/lilypond-git/input/regression"
       -I  "/home/phil/lilypond-git/build/input/regression/out-www"
       -I  "/home/phil/lilypond-git/input"
       -I  "/home/phil/lilypond-git/Documentation"
       -I  "/home/phil/lilypond-git/Documentation/snippets"
       -I  "/home/phil/lilypond-git/input/regression"
       -I  "/home/phil/lilypond-git/Documentation/included"
       -I  "/home/phil/lilypond-git/build/mf/out"
       -I  "/home/phil/lilypond-git/build/mf/out"
       -I  "/home/phil/lilypond-git/Documentation/pictures"
       -I  "/home/phil/lilypond-git/build/Documentation/pictures/out-www"
       --formats=eps
       --verbose
       -deps-box-padding=3.000000
       -dread-file-list
       -dno-strip-output-dir
       "/home/phil/lilypond-git/build/out/lybook-db/snippet-names--415419468.ly"'

   Note the –verbose.  This causes 100s of lines of Lily debug output.
But at present I can’t work out where the flag comes from.  Later.


File: lilypond-contributor.info,  Node: Building a bibliography,  Prev: The function of make doc,  Up: Doc build

12.4.2 Building a bibliography
------------------------------

Bibliography files contain a list of citations, like this:

     @Book{vinci,
       author = {Vinci, Albert C.},
       title = {Fundamentals of Traditional Music Notation},
       publisher = {Kent State University Press},
       year = {1989}
     }

   There are a variety of types of citation (e.g.  Book (as above),
article, publication).  Each cited publication has a list of entries
that can be used to identify the publication.  Bibliograpies are
normally stored as files with a .bib extension.  One part of the
doc-build process is transforming the bibliography information into
‘texinfo’ files.  The commands to do this are in the ‘GNUmakefile’ in
the ‘Documentation’ directory.

   A typical line of the makefile to translate a single bibliography is:

     $(outdir)/colorado.itexi:
             BSTINPUTS=$(src-dir)/essay $(buildscript-dir)/bib2texi \
                     -s $(top-src-dir)/Documentation/lily-bib \
                     -o $(outdir)/colorado.itexi \
                     $(src-dir)/essay/colorado.bib

   Line by line:

     $(outdir)/colorado.itexi:

   We’re making the file ‘colorado.itexi’ and so this is the make
instruction.

             BSTINPUTS=$(src-dir)/essay $(buildscript-dir)/bib2texi \

   It’s in the ‘essay’ directory and we want to run the bib2texi.py
script against it.

                     -s $(top-src-dir)/Documentation/lily-bib \

   The style template is ‘lily-bib.bst’ and is found in the
‘Documentation’ directory.

                     -o $(outdir)/colorado.itexi \

   The output file in ‘colorado.itexi’.

                     $(src-dir)/essay/colorado.bib

   The input file is ‘colorado.bib’ in the ‘essay’ directory.

   The ‘bib2texi’ Python script used to be used with a variety of
options, but now is always called using the same options, as above.  Its
job is to create the file containing the options for ‘bibtex’ (the
program that actually does the translation), run bibtex, and then clean
up some temporary files.  Its main "value add" is the creation of the
options file, using this code:

     open (tmpfile + '.aux', 'w').write (r'''
     \relax
     \citation{*}
     \bibstyle{%(style)s}
     \bibdata{%(files)s}''' % vars ())

   The key items are the style file (now always lily-bib for us) and the
input file.

   The style file is written in its own specialised language, described
to some extent at

     <http://amath.colorado.edu/documentation/LaTeX/reference/faq/bibtex.pdf>

   The file ‘lily-bib.bst’ also has fairly extensive commenting.


File: lilypond-contributor.info,  Node: Website build,  Prev: Doc build,  Up: Build system notes

12.5 Website build
==================

          Note: This information applies only to the standard ‘make
          website’ from the normal build directory.  The process is
          different for ‘dev/website-build’.

   The rule for make website is found in GNUmakefile.in:

     website:
     $(MAKE) config_make=$(config_make) \
             top-src-dir=$(top-src-dir) \
             -f $(top-src-dir)/make/website.make \
             website

   This translates as:

     make --no-builtin-rules config_make=./config.make \
                     top-src-dir=/home/phil/lilypond-git \
                     -f /home/phil/lilypond-git/make/website.make \
                     website

   which has the effect of setting the variables ‘config_make’ and
‘top-src-dir’ and then processing the file ‘git/make/website.make’ with
the target of website.

   ‘website.make’ starts with the following:

     ifeq ($(WEBSITE_ONLY_BUILD),1)

   which checks to see whether the variable ‘WEBSITE_ONLY_BUILD’ was set
to one on the command line.  This is only done for standalone website
builds, not in the normal case.  The result of the test determines the
value of some variables that are set.  A number of other variables are
set, in order to establish locations of various files.  An example is:

     CREATE_VERSION=python $(script-dir)/create-version-itexi.py

   The rule for website is:

     website: website-texinfo website-css website-pictures website-examples web-post
             cp $(SERVER_FILES)/favicon.ico $(OUT)/website
             cp $(SERVER_FILES)/robots.txt $(OUT)/website
             cp $(top-htaccess) $(OUT)/.htaccess
             cp $(dir-htaccess) $(OUT)/website/.htaccess

   so we see that this starts by running the rules for 5 other targets,
then finishes by copying some files.  We’ll cover that later - first
‘website-texinfo’.  That rule is:

     website-texinfo: website-version website-xrefs website-bibs
             for l in '' $(WEB_LANGS); do \
                     if test -n "$$l"; then \
                             langopt=--lang="$$l"; \
                             langsuf=.$$l; \
                     fi; \
                     $(TEXI2HTML) --prefix=index \
                             --split=section \
                             --I=$(top-src-dir)/Documentation/"$$l" \
                             --I=$(top-src-dir)/Documentation \
                             --I=$(OUT) \
                             $$langopt \
                             --init-file=$(texi2html-init-file) \
                             -D web_version \
                             --output=$(OUT)/"$$l" \
                             $(top-src-dir)/Documentation/"$$l"/web.texi ; \
                     ls $(OUT)/$$l/*.html | xargs grep -L \
                             'UNTRANSLATED NODE: IGNORE ME' | \
                             sed 's!$(OUT)/'$$l'/!!g' | xargs \
                             $(MASS_LINK) --prepend-suffix="$$langsuf" \
                             hard $(OUT)/$$l/ $(OUT)/website/ ; \
             done

   which therefore depends on ‘website-version’, ‘website-xrefs’ and
‘website-bibs’.

     website-version:
             mkdir -p $(OUT)
             $(CREATE_VERSION) $(top-src-dir) > $(OUT)/version.itexi
             $(CREATE_WEBLINKS) $(top-src-dir) > $(OUT)/weblinks.itexi

   which translates as:

     mkdir -p out-website
     python /home/phil/lilypond-git/scripts/build/create-version-itexi.py
             /home/phil/lilypond-git > out-website/version.itexi
     python /home/phil/lilypond-git/scripts/build/create-weblinks-itexi.py
             /home/phil/lilypond-git > out-website/weblinks.itexi

   So, we make out-website then send the output of
‘create-version-itexi.py’ to ‘out-website/version.itexi’ and
‘create-weblinks-itexi.py’ to ‘out-website/weblinks.itexi’.

   ‘create-version-itexi.py’ parses the file ‘VERSION’ in the top source
dir.  It contains:

     PACKAGE_NAME=LilyPond
     MAJOR_VERSION=2
     MINOR_VERSION=15
     PATCH_LEVEL=13
     MY_PATCH_LEVEL=
     VERSION_STABLE=2.14.2
     VERSION_DEVEL=2.15.12

   currently.  ‘c-v-i.py’ parses this to:

     @c ************************ Version numbers ************
     @macro version
     2.15.13
     @end macro

     @macro versionStable
     2.14.2
     @end macro

     @macro versionDevel
     2.15.12
     @end macro

   ‘create-weblinks-itexi.py’ creates a load of texi macros (of the
order of 1000) similar to:

     @macro manualStableGlossaryPdf
     @uref{../doc/v2.14/Documentation/music-glossary.pdf,Music glossary.pdf}
     @end macro.

   It loads its languages from langdefs.py, and therefore outputs the
following unhelpful warning:

   ‘langdefs.py: warning: lilypond-doc gettext domain not found.’

   Next:

     website-xrefs: website-version
             for l in '' $(WEB_LANGS); do \

   is the start of the rule, truncated for brevity.  This loops through
the languages to be used on the website, processing some variables which
I don’t fully understand, to run this command:

     python /home/phil/lilypond-git/scripts/build/extract_texi_filenames.py \
             -I /home/phil/lilypond-git/Documentation \
             -I /home/phil/lilypond-git/Documentation/"$l" \
             -I out-website -o out-website --split=node \
             --known-missing-files= \
                      /home/phil/lilypond-git/scripts/build/website-known-missing-files.txt \
             -q \
             /home/phil/lilypond-git/Documentation/"$l"/web.texi ;\

   There’s a good description of what ‘extract_texi_filenames.py’ does
at the top of the script, but a shortened version is:

   ‘If this script is run on a file texifile.texi, it produces a file
texifile[.LANG].xref-map with tab-separated entries of the form
NODE\tFILENAME\tANCHOR.’

   An example from ‘web.nl.xref-map’ is:

     Inleiding        Introduction        Introduction

   ‘e-t-f.py’ follows the includes from document to document.  We know
some have not been created yet, and ‘known-missing-files’ option tells
‘e-t-f.py’ which these are.

   It then does this:

     for m in $(MANUALS); do \

   to run ‘e-t-f.py’ against all of the manuals, in each language.
Next:

     website-bibs: website-version
             BSTINPUTS=$(top-src-dir)/Documentation/web \
                     $(WEB_BIBS) -s web \
                     -s $(top-src-dir)/Documentation/lily-bib \
                     -o $(OUT)/others-did.itexi \
                     $(quiet-flag) \
                     $(top-src-dir)/Documentation/web/others-did.bib

   This is half the command.  It runs ‘bib2texi.py’ on 2 ‘.bib’ files -
‘others-did.bib’ and ‘we-wrote.bib’.  This converts bibliography files
into texi files with ‘bibtex’.

   Next the commands in the ‘website-texinfo’ rule are run:

     for l in '' $(WEB_LANGS); do \

   run ‘texi2html’.  This is the program that outputs the progress
message (found in ‘Documentation/lilypond-texi2html.init’):

   ‘Processing web site: []’

   It also outputs warning messages like:

   ‘WARNING: Unable to find node 'Řešení potíží' in book usage.’

     website-css:
             cp $(top-src-dir)/Documentation/css/*.css $(OUT)/website

   Copies 3 css files to out-website/website.  Then:

     website-pictures:
             mkdir -p $(OUT)/website/pictures
             if [ -d $(PICTURES) ]; \
             then \
                     cp $(PICTURES)/* $(OUT)/website/pictures ; \
                     ln -sf website/pictures $(OUT)/pictures  ;\
             fi

   which translates as:

     if [ -d Documentation/pictures/out-www ]; \
         then \
             cp Documentation/pictures/out-www/* out-website/website/pictures ; \
             ln -sf website/pictures out-website/pictures  ;\
         fi

   i.e.  it copies the contents of
‘build/Documentation/pictures/out-www/*’ to
‘out-website/website/pictures’.  Unfortunately, the pictures are only
created once ‘make doc’ has been run, so an initial run of ‘make
website’ copies nothing, and the pictures on the website (e.g.  the
logo) do not exist.  Next:

     website-examples:
             mkdir -p $(OUT)/website/ly-examples
             if [ -d $(EXAMPLES) ]; \
             then \
                     cp $(EXAMPLES)/* $(OUT)/website/ly-examples ; \
             fi

   translates to:

     mkdir -p out-website/website/ly-examples
     if [ -d Documentation/web/ly-examples/out-www ]; \
         then \
             cp Documentation/web/ly-examples/out-www/* out-website/website/ly-examples ; \
         fi

   This does the same with the LilyPond examples (found at
<http://lilypond.org/examples.html>).  Again, these are actually only
created by ‘make doc’ (and since they are generated from LilyPond source
files, require a working LilyPond ‘exe’ made with ‘make’).  So this does
nothing initially.  Then:

     web-post:
             $(WEB_POST) $(OUT)/website

   which is:

     python /home/phil/lilypond-git/scripts/build/website_post.py out-website/website

   which describes itself as:

   ‘This is web_post.py. This script deals with translations in the
"make website" target.’

   It also does a number of other things, including adding the Google
tracker code and the language selection footer.  We’re now at the end of
our story.  The final 4 lines of the recipe for website are:

     cp $(SERVER_FILES)/favicon.ico $(OUT)/website
     cp $(SERVER_FILES)/robots.txt $(OUT)/website
     cp $(top-htaccess) $(OUT)/.htaccess
     cp $(dir-htaccess) $(OUT)/website/.htaccess

   The first translates as:

     cp /home/phil/lilypond-git/Documentation/web/server/favicon.ico out-website/website

   so we see these are just copying the support files for the web
server.

website.make summary
....................

Recipes in ‘website.make’:

   • ‘website:’ this is the "master" rule.  It calls the other rules in
     order, then copies some extra files around - see below for further
     of the process it produces.

   • ‘website-version’: this calls the python scripts below:
        •      scripts/build/create-version-itexi.py

          This writes a @version, @versionStable, and @versionDevel
          based on the top-level VERSIONS file, to
          ‘out-website/version.itexi’

        •      scripts/build/create-weblinks-itexi.py

          This creates a ton of macros in ‘out-website/weblinks.itexi’.
          Stuff like @downloadStableLinuxNormal, @downloadStableWidows,
          ‘@stableDocsNotationPdf{}’, @downloadDevelSourch-zh.

          It’s quite monstrous because it deals with combinations of
          stable/devel, source/docs, lang/lang/lang*10, etc.

   • ‘website-xrefs:’ creates files used for complicated "out-of-build"
     references to ‘out-website/*.xref-map’

     If you just write @ref{}, then all’s groovy and we wouldn’t need
     this.  But if you write @rlearning{}, then our custom texi2html
     init file needs to know about our custom xref file format, which
     tells our custom texi2html init file how to create the link.

     GP: we should have a separate @node to discuss xrefs.  Also, take a
     quick look at a generated xref file – it’s basically just a list of
     @node’s [sic teenager pluralization rule] from the file.

   • ‘website-bib:’ generates the bibliography texinfo files from the
     .bib files - in the case of the website build these are
     ‘others-did.bib’ and ‘we-wrote.bib’.

   • ‘website-texinfo:’ this is the main part; it calles texi2html to
     generate the actual html.  It also has a ton of options to
     texi2html to pass info to our custom init file.

     The file actually built is called ‘web.texi’, and is either in the
     ‘Documentation’ directory, or a sub-directory specific to the
     language.

     The options file is ‘/Documentation/lilypond-texi2html.init’.  This
     contains *lots* of option and configuration stuff, and also
     includes the line:

          print STDERR "Initializing settings for web site: [$Texi2HTML::THISDOC{current_lang}]\n";

     This is where one of the console messages is generated.

     We have somewhere between 2-4 different ways "to pass info to our
     custom init file".  This is highly Not Good (tm), but that’s how
     things work at the moment.

     After texi2html, it does some black magick to deal with
     untranslated nodes in the translations.  Despite writing that part,
     I can’t remember how it works.  But in theory, you could figure it
     out by copy&pasting each part of the command (by "part", I mean
     "stuff before each | pipe"), substituting the variables, then
     looking at the text that’s output.  For example,

            ls $(OUT)/$$l/*.html

     is going to print a list of all html files, in all languages, in
     the build directory.  Then more stuff happens to each of those
     files (that’s what xargs does).

   • ‘website-css:’ just copies files to the build dir.

   • ‘website-pictures, website-examples:’ more file copies, with an if
     statement to handle if you don’t have any generated
     pictures/examples.

   • ‘web-post:’ runs:

          scripts/build/website_post.py

     which, it adds the "this page is translated in klingon" to the
     bottom of html pages, and adds the google analytics javascript.  It
     also has hard-coded lilypond version numbers, which is Bad (tm).

   Here’s a summary of what gets called, in what order, when we run
‘make website’

     website:
       website-texinfo:
         website-version:
           creates version.itexi and weblinks.itexi
         website-xrefs:
           runs extract_texi_filenames.py
         website-bibs:
           creates bibliography files, described above
       website-css:
         copies css files
       website-pictures:
         copies pictures
       website-examples:
         copies examples
       web-post:
         runs website_post.py
       Then some file copying


File: lilypond-contributor.info,  Node: Modifying the feta font,  Next: Administrative policies,  Prev: Build system notes,  Up: Top

13 Modifying the feta font
**************************

* Menu:

* Overview of the feta font::
* Font creation tools::
* Adding a new font section::
* Adding a new glyph::
* Building the changed font::
* METAFONT formatting rules::


File: lilypond-contributor.info,  Node: Overview of the feta font,  Next: Font creation tools,  Up: Modifying the feta font

13.1 Overview of the feta font
==============================

The feta font is a font that was created specifically for use in
LilyPond.  The sources for the font are found in mf/*.mf.

   The feta font is merged from a number of subfonts.  Each subfont can
contain at most 224 glyphs.  This is because each subfont is limited to
a one-byte address space (256 glyphs maximum) and we avoid the first 32
points in that address space, since they are non-printing control
characters in ASCII.

   In LilyPond, glyphs are accessed by glyph name, rather than by code
point.  Therefore, the naming of glyphs is significant.

   Information about correctly creating glyphs is found in ‘mf/README’.
Please make sure you read and understand this file.

   TODO – we should get mf/README automatically generated from texinfo
source and include it here.


File: lilypond-contributor.info,  Node: Font creation tools,  Next: Adding a new font section,  Prev: Overview of the feta font,  Up: Modifying the feta font

13.2 Font creation tools
========================

The sources for the feta font are written in metafont.  The definitive
reference for metafont is "The METAFONT book".  Source for the book is
available at CTAN.

   mf2pt1 is used to create type 1 fonts from the metafont sources.

   FontForge is used to postprocess the output of mf2pt1 and clean up
details of the font.  It can also be used by a developer to display the
resulting glyph shapes.


File: lilypond-contributor.info,  Node: Adding a new font section,  Next: Adding a new glyph,  Prev: Font creation tools,  Up: Modifying the feta font

13.3 Adding a new font section
==============================

The font is divided into sections, each of which contains less than 224
glyphs.  If more than 224 glyphs are included in a section, an error
will be generated.

   Each of the sections is contained in a separate ‘.mf’ file.  The
files are named according to the type of glyphs in that section.

   When adding a new section, it will be necessary to add the following:

   • The code for the glyphs, in a file ‘<section-name>.mf’
   • Driver files used to create the font in different sizes
   • An entry in the generic file used to create the font, or a new
     generic file
   • If necessary, new entries in the GNUmakefile
   • An entry in ‘scripts/build/gen-emmentaler-scripts.py’

   See the examples in ‘mf/’ for more information.


File: lilypond-contributor.info,  Node: Adding a new glyph,  Next: Building the changed font,  Prev: Adding a new font section,  Up: Modifying the feta font

13.4 Adding a new glyph
=======================

Adding a new glyph is done by modifying the .mf file to which the glyph
will be added.

   Necessary functions to draw the glyph can be added anywhere in the
file, but it is standard to put them immediately before the glyph
definition.

   The glyph definition begins with:

     fet_beginchar ("glyph description", "glyphname");

with ‘glyph description’ replaced with a short description of the glyph,
and ‘glyphname’ replaced with the glyphname, which is chosen to comply
with the naming rules in ‘mf/README’.

   The metafont code used to draw the glyph follows the ‘fet_beginchar’
entry.  The glyph is finished with:

     fet_endchar;


File: lilypond-contributor.info,  Node: Building the changed font,  Next: METAFONT formatting rules,  Prev: Adding a new glyph,  Up: Modifying the feta font

13.5 Building the changed font
==============================

In order to rebuild the font after making the changes, the existing font
files must be deleted.  The simplest and quickest way to do this is to
do:

     rm mf/out/*
     make


File: lilypond-contributor.info,  Node: METAFONT formatting rules,  Prev: Building the changed font,  Up: Modifying the feta font

13.6 METAFONT formatting rules
==============================

There are special formatting rules for METAFONT files.

   Tabs are used for the indentation of commands.

   When a path contains more than two points, put each point on a
separate line, with the operator at the beginning of the line.  The
operators are indented to the same depth as the initial point on the
path using spaces.  The indentation mechanism is illustrated below, with
‘------->’ indicating a tab character and any other indentation created
using spaces.

     def draw_something (test) =
     ------->if test:
     ------->------->fill z1
     ------->------->     -- z2
     ------->------->     -- z3
     ------->------->     .. cycle;
     ------->fi;
     enddef;


File: lilypond-contributor.info,  Node: Administrative policies,  Next: LilyPond grammar,  Prev: Modifying the feta font,  Up: Top

14 Administrative policies
**************************

This chapter discusses miscellaneous administrative issues which don’t
fit anywhere else.

* Menu:

* Meta-policy for this document::
* Environment variables::
* Meisters::
* Managing Staging and Master branches with Patchy::
* Administrative mailing list::
* Grand Organization Project (GOP)::
* Grand LilyPond Input Syntax Standardization (GLISS)::
* Unsorted policies::


File: lilypond-contributor.info,  Node: Meta-policy for this document,  Next: Environment variables,  Up: Administrative policies

14.1 Meta-policy for this document
==================================

The Contributor’s Guide as a whole is still a work in progress, but some
chapters are much more complete than others.  Chapters which are “almost
finished” should not have major changes without a discussion on
‘-devel’; in other chapters, a disorganized “wiki-style dump” of
information is encouraged.

   Do not change (other than spelling mistakes) without discussion:

   • *note Introduction to contributing::

   • *note Working with source code::

   Please dump info in an appropriate @section within these manuals, but
discuss any large-scale reorganization:

   • *note Compiling::

   • *note Documentation work::

   • *note Issues::

   • *note Regression tests::

   • *note Programming work::

   Totally disorganized; do whatever the mao you want:

   • *note Website work::

   • *note LSR work::

   • *note Release work::

   • *note Administrative policies::


File: lilypond-contributor.info,  Node: Environment variables,  Next: Meisters,  Prev: Meta-policy for this document,  Up: Administrative policies

14.2 Environment variables
==========================

Some maintenance scripts and instructions in this guide rely on the
following environment variables.  They should be predefined in LilyDev
distribution (see *note LilyDev::); if you set up your own development
environment, you can set them by appending these settings to your
‘~/.bashrc’ (or whatever defines your default environment variables for
the user account for LilyPond development), then logging out and in
(adapt directories to your setup):

     LILYPOND_GIT=~/lilypond-git
     export LILYPOND_GIT
     LILYPOND_BUILD_DIR=~/lilypond-git/build
     export LILYPOND_BUILD_DIR

   The standard build and install procedure (with ‘autogen.sh’,
‘configure’, ‘make’, ‘make install’, ‘make doc’ …) does not rely on
them.

   In addition, for working on the website, ‘LILYPOND_WEB_MEDIA_GIT’
should be set to the repository lilypond-extra, see *note
lilypond-extra::.


File: lilypond-contributor.info,  Node: Meisters,  Next: Managing Staging and Master branches with Patchy,  Prev: Environment variables,  Up: Administrative policies

14.3 Meisters
=============

We have four primary jobs to help organize all our contributors:

The Bug Meister
---------------

The Bug Meister’s responsibilities are:

   • To organize the individual Bug Squad volunteers, making sure that
     each member is aware of their responsibilities.  See *note The Bug
     Squad::.

   • To train new Bug Squad volunteers in the Issue Tracker process.
     See *note Issues::.

   • To have the final say on our policies for Issues and their
     classification.  See *note Issue classification::.

   Current Bug Meister: Colin Hall <bug-lilypond@gnu.org>

The Doc Meister
---------------

The Doc Meister’s responsibilities are:

   • To train new volunteers in our Documentation style and policy,
     including organizing LilyPond Snippet Repository (LSR) work.

   • To organize the individual volunteers – who does what on which job
     – and to check that everything is running smoothly.

   • To have final say on any Documentation policy.  See *note
     Documentation policy::.

   Current Doc Meister: None

The Patch Meister
-----------------

The Patch Meister’s responsibilities are:

   • To keep track of all patches submitted for testing and review.
     This includes scanning the bug and dev email lists looking for any
     patches submitted by ‘random’ contributors and advising them on how
     to submit a patch for testing and review.  See *note Uploading a
     patch for review:: and *note The patch review cycle::.

   • To makes sure that any patch submitted has a corresponding Issue
     Tracker and Rietveld Issue created for it before it enters the
     testing and review process.  See *note Issues::.

   • Updates all Issue statuses for all patches that are currently in
     the testing and review process periodically – currently every 3 - 4
     days.  See *note Patch handling::.

          Note: The Patch Meister’s role is a purely administrative one
          and no programming skill or judgement is assumed or required.

   Currently: James Lowe <pkx@gnu.org>

The Translation Meister
-----------------------

The Translation Meister’s responsibilities are:

   • To train new documentation translators in the translation process.
     See *note Translating the documentation::.

   • To update the translation priority list and handle the merging of
     the translation branches (in both directions).

   • To have final say on any Translation management policies.  See
     *note Translating the documentation::.

   Currently: Francisco Vila <translations@lilynet.net>


File: lilypond-contributor.info,  Node: Managing Staging and Master branches with Patchy,  Next: Administrative mailing list,  Prev: Meisters,  Up: Administrative policies

14.4 Managing Staging and Master branches with Patchy
=====================================================

* Menu:

* Overview of Patchy::
* Patchy requirements::
* Installing Patchy::
* Configuring Patchy::
* Running the script::
* Automating Patchy::
* Troubleshooting Patchy::


File: lilypond-contributor.info,  Node: Overview of Patchy,  Next: Patchy requirements,  Up: Managing Staging and Master branches with Patchy

14.4.1 Overview of Patchy
-------------------------

No programmatic skill is required to run Patchy; although knowledge of
compiling LilyPond and its documentation along with understanding how to
configure the PATH environment of your computer is required.  See *note
Working with source code::.

   The script ‘lilypond-patchy-staging.py’ checks for any new commits in
‘remote/origin/staging’, makes sure that the new HEAD compiles along
with all the LilyPond documentation.  Then finally pushing to
‘remote/origin/master’.  This script can be run and left unattended,
requiring no human intervention.

   Patchy can also be configured to send emails after each successful
(or unsuccessful) operation.  This is not a requirement and is turned
off by default.


File: lilypond-contributor.info,  Node: Patchy requirements,  Next: Installing Patchy,  Prev: Overview of Patchy,  Up: Managing Staging and Master branches with Patchy

14.4.2 Patchy requirements
--------------------------

   • A full local copy of the source code.  See *note Working with
     source code::.

   • All the software needed for compiling LilyPond _and_ the
     documentation.  Unlike testing patches, being able to build the
     full set of LilyPond’s documentation is required to be able to test
     & push new commits.  See *note Compiling::.

   • Commit access _is_ required to test and push new commits, but a
     valid login to <https://sourceforge.net> is _not_.  See *note
     Commit access::.


File: lilypond-contributor.info,  Node: Installing Patchy,  Next: Configuring Patchy,  Prev: Patchy requirements,  Up: Managing Staging and Master branches with Patchy

14.4.3 Installing Patchy
------------------------

The Patchy scripts are not part of the LilyPond code base, but can be
downloaded from <https://github.com/gperciva/lilypond-extra/>.  The
scripts and related Python libraries are all located in the ‘patches/’
directory.

   Alternatively, use ‘git clone’;

     git clone https://github.com/gperciva/lilypond-extra/

   This makes it simpler to update the scripts if any changes are ever
made to them.  Finally, add the location of the ‘patches/’ directory to
your PATH.


File: lilypond-contributor.info,  Node: Configuring Patchy,  Next: Running the script,  Prev: Installing Patchy,  Up: Managing Staging and Master branches with Patchy

14.4.4 Configuring Patchy
-------------------------

          Note: It is recommended to create a new user on your computer
          specifically to run the Patchy scripts as a security
          precaution and that this user should not have any
          administrative privileges.  Also do not set password
          protection for your ssh key else you will not be able to run
          the scripts unattended.

  1. Make sure the environment variables LILYPOND_GIT and
     LILYPOND_BUILD_DIR are configured appropriately.  See *note
     Environment variables::.

  2. Manually run either the ‘lilypond-patchy-staging.py’ script and
     when prompted:

          Warning: using default config; please edit /home/joe/.lilypond-patchy-config
          Are you sure that you want to continue with the default config? (y/[n])

     Answer “‘n’” and press enter.

     The next time either of the scripts are run they will use the
     ‘.lilypond-patchy-config’ settings copied to your ‘$HOME’
     directory.

  3. Manually edit the ‘.lilypond-patchy-config’ file, located in your
     ‘$HOME’ directory to change any of the default settings.

   These include:

   • All ‘make’ operations are run with;
          extra_make_options = -j3 CPU_COUNT=3

     See *note Saving time with the -j option::

   • A complete build of all the LilyPond documentation is _not_
     performed;
          patch_test_build_docs = no

   • Each instance of either a patch test or commit test & push is
     logged in;
          auto_compile_results_dir = ~/lilypond-auto-compile-results/

   • Both scripts will perform their build operations in;
          build_dir = /tmp/lilypond-autobuild/

   The script creates a clones of ‘staging’ and ‘master’ branches
(prefixed with ‘test-’) with a third branch, called ‘test-master-lock’
used as a check to protect against two or more instances of Patchy being
run locally at the same time.


File: lilypond-contributor.info,  Node: Running the script,  Next: Automating Patchy,  Prev: Configuring Patchy,  Up: Managing Staging and Master branches with Patchy

14.4.5 Running the script
-------------------------

‘lilypond-patchy-staging.py’ is run _without_ any arguments.  It then
checks to see if ‘remote/origin/staging’ is “further ahead” than
‘remote/origin/master’.

If there are no new differences between the two branches since the last
run check, the script will report something like this:

     (UTC) Begin LilyPond compile, previous commit at 4726764cb591f622e7893407db0e7d42bcde90d9
     Success:		No new commits in staging

If there are any differences between the two branches since the last run
check, (or if the script cannot for any reason, locate the last instance
of a commit that it checked) it will report something like this:

     (UTC) Begin LilyPond compile, previous commit at 4726764cb591f622e7893407db0e7d42bcde90d9
     Merged staging, now at:	79e98a773b6570cfa28a15775a9dea3d3e54d6b5
     	Success:		./autogen.sh --noconfigure
     	Success:		/tmp/lilypond-autobuild/configure --disable-optimising
     ...

   and proceed with running ‘make’, ‘make test’ and a ‘make doc’.
Unlike ‘test-patches.py’ if all the tests pass, the script then pushes
the changes to ‘remote/origin/master’.

     ...
     Success:		nice make clean
     Success:		nice make -j7 CPU_COUNT=7
     Success:		nice make test -j7 CPU_COUNT=7
     Success:		nice make doc -j7 CPU_COUNT=7
     To ssh://joe@git.sv.gnu.org/srv/git/lilypond.git
        79e98a7..4726764  test-staging -> master
     	Success:		pushed to master

          Note: In the case where any of the
          ‘lilypond-patchy-staging.py’ tests fail, do not try to push
          your own fixes but report the failures to the Developers List
          <lilypond-devel@gnu.org> for advice.


File: lilypond-contributor.info,  Node: Automating Patchy,  Next: Troubleshooting Patchy,  Prev: Running the script,  Up: Managing Staging and Master branches with Patchy

14.4.6 Automating Patchy
------------------------

To run as a cron job make sure you have;

     [notification]
     notify_non_action = no

   in ‘$HOME/.lilypond-patchy-config’ to avoid any unintentional email
flooding:

   Assuming that Patchy run a user “patchy”, create a file called
‘$HOME/lilypond-patchy.cron’, adapting it as necessary (the ‘/2’ means
“run this every 2 hours”):

     02 0-23/2 * * * /home/patchy/lilypond-extra/patches/lilypond-patchy-staging.py

          Note: ‘cron’ will not inherit environment variables so you
          must re-define any variables inside
          ‘$HOME/lilypond-patchy.cron’.  For instance, LILYPOND_GIT may
          need to be defined if GIT_REPOSITORY_DIR is not correctly set
          in ‘$HOME/.lilypond-patchy-config’.

   Finally, apply the cron job (you may need superuser privileges for
this):

     crontab -u patchy /home/patchy/lilypond-patchy.cron


File: lilypond-contributor.info,  Node: Troubleshooting Patchy,  Prev: Automating Patchy,  Up: Managing Staging and Master branches with Patchy

14.4.7 Troubleshooting Patchy
-----------------------------

The following is a list of the most common messages that the scripts may
report with explanations.

     this Git revision has already been pushed by an operator other than this Patchy.

   • Another, remote, machine has already tested and pushed the new
     commits in staging.

   • You may also see this if the auto-build files have been deleted and
     this computer has previously already pushed the listed commit ID to
     ‘master’.

     test-master-lock and PID entry exist but previous Patchy
     run (PID xxxxx) died, resetting test-master-lock anyway.

A previous attempt was unsuccessful for some reason and the scripts were
not able to tidy up after themselves (for example if you manually halt
the process by killing it or closing the terminal you may have been
running the script in).  The ‘test-master-lock’ branch was therefore not
able to be deleted cleanly however, nothing needs to be done the scripts
will rebuild any tests it needs to.

     fatal: A branch named 'test-master-lock' already exists.

   • There is another instance of Patchy running on your computer that
     is testing the same tracker issue.

   • A previous test attempt was unsuccessful for some reason and the
     scripts were not able to tidy up after themselves (for example if
     you manually halt the testing process by killing it or closing the
     terminal you may have been running the script in).  The
     ‘test-master-lock’ branch was therefore not able to be deleted
     cleanly, in this case you must manually delete the
     ‘test-master-lock’ branch in your ‘$LILYPOND_GIT’ directory.

          git branch -d test-master-lock

     It may be wise to also manually delete ‘test-master’ and
     ‘test-staging’ too, just to be safe.

     *** FAILED STEP ***
             merge from staging
             Another instance (PID xxxxx) is already running.

This occurs when trying to run ‘lilypond-patchy-staging.py’ when another
instance of either script is already running locally.


File: lilypond-contributor.info,  Node: Administrative mailing list,  Next: Grand Organization Project (GOP),  Prev: Managing Staging and Master branches with Patchy,  Up: Administrative policies

14.5 Administrative mailing list
================================

A mailing list for administrative issues is maintained at
‘lilypond-hackers@gnu.org’.

   This list is intended to be used for discussions that should be kept
private.  Therefore, the archives are closed to the public.

   Subscription to this list is limited to certain senior developers.

   At the present time, the list is dormant.

   Details about the criteria for membership, the types of discussion to
take place on the list, and other policies for the hackers list will be
finalized during the *note Grand Organization Project (GOP)::.


File: lilypond-contributor.info,  Node: Grand Organization Project (GOP),  Next: Grand LilyPond Input Syntax Standardization (GLISS),  Prev: Administrative mailing list,  Up: Administrative policies

14.6 Grand Organization Project (GOP)
=====================================

GOP has two goals:

   • Clarify the various development tasks by writing down the policies
     and techniques and/or simplifying the tasks directly.

   • Get more people involved in development: specifically, find people
     to do easy tasks to allow advanced developers to concentrate on
     difficult tasks.

* Menu:

* Motivation::
* Ongoing jobs::
* Policy decisions::
* Policy decisions (finished)::


File: lilypond-contributor.info,  Node: Motivation,  Next: Ongoing jobs,  Up: Grand Organization Project (GOP)

14.6.1 Motivation
-----------------

Most readers are probably familiar with the LilyPond Grand Documentation
Project, which ran from Aug 2007 to Aug 2008.  This project involved
over 20 people and resulted in an almost complete rewrite of the
documentation.  Most of those contributors were normal users who decided
to volunteer their time and effort to improve lilypond for everybody.
By any measure, it was a great success.

   The Grand Organization Project aims to do the same thing with a
larger scope – instead of focusing purely on documentation, the project
aims to improve all parts of LilyPond and its community.  Just as with
GDP, the main goal is to encourage and train users to become more
involved.

   If you have never contributed to an open-source project before –
especially if you use Windows or OSX and do not know how to program or
compile programs – you may be wondering if there’s anything you can do.
Rest assured that you _can_ help.

"Trickle-up" development
------------------------

One of the reasons I’m organizing GOP is "trickle-up" development.  The
idea is this: doing easy tasks frees up advanced developers to do harder
tasks.  Don’t ask "am I the _best_ person for this job"; instead, ask
"am I _capable_ of doing this job, so that the current person can do
stuff I _can’t_ do?".

   For example, consider lilypond’s poor handling of grace notes in
conjunction with clef and tempo changes.  Fixing this will require a
fair amount of code rewriting, and would take an advanced developer a
few weeks to do.  It’s clearly beyond the scope of a normal user, so we
might as well sit back and do nothing, right?

   No; we _can_ help, indirectly.  Suppose that our normal user starts
answering more emails on lilypond-user.  This in turn means that
documentation writers don’t need to answer those emails, so they can
spend more time improving the docs.  I’ve noticed that all doc writers
tackle harder and harder subjects, and when they start writing docs on
scheme programming and advanced tweaks, they start contributing bug
fixes to lilypond.  Having people performing these easy-to-moderate bug
fixes frees up the advanced developers to work on the really hard
stuff...  like rewriting the grace note code.

   Having 1 more normal user answering emails on lilypond-user won’t
have a dramatic ‘trickle-up’ effect all by itself, of course.  But if we
had 8 users volunteering to answer emails, 6 users starting to write
documentation, and 2 users editing LSR... well, that would free up a lot
of current bug-fixing-capable contributors to focus on that, and we
could start to make a real dent in the number of bugs in lilypond.
Quite apart from the eased workload, having that many new helpers will
provide a great moral boost!


File: lilypond-contributor.info,  Node: Ongoing jobs,  Next: Policy decisions,  Prev: Motivation,  Up: Grand Organization Project (GOP)

14.6.2 Ongoing jobs
-------------------

Although GOP is a short-term project, the main goal is to train more
people to handle ongoing jobs.  The more people doing these jobs, the
lighter the work will be, and the more we can get done with lilypond!

   Also, it would be nice if we had at least one "replacement" /
"understudy" for each role – too many tasks are only being done by one
person, so if that person goes on vacation or gets very busy with other
matters, work in that area grinds to a halt.

Jobs for normal users
---------------------

   • Consultant: LilyPond is sometimes critized for not listening to
     users, but whenever we ask for opinions about specific issues, we
     never get enough feedback.  This is somewhat aggravating.  We need
     a group of users to make a dedicated effort to test and give
     feedback.  If there’s new documentation, read it.  If there’s an
     experimental binary, download it and try compiling a score with it.
     If we’re trying to name a new command, think about it and give
     serious suggestions.

   • lilypond-user support: I think it would be nice if we had an
     official team of users helping other users.

   • LilyPond Report: Keeping a monthly newsletter running is a
     non-trivial task.  A lot of work is needed to organize it; it would
     be great if we could split up the work.  One person could write the
     Snippet of the Month, another person could do Quotes of the Month,
     another person could do interviews, etc.

   • Documentation: Although GDP (the Grand Documentation Project) did
     great work, there’s still many tasks remaining.

   • Translations: Keeping the documentation translations is a
     monumental task; we need all the help we can get!

Jobs for advanced users for developers
--------------------------------------

   • Git help for writers: We often receive reports of typos and minor
     text updates to the documentation.  It would be great if somebody
     could create properly-formatted patches for these corrections.

     Technical requirements: ability to run *note LilyDev::.

   • LSR editor: LSR contains many useful examples of lilypond, but some
     snippets are out of date and need updating.  Other snippets need to
     be advertized, and new snippets need to be sorted.  We could use
     another person to handle LSR.

     Technical requirements: use of a web browser.  LilyPond
     requirements: you should be familiar with most of Notation chapters
     1 and 2 (or be willing to read the docs to find out).

   • Join the Frogs: "Frogs" are a team of bug-fixers (because frogs eat
     bugs, and you often find them in Ponds of Lilies) and new feature
     implementors.

     Technical requirements: development environment (such as *note
     LilyDev::), ability to read+write scheme and/or C++ code.


File: lilypond-contributor.info,  Node: Policy decisions,  Next: Policy decisions (finished),  Prev: Ongoing jobs,  Up: Grand Organization Project (GOP)

14.6.3 Policy decisions
-----------------------

There are a number of policy decisions – some of them fairly important –
which we have been postponing for a few years.  We are now discussing
them slowly and thoroughly; agenda and exact proposals are online:

     <http://lilypond.org/~graham/gop/index.html>

   Below is a list of policies which are not “on the agenda” yet.

   Note that the presence of an item on this list does _not_ mean that
everybody thinks that something needs to be done.  Inclusion in this
simply means that one developer thinks that we should discuss it.  We
are not going to filter this list; if any developer thinks we should
discuss something, just add it to the bottom of the list.  (the list is
unsorted)

   As GOP progresses, items from this list will be put on the agenda and
removed from this list.  I generally try to have one month’s discussion
planned in advance, but I may shuffle things around to respond to any
immediate problems in the developer community.

   There are some item(s) not displayed here; these are questions that
were posed to me privately, and I do not feel justified in discussing
them publicly without the consent of the person(s) that brought them up.
They will initially be discussed privately on the lilypond-hackers
mailing list – but the first question will be "do we absolutely need to
do this privately", and if not, the discussion will take place on
lilypond-devel like the other items.

   In most policy discussions in lilypond over the past few years, the
first half (or more) is wasted arguing on the basis of incorrect or
incomplete data; once all the relevant facts are brought to light, the
argument is generally resolved fairly quickly.  In order to keep the GOP
discussions focused, each topic will be introduced with a collection of
relevant facts and/or proposals.  It is, of course, impossible to
predict exactly which facts will be relevant to the discussion – but
spending an hour or two collecting information could still save hours of
discussion.

          Note: The estimated time required for "prep work", and the
          following discussion, has been added to each item.  At the
          moment, there is an estimated 30 hours of prep work and 140
          hours of discussion.

   • *Patch reviewing*: At the time of this writing, we have 23 (known)
     patches waiting for review.  Some from main developers; some from
     new developers.  We desperately need more people helping with
     lilypond, but ignoring patches is the best way to drive potential
     contributors away.  This is not good.

     (prep: 2 hours.  discuss: 10 hours)

   • *Official links to other organizations?*: There’s something called
     the "software freedom conservancy", and in general, there’s a bunch
     of "umbrella organizations".  Joining some of these might give us
     more visibility, possibly leading to more users, more developers,
     maybe even financial grants or use in schools, etc.

     (prep: 2 hours.  discuss: 5 hours)

   • *Issue tracking with google code*: We use the google issue tracker,
     but this means that we are relying on a commercial entity for a
     large part of our development.  Would it be better (safer in the
     long run) to use the savannah bug tracker?

     (prep: 1 hour.  discuss: 5 hours)

   • *Patch review tool*: Reitveld is inconvenient in some respects: it
     requires a google account, and there’s no way to see all patches
     relating to lilypond.  Should we switch to something like gerritt?
     <https://sourceforge.net/p/testlilyissues/issues/1184/>

     (prep: 5 hours.  discuss: 15 hours)

   • *Clarity for sponsorships*: We currently do not advertize bounties
     and sponsorships on the webpage.  How much advertising do we want,
     and what type?  Should we change the "structure" / "framework" for
     bounties?

     (prep: 2 hours.  discuss: 10 hours)

   • *code readability*: "Our aim when producing source code for
     LilyPond in whatever language is that it should be totally
     comprehensible to a relatively inexperienced developer at the
     second reading."

     Rationale: - aids maintainability of code base - "second reading"
     so newer developers can look up unfamiliar stuff - will help to
     keep things simple, even if the code is doing complex stuff
     discourages "secret squirrel" coding, e.g.  "how much functionality
     can I squeeze into as few characters as possible" "comments are for
     wimps" - will aid not *discouraging* new developers to join the
     project

     (prep: 2 hours.  discuss: 10 hours)

   • *C++ vs.  scheme*: what should be in scheme, what should be in C++,
     what can/should be ported from one to the other, etc.  Questions of
     maintainability, speed (especially considering guile 2.0), and the
     amount of current material in either form, are important.

     (prep: 5 hours.  discuss: 15 hours)

   • *always make an issue number for patches*: there is a proposal that
     we should always have a google code issue number for every patch.
     This proposal is closely tied to our choice of patch review tool;
     if we switch to a different tool (as suggested in a different
     proposal), this proposal may become moot.

     (prep: 1 hour.  discuss: 5 hours)

   • *initalizer lists*: shoudl we use initalizer lists for C++?  AFAIK
     they make no difference for built-in types, but there’s some weird
     case where it’s more efficient for objects, or something.

     Probably not worth making this a weekly thing on its own, but we
     can probably wrap it up with some other code-related questions.

     (prep: 15 minutes.  discuss: 3 hours)


File: lilypond-contributor.info,  Node: Policy decisions (finished),  Prev: Policy decisions,  Up: Grand Organization Project (GOP)

14.6.4 Policy decisions (finished)
----------------------------------

Here is a record the final decisions, along with links to the
discussions.

* Menu:

* GOP-PROP 1 - python formatting::
* GOP-PROP 2 - mentors and frogs::
* GOP-PROP 3 - C++ formatting::
* GOP-PROP 4 - lessons from 2.14::
* GOP-PROP 5 - build system output (not accepted)::
* GOP-PROP 6 - private mailing lists::
* GOP-PROP 7 - developers as resources::
* GOP-PROP 8 - issue priorities::
* GOP-PROP 9 - behavior of make doc::


File: lilypond-contributor.info,  Node: GOP-PROP 1 - python formatting,  Next: GOP-PROP 2 - mentors and frogs,  Up: Policy decisions (finished)

14.6.4.1 GOP-PROP 1 - python formatting
.......................................

We will follow the indentation described in PEP-8.
<http://www.python.org/dev/peps/pep-0008/>

   • use 4 spaces per indentation level

   • never mix tabs and spaces (for indentation)

   • Code indented with a mixture of tabs and spaces should be converted
     to using spaces exclusively

     Once this is done, we should add ‘python -tt’ to the build system
     to avoid such errors in the future.

   There should be absolutely no tab characters for indentation in any
‘.py’ file in lilypond git.  All such files should be converted to use
spaces only.

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00060.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00084.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00310.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00574.html>


File: lilypond-contributor.info,  Node: GOP-PROP 2 - mentors and frogs,  Next: GOP-PROP 3 - C++ formatting,  Prev: GOP-PROP 1 - python formatting,  Up: Policy decisions (finished)

14.6.4.2 GOP-PROP 2 - mentors and frogs
.......................................

Nothing much was decided.  The list of responsibilities was slightly
altered; see the new one in *note Mentors::.  We should encourage more
use of the Frogs mailing list.  There’s a list of contributor-mentor
pairs in:

     <https://github.com/gperciva/lilypond-extra/blob/master/people/mentors.txt>

   That’s pretty much it.

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00311.html>




File: lilypond-contributor.info,  Node: GOP-PROP 3 - C++ formatting,  Next: GOP-PROP 4 - lessons from 2.14,  Prev: GOP-PROP 2 - mentors and frogs,  Up: Policy decisions (finished)

14.6.4.3 GOP-PROP 3 - C++ formatting
....................................

Speaking academically, C++ code style is a "solved problem".  Let’s pick
one of the existing solutions, and let a computer deal with this.
Humans should not waste their time, energy, and creativity manually
adding tabs or spaces to source code.

   We have modified ‘fixcc.py’ to use astyle, along with extra regex
tweaks.

   • the final script will be run *blindly* on the lilypond source code.
     We will accept whatever formatting the final version of this script
     produces, with no manual tweaking.

   • patches which have been run through this tool will not be rejected
     for style reasons.  Any code formatting “desires” which are not
     enforced by ‘fixcc.py’ will not be considered grounds for rejecting
     a patch.

   • for now, this style will not be enforced.  It is not cause for
     concern if patches which do not follow the formatting done by
     ‘fixcc.py’ are pushed.  From time to time, Graham will run the
     formatter on the entire code base, and commit the resulting
     changes.

     In a few months, we will tighten up this policy item (with some
     sort of automatic processing), but that is outside the scope of
     this policy item and is a matter for later discussion.

   • after the proposal is accepted, we will leave some time for
     existing patches to be accepted and pushed.  The script was run on
     the source code on *2011 August 01*.

GNU code
--------

LilyPond is a GNU project, so it makes sense to follow the GNU coding
standards.  These standards state:

     We don’t think of these recommendations as requirements, because it
     causes no problems for users if two different programs have
     different formatting styles.

     But whatever style you use, please use it consistently, since a
     mixture of styles within one program tends to look ugly.  If you
     are contributing changes to an existing program, please follow the
     style of that program.

   (<http://www.gnu.org/prep/standards/html_node/Formatting.html>)

   With that in mind, we do not think that we must blindly follow the
formatting given by the currrent version of Emacs.

Implementation notes
--------------------

We can avoid some of the style change pollution in git history by
ignoring whitespaces changes:

     git diff -w

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00526.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00796.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00200.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00525.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00751.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00751.html>


File: lilypond-contributor.info,  Node: GOP-PROP 4 - lessons from 2.14,  Next: GOP-PROP 5 - build system output (not accepted),  Prev: GOP-PROP 3 - C++ formatting,  Up: Policy decisions (finished)

14.6.4.4 GOP-PROP 4 - lessons from 2.14
.......................................

History
-------

A brief history of releases:

date           version        comment
(YYYY-MM-DD)
-----------------------------------------------------
2008-10-28     2.11.63        nobody checking
                              regtests
2008-11-17     2.11.64
2008-11-29     2.11.65
2008-12-23     2.12.0
2009-01-01                    somewhere around
                              here, Graham becomes
                              officially release
                              manager, but Han-Wen
                              still builds the
                              actual releases
2009-01-01     2.12.1
2009-01-25     2.12.2
2009-02-28     2.13.0
2009-06-01     2.13.1         note jump in time!
2009-06-27     2.13.2         first Graham
                              release?
2009-07-03     2.13.3
2009-09-09                    Graham arrives in
                              Glasgow, gets a
                              powerful desktop
                              computer, and begins
                              serious work on GUB
                              (sending bug reports
                              to Jan).  It takes
                              approximately 100
                              hours until GUB is
                              stable enough to
                              make regular
                              releases.
2009-09-24     2.13.4
2009-10-02     2.13.5
2009-10-22     2.13.6
2009-11-05     2.13.7
...
2010-01-13     2.12.3
...
2010-03-19     2.13.16        Bug squad starts
                              doing a few regtest
                              comparisons, but
                              IIRC the effort dies
                              out after a few
                              weeks (BLUE)
...
2010-08-04     2.13.29        Phil starts checking
                              regtests (BLUE)
...
2011-01-12     2.13.46        release candidate 1
                              (GREEN)
...
2011-05-30     2.13.63        release candidate 7
                              (GREEN)
2011-06-06     2.14.0

Carl’s analysis of the bugs
---------------------------

A ‘csv’ spreadsheet is available.

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00852.html>

     <lilypond-issues-analysis.csv>
     <lilypond-issues-analysis-trim-duplicates.csv>

   There 148 issues marked with Priority=Critical in the tracker.

   I’ve done an analysis, and it looks to me like there was initially a
backlog of critical issues that weren’t fixed, and little work was being
done to eliminate critical issues.

   Somewhere about 2010-08-01, critical issues started to disappear, but
occasional new ones appeared.

   There were a couple of major changes that introduced unanticipated
regressions (new spacing code, beam collision avoidance).  These
produced more than the expected number of regressions.

   It appears to me that we didn’t really get serious about eliminating
critical bugs until about 2010-06-15 or so.  After that point, the
number of critical bugs more-or-less steadily decreased until we got to
a release candidate.

   Of particular interest, the first release candidate of 2.14 was
released on 2011-01-12.  Over the next 10 days, about a dozen bugs were
reported and fixed.  Release candidate 2 came out on 2011-02-09.  No
surge of bugs occurred with this release.  Candidate 3 came out on
2011-03-13; we got 2 bugs per week.  Candidate 4 came out on 2011-03-29;
2 new bugs.  Candidate 6 came out on 2011-04-07.  We got a couple of
bugs per week.

Notes, commentary, and opinions
-------------------------------

     Han-Wen: Overall, I think this cycle took too long
     Mike: I agree
     Graham: +1

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-06/msg00797.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00364.html>



File: lilypond-contributor.info,  Node: GOP-PROP 5 - build system output (not accepted),  Next: GOP-PROP 6 - private mailing lists,  Prev: GOP-PROP 4 - lessons from 2.14,  Up: Policy decisions (finished)

14.6.4.5 GOP-PROP 5 - build system output (not accepted)
........................................................

This proposal was too broad; after a month of discussion, Graham
withdrew the proposal.  Portions of it will be introduced in later
proposals.

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00320.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00527.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00753.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg01042.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00116.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00310.html>


File: lilypond-contributor.info,  Node: GOP-PROP 6 - private mailing lists,  Next: GOP-PROP 7 - developers as resources,  Prev: GOP-PROP 5 - build system output (not accepted),  Up: Policy decisions (finished)

14.6.4.6 GOP-PROP 6 - private mailing list
..........................................

Potentially sensitive or private matters will be referred to Graham.  He
will then decide who should discuss the matter on an ad-hoc basis, and
forward or CC them on future emails.

   For emphasis, the project administrators are Han-Wen, Jan, and
Graham; those three will always be CC’d on any important discussions.

   The lilypond-hackers mailing list will be removed.

History
-------

There is some unhappy history about this idea in our development
community:

     <http://lists.gnu.org/archive/html/lilypond-devel/2010-09/msg00178.html>
     <http://web.archive.org/web/20110325004849/http://news.lilynet.net/spip.php?article121>
     <http://lists.gnu.org/archive/html/lilypond-devel/2010-11/msg00076.html>

Other projects
--------------

The idea of private mailing lists is hardly uncommon in open-source
software.  For example,

     <http://lwn.net/Articles/394660/>   about debian-private
     <http://subversion.apache.org/mailing-lists.html>  private@
     <http://www.freebsd.org/administration.html#t-core>
     <http://foundation.gnome.org/legal/>   board members pledge
     to keep certain matters confidential

     every security team of every GNU/Linux distribution and OS

   In fact, Karl Fogel’s “Producing Open Source Software” explicitly
suggests a private mailing list for some circumstances:

     [on granting commit/push access to a contributor]

     But here is one of the rare instances where secrecy is
     appropriate. You can't have votes about potential committers
     posted to a public mailing list, because the candidate's feelings
     (and reputation) could be hurt.

     <http://producingoss.com/en/consensus-democracy.html#electorate>

Board of governers, voting, etc?
--------------------------------

Many projects have an official board of directors, or a list of “core
developers”, with set term limits and elections and stuff.

   I don’t think that we’re that big.  I think we’re still small enough,
and there’s enough trust and consensus decisions, that we can avoid
that.  I would rather that we kept on going with trust+consensus for at
least the next 2-3 years, and spent more time+energy on bug fixes and
new features instead of administrative stuff.

   Project administrators are Han-Wen, Jan, and Graham.

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg00783.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg01004.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00117.html>


File: lilypond-contributor.info,  Node: GOP-PROP 7 - developers as resources,  Next: GOP-PROP 8 - issue priorities,  Prev: GOP-PROP 6 - private mailing lists,  Up: Policy decisions (finished)

14.6.4.7 GOP-PROP 7 - developers as resources
.............................................

We shall treat developers (and contributors) as *Independent
volunteers*: each person does whatever they want, whenever they want.
We have busy careers and lives; we make no expectations of action from
anybody (with the exception of the 6 people in “Meister” positions).

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-07/msg01092.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00087.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00497.html>


File: lilypond-contributor.info,  Node: GOP-PROP 8 - issue priorities,  Next: GOP-PROP 9 - behavior of make doc,  Prev: GOP-PROP 7 - developers as resources,  Up: Policy decisions (finished)

14.6.4.8 GOP-PROP 8 - issue priorities
......................................

We will delete the “priority” field of the issue tracker altogether.
The “type” system will be tweaked.

   Type-critical:

   • a reproducible failure to build either ‘make’ or ‘make doc’, from
     an empty build tree, in a first run, if ‘configure’ does not report
     any errors.

   • any program behaviour which is *unintentionally* worse than the
     previous stable version or the current development version.
     Developers may always use the “this is intentional”, or even the
     “this is an unavoidable effect of an improvement in another area”,
     reason to move this to a different type.

   • anything which stops contributors from helping out (e.g.
     lily-git.tcl not working, source tree(s) not being available,
     LilyDev being unable to compile git master, inaccurate instructions
     in the Contributor’s Guide 2 Quick start).

     To limit this scope of this point, we will assume that the
     contributor is using the latest LilyDev and has read the relevant
     part(s) of the Contributor’s Guide.  Problems in other chapters of
     the CG are not sufficient to qualify as Type-Critical.

More new/changed types and labels
.................................

Unless otherwise specified, the current types and labels will continue
to be used.  The new types introduced by this proposal are:

   • Type-crash: any segfault, regardless of what the input file looks
     like or which options are given.  Disclaimer: this might not be
     possible in some cases, for example certain guile programs (we
     certainly can’t predict if a piece of scheme will ever stop
     running, i.e.  the halting problem), or if we rely on other
     programs (i.e.  ghostscript).  If there are any such cases that
     make segfault-prevention impossible, we will document those
     exceptions (and the issue will remain as a "crash" instead of
     "documentation" until the warning has been pushed).

   • Type-maintainability: anything which makes it difficult for serious
     contributors to help out (e.g.  difficult to find the relevant
     source tree(s), confusing policies, problems with automatic
     indentation tools, etc).

   • Type-ugly: replaces Type-collision, and it will include things like
     bad slurs in addition to actual collision.

   A new label will be added:

   • (label) Needs_evidence: it is not clear what the correct output
     should look like.  We need scans, references, examples, etc.

Reminding users about stars
---------------------------

We can remind users that they can “star” an issue to indicate that they
care about it.  Since we resolved to treat developers as independent
volunteers, there is no expectation that anybody will look at those
stars, but if any developer want to organize their work schedule
according to the stars, they are welcome to do so.

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00019.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00277.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00413.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00624.html>



File: lilypond-contributor.info,  Node: GOP-PROP 9 - behavior of make doc,  Prev: GOP-PROP 8 - issue priorities,  Up: Policy decisions (finished)

14.6.4.9 GOP-PROP 9 - behavior of make doc
..........................................

If there are build problems, then it should be easier to find out why
it’s failing.  This will be achieved with log files, as well as possibly
including scripts which automatically display portions of those log
files for a failing build.

   We will also add targets for building a specific manual (for
quick+easy checking of doc work), as well as for building all
documentation in a specific language (either English or a translated
language).

   When you run ‘make doc’,

   • All output will be saved to various log files, with the exception
     of output directly from ‘make(1)’.

     Note that ‘make(1)’ refers to a specific executable file on unix
     computers, and is not a general term for the build system.

   • By default, no other output will be displayed on the console, with
     one exception: if a build fails, we might display some portion(s)
     of log file(s) which give useful clues about the reason for the
     failure.

     The user may optionally request additional output to be printed;
     this is controlled with the ‘VERBOSE=x’ flag.  In such cases, all
     output will still be written to log files; the console output is
     strictly additional to the log files.

   • Logfiles from calling lilypond (as part of lilypond-book) will go
     in the relevant
     ‘$LILYPOND_BUILD_DIR/out/lybook-db/12/lily-123456.log’ file.  All
     other logfiles will go in the ‘$LILYPOND_BUILD_DIR/logfiles/’
     directory.

     A single ‘make doc’ will therefore result in hundreds of log files.
     Log files produced from individual lilypond runs are not under our
     control; apart from that, I anticipate having one or two dozen log
     files.  As long as it is clear which log file is associated with
     which operation(s), I think this is entirely appropriate.  The
     precise implementation will be discussed for specific patches as
     they appear.

   • Both stderr and stdout will be saved in ‘*.log’.  The order of
     lines from these streams should be preserved.

   • There will be no additional “progress messages” during the build
     process.  If you run ‘make --silent’, a non-failing build should
     print absolutely nothing to the screen.

   • Assuming that the loglevels patch is accepted, lilypond (inside
     lilypond-book) will be run with –loglevel=WARN.
     <http://codereview.appspot.com/4822055/>

   • Ideally, a failing build should provide hints about the reason why
     it failed, or at least hints about which log file(s) to examine.

   If this proposal is accepted, none of these policies will be assumed
to apply to any other aspect of the build system.  Policies for any
other aspect of the build system will be discussed in separate
proposals.

Don’t cause more build problems
-------------------------------

However, there is a danger in this approach, that vital error messages
can also be lost, thus preventing the cause of the failure of a make
being found.  We therefore need to be exceptionally careful to move
cautiously, include plenty of tests, and give time for people to
experiment/find problems in each stage before proceeding to the next
stage.

   This will be done by starting from individual lilypond calls within
lilypond-book, and slowly moving to “larger” targets of the build system
– after the individual lilypond calls are are producing the appropriate
amount of output and this is saved in the right place and we can
automatically isolate parts of a failing build, we will work on
lilypond-book in general, and only then will we look at the build system
itself.

Implementation notes
--------------------

There is an existing make variable QUIET_BUILD, which alter the amount
of output being displayed
(<http://lilypond.org/doc/v2.15/Documentation/contributor/useful-make-variables>
).  We are not planning on keeping this make variable.

   The standard way for GNU packages to give more output is with a ‘V=x’
option.  Presumably this is done by increasing ‘x’?  If we support this
option, we should still write log files; we would simply print more of
the info in those log files to screen.

   The command ‘tee’ may be useful to write to a file and display to
stdout (in the case of VERBOSE).

Discussions
...........

     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00378.html>
     <https://lists.gnu.org/archive/html/lilypond-devel/2011-08/msg00703.html>


File: lilypond-contributor.info,  Node: Grand LilyPond Input Syntax Standardization (GLISS),  Next: Unsorted policies,  Prev: Grand Organization Project (GOP),  Up: Administrative policies

14.7 Grand LilyPond Input Syntax Standardization (GLISS)
========================================================

Summary
-------

   • Start: sortly after 2.14 comes out, which is currently estimated to
     happen in January 2011.

   • Length: 6-12 months.  We’re not going to rush this.

   • Goal: define an input which we commit to being machine-updateable
     for the forseeable future.  Any future patches which change the
     syntax in a non-convert-ly-able format will be rejected.  (subject
     to the limitations, below) Once this is finished, we will release
     lilypond 3.0.

The Problem
-----------

One of the biggest complaints people have with lilypond – other than
silly thing like "there’s no gui" – is the changing syntax.  Now,
inventing a language or standards is difficult.  If you set it in stone
too soon, you risk being stuck with decisions which may limit matters.
If you keep on updating the syntax, interaction with older data (and
other programs!)  becomes complex.

Scope and Limitations
---------------------

   • tweaks will not be included.  Anything with \override, \set,
     \overrideProperty, \tweak, \revert, \unset...  including even those
     command names themselves...  is still fair game for NOT_SMART
     convert-ly updates.

   • other than that, everything is on the table.  Is it a problem to
     have the tagline inside \header?  What should the default behavior
     of \include be?

   • we need to get standards for command names.  This will help users
     remember them, and reduce the options for future names (and
     potential renamings later on).  \commandOn and \commandOff seem to
     work well (should we *always* have an Off command?), but what about
     the "command" part?  Should it be \nounVerbOn, or \verbNounOn ?  Or
     \verbNotesWithExtraInformationOn ?

   • we need standards for the location of commands.  Ligature brackets,
     I’m looking at you.  (non-postfix notation must die!)

   • this Grand Project doesn’t affect whether we have a 2.16 or not.
     The main problem will be deciding what to do (with a bit of
     messiness anticipated for \tuplet); we should definitely release a
     2.16 before merging _any_ of these changes.

   • we obviously can’t /guarantee/ that we’ll /never/ make any
     non-convert-ly changes in the basic format.  But we *can* guarantee
     that such changes would force lilypond 4.0, and that we would only
     do so for overwhelmingly good reasons.

Workflow
--------

   • We’re going to have lots and lots of emails flying around.  The
     vast majority won’t really fit into either -devel or -user, so
     we’ll use a list devoted to syntax issues.

   • Once we have a serious proposal that gained general acceptance from
     the separate syntax mailing list, I’ll bring it to -devel.  We’re
     not going to make any changes without discussing it on -devel, but
     if we’re going to have huge threads about English grammar and silly
     ideas, and I don’t want to clutter up -devel.  Once whatever
     chaotic silliness on the syntax list is settled down, I’ll bring
     the ideas to -devel.

   • as with GDP, I’ll moderate the discussion.  Not as with mailist
     moderation, but rather by introducing issues at specific times.  We
     don’t want a free-for-all discussion of all parts of the syntax at
     once; nothing will get resolved.

   • Whenever possible, we’ll decide on policies at the highest level of
     abstraction.  For example, consider \numericTimeSignature, \slurUp,
     \xNotesOn, \startTextSpan, and \verylongfermata.  One of them
     starts with the name of the notation first (slur).  One has an
     abbreviation (x instead of cross).  One has the verb at the end
     (On), another has it at the beginning (start).  The adjective can
     come at the beginning (numeric, x) or end (Up).  Most are in
     camelCase, but one isn’t (verylongfermata).

   • Instead of arguing about each individual command, we’ll decide on
     abstract questions.  Should each command begin the notation-noun,
     or the verb?  Should all commands be in camelCase, or should we
     make everything other than articulations in camelCase but make
     articulations all lower-case?  Are abbreviations allowed?

   • Once we’ve answered such fundamental questions, most of the syntax
     should fall into place pretty easily.  There might be a few odd
     questions left ("is it a span, or a spanner?"), but those can be
     settled fairly quickly.

Implementation
--------------

Nothing until the project is finished, then we declare the next stable
release (2.16.0 or 2.18.0 ?)  to be the final 2.x version, release it,
then apply all the GLISS syntax changes and start testing a beta for 3.0
a week or two later.

Discussion
----------

Don’t respond to any of the specifics yet.  Yes, we all have our pet
irritations (like "what’s up with \paper and \layout?!").  There will be
plenty of time to discuss them once GLISS starts.

   That said, we have a list of specific items that people really wanted
to have written down.  See *note Specific GLISS issues::.

* Menu:

* Specific GLISS issues::


File: lilypond-contributor.info,  Node: Specific GLISS issues,  Up: Grand LilyPond Input Syntax Standardization (GLISS)

14.7.1 Specific GLISS issues
----------------------------

   • add regtests for every piece of syntax (not one-command-per-file,
     but making a few files which, between them, use every single piece
     of syntax.)  This is a great test for convert-ly.

   • should GLISS cover suggested conventions?  (indentation,
     one-bar-per-line, etc – the kind of stuff we list for the lilypond
     formatting in the docs ?)

   • how much (if any) syntactic sugar should we add?  i.e.
            \instrumentName #'foo
          % instead of
            \set Staff.instrumentName
     ?  Carl: maybe yes, Neil: no.  (for example, it fails for
     pianostaff)

   • the values that are used as arguments to common used overrides.
     Sometimes they are a symbol (e.g.  #’around), sometimes a
     predefined variable referring to a Scheme value or object (e.g.
     #LEFT, #all-visible ).  The main trouble is that for novice users
     it is not clear when there should be an apostrophe and when not.

   • When do we need -\command and when is it just \command ?

   • Command-line options to the lilypond binary.  -dfoo counts as a
     tweak; we won’t be trying to pin those down.

   • \layout {
       \context { \Score
     % vs.
     \layout {
       \context {
         \Score

   • If would be pedagogically simpler to realize this difference if the
     syntax was separate if you define a context from scratch (as is the
     case with \RemoveEmptyStaffContext) or if it’s defined by adding
     onto an existing context.  For example, a syntax like

     \context{
      % Copy the current settings of the Staff context:
      \use Staff
      % do whatever additional settings
     }
     %%% could be used to distinguish from
     \context{
      % Take settings from a variable:
      \Variable
      % do whatever additional settings
     }

     %%% and

     \context{
      % Start from scratch:
      \type ...
      \name ...
      \consists ...
      ...
     }

   • Capitalization of identifiers: \VoiceOne ?

   • %%% Allow
     { music expression } * 4
     %%% instead of
     \repeat unfold 4 { music expression }

     ?  patch here:
          <http://lists.gnu.org/archive/html/lilypond-devel/2010-04/msg00467.html>

   • Personally, I find it easier to understand when there’s a repeated
     8 in the half-bar position; it’s much easier to see that you have
     two groups of 4:

          c8 c c c c8 c c c
          %%% instead of one group of eight:
          c8 c c c c c c c

   • trivially simple bar-lines:

     c1 | c1 |

     encourage, allow, or discourage, or disallow?

   • indentation of \\ inside a {} construct.

   • barline checks at the end of line should be preceded by at least 2
     spaces?  barline checks should line up if possible (i.e.  if you
     can use less than 4, 8, X empty spaces before a barline check to
     make them line up?)

   • Why doesn’t \transpose respect \relative mode?

   • on \score vs.  \new Score

     But in the light of a consistent syntax and semantic, I see no
     reason (from the users POV) to disallow it.  After all, the real
     top-level context is a \book {}, isn’t it, and I don’t see a point
     in disallowing a \new Score construct just like \new Staff.

     From a syntactical POV, I see the following pros for \new Score: -
     You can write \with { ...  } for every other context but \Score,
     which (for consistency) should also work with \new Score.  - When
     there’s a \new Foo Bar, there’s also a \context Foo Bar, which
     makes the same as a parallel instantiation of all Bar’s.  -
     [Quoting Rune from
     <http://www.mail-archive.com/lilypond-devel@gnu.org/msg14713.html>
     "I know that the \score-statement is a syntactical construct, but I
     think it would be nice to hide this fact from the users.  I think
     we could make the use of score-block much more intuitive if
     changing the syntax to \new \Score and adding an implicit
     sequential-statement to the score."

   • Discussion on
     <https://sourceforge.net/p/testlilyissues/issues/1322/> about \new
     vs.  \context.

   • Let users add their own items to the parser?  comment 11 on:
     <https://sourceforge.net/p/testlilyissues/issues/1322/>

   • should engravers be pluralized (note_heads_engraver) or not
     (note_head_engraver) ?

   • should we allow numbers in identifier names?  Issue:
     <https://sourceforge.net/p/testlilyissues/issues/1670/>

   • should we officially allow accented characters?  in general, how do
     we feel about utf-8 stuff?

   • for the sake of completeness/simplicity, what about *disallowing*
     the "one-note" form of a music expression?  i.e.  only allowing
     stuff like
       \transpose c d { e1 }
       \transpose c d << e1 >>

     and never allowing
       \transpose c d e1

   • What should be the officially encouraged way of writing music for
     transposing instruments?  Maybe it should be simplified?  See
     http://lists.gnu.org/archive/html/lilypond-user/2011-07/msg00130.html


File: lilypond-contributor.info,  Node: Unsorted policies,  Prev: Grand LilyPond Input Syntax Standardization (GLISS),  Up: Administrative policies

14.8 Unsorted policies
======================

Language-specific mailing lists
...............................

A translator can ask for an official lilypond-xy mailing list once
they’ve finished all “priority 1” translation items.

Performing yearly copyright update (“grand-replace”)
....................................................

At the start of each year, copyright notices for all source files should
be refreshed by running the following command from the top of the source
tree:

     make grand-replace

   Internally, this invokes the script ‘scripts/build/grand-replace.py’,
which performs a regular expression substitution for old-year ->
new-year wherever it finds a valid copyright notice.

   Note that snapshots of third party files such as ‘texinfo.tex’ should
not be included in the automatic update; ‘grand-replace.py’ ignores
these files if they are listed in the variable ‘copied_files’.

Push git access
...............

Git access is given out when a contributor has a significant record of
patches being accepted without problems.  If existing developers are
tired of pushing patches for a contributor, we’ll discuss giving them
push access.  Unsolicited requests from contributors for access will
almost always be turned down.


File: lilypond-contributor.info,  Node: LilyPond grammar,  Next: GNU Free Documentation License,  Prev: Administrative policies,  Up: Top

Appendix A LilyPond grammar
***************************

This appendix contains a description of the LilyPond grammar, as output
from the parser.

Grammar

    1 start_symbol: lilypond

    3 start_symbol: "#{" $ embedded_lilypond

    4 lilypond: %empty
    5         | lilypond toplevel_expression
    6         | lilypond assignment
    7         | lilypond error
    8         | lilypond "\version-error"

   10 toplevel_expression: $ lilypond_header
   11                    | book_block
   12                    | bookpart_block
   13                    | BOOK_IDENTIFIER
   14                    | score_block
   15                    | composite_music
   16                    | full_markup
   17                    | full_markup_list
   18                    | SCM_TOKEN
   19                    | embedded_scm_active
   20                    | output_def

   21 lookup: LOOKUP_IDENTIFIER
   22       | LOOKUP_IDENTIFIER '.' symbol_list_rev

   23 embedded_scm_bare: SCM_TOKEN
   24                  | SCM_IDENTIFIER

   25 embedded_scm_active: SCM_IDENTIFIER
   26                    | scm_function_call
   27                    | lookup

   28 embedded_scm_bare_arg: SCM_ARG
   29                      | SCM_TOKEN
   30                      | FRACTION
   31                      | partial_markup
   32                      | full_markup_list
   33                      | context_modification
   34                      | score_block
   35                      | context_def_spec_block
   36                      | book_block
   37                      | bookpart_block
   38                      | output_def
   39                      | lookup

   40 embedded_scm: embedded_scm_bare
   41             | scm_function_call
   42             | lookup

   43 embedded_scm_arg: embedded_scm_bare_arg
   44                 | scm_function_call
   45                 | music_assign

   46 scm_function_call: SCM_FUNCTION function_arglist

   47 embedded_lilypond_number: '-' embedded_lilypond_number
   48                         | bare_number_common
   49                         | UNSIGNED NUMBER_IDENTIFIER

   50 embedded_lilypond: %empty
   51                  | identifier_init_nonumber
   52                  | embedded_lilypond_number
   53                  | post_event post_events
   54                  | multiplied_duration
   55                  | music_embedded music_embedded music_list
   56                  | error
   57                  | "\version-error" embedded_lilypond

   58 lilypond_header_body: %empty
   59                     | lilypond_header_body assignment
   60                     | lilypond_header_body embedded_scm

   61 lilypond_header: "\header" '{' lilypond_header_body '}'

   62 assignment_id: STRING

   63 assignment: assignment_id '=' identifier_init
   64           | assignment_id '.' property_path '=' identifier_init
   65           | assignment_id ',' property_path '=' identifier_init

   66 identifier_init: identifier_init_nonumber
   67                | number_expression
   68                | symbol_list_part_bare '.' property_path
   69                | symbol_list_part_bare ',' property_path
   70                | post_event_nofinger post_events

   71 identifier_init_nonumber: score_block
   72                         | book_block
   73                         | bookpart_block
   74                         | output_def
   75                         | context_def_spec_block
   76                         | music_assign
   77                         | pitch_or_music
   78                         | FRACTION
   79                         | string
   80                         | embedded_scm
   81                         | partial_markup
   82                         | full_markup_list
   83                         | context_modification
   84                         | partial_function "\etc"

   85 partial_function: MUSIC_FUNCTION function_arglist_partial
   86                 | EVENT_FUNCTION function_arglist_partial
   87                 | SCM_FUNCTION function_arglist_partial
   88                 | "\override" grob_prop_path '='
   89                 | "\set" context_prop_spec '='
   90                 | MUSIC_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          partial_function
   91                 | EVENT_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          partial_function
   92                 | SCM_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          partial_function
   93                 | "\override" grob_prop_path '=' partial_function
   94                 | "\set" context_prop_spec '=' partial_function
   95                 | MUSIC_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   96                 | EVENT_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   97                 | SCM_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function

   98 context_def_spec_block: "\context" '{' context_def_spec_body '}'

   99 context_mod_arg: embedded_scm

  101 context_mod_arg: $ composite_music

  102 context_def_spec_body: %empty
  103                      | context_def_spec_body context_mod
  104                      | context_def_spec_body context_modification
  105                      | context_def_spec_body context_mod_arg

  106 book_block: "\book" '{' book_body '}'

  107 book_body: %empty
  108          | BOOK_IDENTIFIER
  109          | book_body paper_block
  110          | book_body bookpart_block
  111          | book_body score_block
  112          | book_body composite_music
  113          | book_body full_markup
  114          | book_body full_markup_list
  115          | book_body SCM_TOKEN
  116          | book_body embedded_scm_active

  118 book_body: book_body $ lilypond_header
  119          | book_body error

  120 bookpart_block: "\bookpart" '{' bookpart_body '}'

  121 bookpart_body: %empty
  122              | BOOK_IDENTIFIER
  123              | bookpart_body paper_block
  124              | bookpart_body score_block
  125              | bookpart_body composite_music
  126              | bookpart_body full_markup
  127              | bookpart_body full_markup_list
  128              | bookpart_body SCM_TOKEN
  129              | bookpart_body embedded_scm_active

  131 bookpart_body: bookpart_body $ lilypond_header
  132              | bookpart_body error

  133 score_block: "\score" '{' score_body '}'

  134 score_body: score_items
  135           | score_body error

  136 score_item: embedded_scm
  137           | music
  138           | output_def

  139 score_items: %empty
  140            | score_items score_item

  142 score_items: score_items $ lilypond_header

  143 paper_block: output_def

  144 output_def: output_def_body '}'

  145 output_def_head: "\paper"
  146                | "\midi"
  147                | "\layout"

  148 output_def_head_with_mode_switch: output_def_head

  149 music_or_context_def: music_assign
  150                     | context_def_spec_block

  151 output_def_body: output_def_head_with_mode_switch '{'
  152                | output_def_body assignment
  153                | output_def_body embedded_scm_active
  154                | output_def_body SCM_TOKEN

  156 output_def_body: output_def_body $ music_or_context_def
  157                | output_def_body error

  158 tempo_event: "\tempo" steno_duration '=' tempo_range
  159            | "\tempo" text steno_duration '=' tempo_range
  160            | "\tempo" text

  161 music_list: %empty
  162           | music_list music_embedded
  163           | music_list error

  164 braced_music_list: '{' music_list '}'

  165 music: music_assign
  166      | lyric_element_music
  167      | pitch_as_music

  168 pitch_as_music: pitch_or_music

  169 music_embedded: music
  170               | music_embedded_backup
  171               | music_embedded_backup
                        "(backed-up?)"
                        lyric_element_music
  172               | multiplied_duration post_events

  173 music_embedded_backup: embedded_scm

  174 music_assign: simple_music
  175             | composite_music

  176 repeated_music: "\repeat" simple_string unsigned_number music
  177               | "\repeat"
                        simple_string
                        unsigned_number
                        music
                        "\alternative"
                        braced_music_list

  178 sequential_music: "\sequential" braced_music_list
  179                 | braced_music_list

  180 simultaneous_music: "\simultaneous" braced_music_list
  181                   | "<<" music_list ">>"

  182 simple_music: event_chord
  183             | music_property_def
  184             | context_change

  186 context_modification: "\with" $ '{' context_mod_list '}'
  187                     | "\with" CONTEXT_MOD_IDENTIFIER
  188                     | CONTEXT_MOD_IDENTIFIER
  189                     | "\with" context_modification_arg

  190 context_modification_arg: embedded_scm
  191                         | MUSIC_IDENTIFIER

  192 optional_context_mod: %empty
  193                     | context_modification

  194 context_mod_list: %empty
  195                 | context_mod_list context_mod
  196                 | context_mod_list CONTEXT_MOD_IDENTIFIER
  197                 | context_mod_list context_mod_arg

  198 context_prefix: "\context" symbol optional_id optional_context_mod
  199               | "\new" symbol optional_id optional_context_mod

  200 new_lyrics: "\addlyrics" optional_context_mod lyric_mode_music
  201           | new_lyrics
                    "\addlyrics"
                    optional_context_mod
                    lyric_mode_music

  202 basic_music: music_function_call
  203            | repeated_music
  204            | music_bare
  205            | "\lyricsto" simple_string lyric_mode_music
  206            | "\lyricsto" symbol '=' simple_string lyric_mode_music

  207 contextable_music: basic_music
  208                  | pitch_as_music
  209                  | event_chord

  210 contexted_basic_music: context_prefix contextable_music new_lyrics
  211                      | context_prefix contextable_music
  212                      | context_prefix contexted_basic_music

  213 composite_music: basic_music
  214                | contexted_basic_music
  215                | basic_music new_lyrics

  216 music_bare: mode_changed_music
  217           | MUSIC_IDENTIFIER
  218           | grouped_music_list

  219 grouped_music_list: simultaneous_music
  220                   | sequential_music

  221 symbol_list_arg: SYMBOL_LIST
  222                | SYMBOL_LIST '.' symbol_list_rev
  223                | SYMBOL_LIST ',' symbol_list_rev

  224 symbol_list_rev: symbol_list_part
  225                | symbol_list_rev '.' symbol_list_part
  226                | symbol_list_rev ',' symbol_list_part

  227 symbol_list_part: symbol_list_element

  228 symbol_list_element: STRING
  229                    | embedded_scm_bare
  230                    | UNSIGNED

  231 symbol_list_part_bare: STRING
  232                      | UNSIGNED

  233 function_arglist_nonbackup: function_arglist_common
  234                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  235                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  238                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  239                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  240                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    pitch_or_music
  241                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    multiplied_duration
  242                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    reparsed_rhythm
  243                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    bare_number_common
  244                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    SCM_ARG
  245                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    lyric_element_music
  246                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    symbol_list_arg

  247 reparsed_rhythm: DURATION_ARG dots multipliers post_events

  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  249                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  250                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  251                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  252                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  253                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  254                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER

  255 function_arglist_backup: function_arglist_common
  256                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 embedded_scm_arg
  257                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 post_event_nofinger
  258                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 pitch
  259                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 steno_tonic_pitch
  260                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 full_markup
  261                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 UNSIGNED
  262                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 REAL
  263                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  264                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  265                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 REAL
  266                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  267                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  268                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  269                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 STRING
  270                        | function_arglist_backup
                                 "(reparsed?)"
                                 pitch_or_music
  271                        | function_arglist_backup
                                 "(reparsed?)"
                                 bare_number_common
  272                        | function_arglist_backup
                                 "(reparsed?)"
                                 multiplied_duration
  273                        | function_arglist_backup
                                 "(reparsed?)"
                                 reparsed_rhythm
  274                        | function_arglist_backup
                                 "(reparsed?)"
                                 symbol_list_arg

  275 function_arglist: function_arglist_nonbackup
  276                 | "optional?"
                          "scheme?"
                          function_arglist_skip_nonbackup
                          "\default"

  277 function_arglist_skip_nonbackup: function_arglist_nonbackup
  278                                | "optional?"
                                         "scheme?"
                                         function_arglist_skip_nonbackup

  279 function_arglist_partial: "scheme?" function_arglist_optional
  280                         | "scheme?" function_arglist_partial_optional
  281                         | "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
  282                         | "optional?"
                                  "scheme?"
                                  function_arglist_partial

  283 function_arglist_partial_optional: "scheme?" function_arglist_optional
  284                                  | "scheme?"
                                           function_arglist_partial_optional
  285                                  | "optional?"
                                           "scheme?"
                                           function_arglist_backup
  286                                  | "optional?"
                                           "scheme?"
                                           function_arglist_partial_optional

  287 function_arglist_common: EXPECT_NO_MORE_ARGS
  288                        | "scheme?"
                                 function_arglist_optional
                                 embedded_scm_arg
  289                        | "scheme?"
                                 function_arglist_optional
                                 bare_number_common
  290                        | "scheme?"
                                 function_arglist_optional
                                 post_event_nofinger
  291                        | "scheme?"
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
  292                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 SCM_ARG
  293                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 lyric_element_music
  294                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 pitch_or_music
  295                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 bare_number_common
  296                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 multiplied_duration
  297                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 reparsed_rhythm
  298                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 symbol_list_arg

  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         SCM_IDENTIFIER
  300                                | "scheme?"
                                         function_arglist_optional
                                         pitch
  301                                | "scheme?"
                                         function_arglist_optional
                                         steno_tonic_pitch
  302                                | "scheme?"
                                         function_arglist_optional
                                         STRING
  303                                | "scheme?"
                                         function_arglist_optional
                                         full_markup
  304                                | "scheme?"
                                         function_arglist_optional
                                         UNSIGNED
  305                                | "scheme?"
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
  306                                | "scheme?"
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
  307                                | "scheme?"
                                         function_arglist_optional
                                         '-'
                                         REAL

  308 function_arglist_optional: function_arglist_backup
  309                          | "optional?"
                                   "scheme?"
                                   function_arglist_skip_backup
                                   "\default"
  310                          | function_arglist_skip_backup "(backed-up?)"

  311 function_arglist_skip_backup: function_arglist_backup
  312                             | "optional?"
                                      "scheme?"
                                      function_arglist_skip_backup

  313 music_function_call: MUSIC_FUNCTION function_arglist

  314 optional_id: %empty
  315            | '=' simple_string

  317 lyric_mode_music: $ grouped_music_list
  318                 | MUSIC_IDENTIFIER

  319 mode_changed_music: mode_changing_head grouped_music_list
  320                   | mode_changing_head_with_context
                            optional_context_mod
                            grouped_music_list

  321 mode_changing_head: "\notemode"
  322                   | "\drummode"
  323                   | "\figuremode"
  324                   | "\chordmode"
  325                   | "\lyricmode"

  326 mode_changing_head_with_context: "\drums"
  327                                | "\figures"
  328                                | "\chords"
  329                                | "\lyrics"

  330 context_change: "\change" symbol '=' simple_string

  331 property_path: symbol_list_rev

  332 property_operation: symbol '=' scalar
  333                   | "\unset" symbol
  334                   | "\override" revert_arg '=' scalar
  335                   | "\revert" revert_arg

  336 revert_arg: revert_arg_backup "(backed-up?)" symbol_list_arg

  337 revert_arg_backup: revert_arg_part

  338 revert_arg_part: symbol_list_part
  339                | revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         '.'
                         symbol_list_part
  340                | revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         ','
                         symbol_list_part
  341                | revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         symbol_list_part

  342 context_def_mod: "\consists"
  343                | "\remove"
  344                | "\accepts"
  345                | "\defaultchild"
  346                | "\denies"
  347                | "\alias"
  348                | "\type"
  349                | "\description"
  350                | "\name"

  351 context_mod: property_operation
  352            | context_def_mod STRING
  353            | context_def_mod embedded_scm

  354 grob_prop_spec: symbol_list_rev

  355 grob_prop_path: grob_prop_spec
  356               | grob_prop_spec property_path

  357 context_prop_spec: symbol_list_rev

  358 simple_revert_context: symbol_list_part

  359 music_property_def: "\override" grob_prop_path '=' scalar
  360                   | "\revert" simple_revert_context revert_arg
  361                   | "\set" context_prop_spec '=' scalar
  362                   | "\unset" context_prop_spec

  363 string: STRING
  364       | full_markup

  365 text: STRING
  366     | full_markup
  367     | embedded_scm_bare

  368 simple_string: STRING
  369              | embedded_scm_bare

  370 symbol: STRING
  371       | embedded_scm_bare

  372 scalar: embedded_scm_arg
  373       | pitch_or_music
  374       | SCM_IDENTIFIER
  375       | bare_number
  376       | '-' bare_number
  377       | string
  378       | symbol_list_part_bare '.' property_path
  379       | symbol_list_part_bare ',' property_path

  380 event_chord: simple_element post_events
  381            | CHORD_REPETITION optional_notemode_duration post_events
  382            | MULTI_MEASURE_REST optional_notemode_duration post_events
  383            | tempo_event
  384            | note_chord_element

  385 note_chord_element: chord_body optional_notemode_duration post_events

  386 chord_body: "<" chord_body_elements ">"
  387           | FIGURE_OPEN figure_list FIGURE_CLOSE

  388 chord_body_elements: %empty
  389                    | chord_body_elements chord_body_element

  390 chord_body_element: pitch_or_tonic_pitch
                            exclamations
                            questions
                            octave_check
                            post_events
  391                   | DRUM_PITCH post_events
  392                   | music_function_chord_body

  393 music_function_chord_body: music_function_call
  394                          | MUSIC_IDENTIFIER
  395                          | embedded_scm

  396 event_function_event: EVENT_FUNCTION function_arglist

  397 post_events: %empty
  398            | post_events post_event

  399 post_event_nofinger: direction_less_event
  400                    | script_dir music_function_call
  401                    | "--"
  402                    | "__"
  403                    | script_dir direction_reqd_event
  404                    | script_dir direction_less_event
  405                    | '^' fingering
  406                    | '_' fingering

  407 post_event: post_event_nofinger
  408           | '-' fingering

  409 string_number_event: E_UNSIGNED

  410 direction_less_event: string_number_event
  411                     | EVENT_IDENTIFIER
  412                     | tremolo_type
  413                     | event_function_event

  414 direction_reqd_event: gen_text_def
  415                     | script_abbreviation

  416 octave_check: %empty
  417             | '=' quotes

  418 quotes: %empty
  419       | sub_quotes
  420       | sup_quotes

  421 sup_quotes: '\''
  422           | sup_quotes '\''

  423 sub_quotes: ','
  424           | sub_quotes ','

  425 steno_pitch: NOTENAME_PITCH quotes

  426 steno_tonic_pitch: TONICNAME_PITCH quotes

  427 pitch: steno_pitch
  428      | PITCH_IDENTIFIER quotes

  429 pitch_or_tonic_pitch: pitch
  430                     | steno_tonic_pitch

  431 gen_text_def: full_markup
  432             | STRING
  433             | embedded_scm

  434 fingering: UNSIGNED

  435 script_abbreviation: '^'
  436                    | '+'
  437                    | '-'
  438                    | '!'
  439                    | ">"
  440                    | '.'
  441                    | '_'

  442 script_dir: '_'
  443           | '^'
  444           | '-'

  445 maybe_notemode_duration: %empty
  446                        | multiplied_duration

  447 optional_notemode_duration: maybe_notemode_duration

  448 steno_duration: UNSIGNED dots
  449               | DURATION_IDENTIFIER dots

  450 multiplied_duration: steno_duration multipliers

  451 dots: %empty
  452     | dots '.'

  453 multipliers: %empty
  454            | multipliers '*' UNSIGNED
  455            | multipliers '*' FRACTION

  456 tremolo_type: ':'
  457             | ':' UNSIGNED

  458 bass_number: UNSIGNED
  459            | STRING
  460            | full_markup
  461            | embedded_scm_bare

  462 figured_bass_alteration: '-'
  463                        | '+'
  464                        | '!'

  465 bass_figure: "_"
  466            | bass_number
  467            | bass_figure ']'
  468            | bass_figure figured_bass_alteration
  469            | bass_figure figured_bass_modification

  470 figured_bass_modification: "\+"
  471                          | "\!"
  472                          | '/'
  473                          | "\"

  474 br_bass_figure: bass_figure
  475               | '[' bass_figure

  476 figure_list: %empty
  477            | figure_list br_bass_figure

  478 optional_rest: %empty
  479              | "\rest"

  480 pitch_or_music: pitch
                        exclamations
                        questions
                        octave_check
                        maybe_notemode_duration
                        optional_rest
                        post_events
  481               | new_chord post_events

  482 simple_element: DRUM_PITCH optional_notemode_duration
  483               | RESTNAME optional_notemode_duration

  484 lyric_element: full_markup
  485              | STRING
  486              | LYRIC_ELEMENT

  487 lyric_element_music: lyric_element
                             optional_notemode_duration
                             post_events

  488 new_chord: steno_tonic_pitch maybe_notemode_duration
  489          | steno_tonic_pitch
                   optional_notemode_duration
                   chord_separator
                   chord_items

  490 chord_items: %empty
  491            | chord_items chord_item

  492 chord_separator: ":"
  493                | "^"
  494                | "/" steno_tonic_pitch
  495                | "/+" steno_tonic_pitch

  496 chord_item: chord_separator
  497           | step_numbers
  498           | CHORD_MODIFIER

  499 step_numbers: step_number
  500             | step_numbers '.' step_number

  501 step_number: UNSIGNED
  502            | UNSIGNED '+'
  503            | UNSIGNED "-"

  504 tempo_range: unsigned_number
  505            | unsigned_number '-' unsigned_number

  506 number_expression: number_expression '+' number_term
  507                  | number_expression '-' number_term
  508                  | number_term

  509 number_term: number_factor
  510            | number_factor '*' number_factor
  511            | number_factor '/' number_factor

  512 number_factor: '-' number_factor
  513              | bare_number

  514 bare_number_common: REAL
  515                   | NUMBER_IDENTIFIER
  516                   | REAL NUMBER_IDENTIFIER

  517 bare_number: bare_number_common
  518            | UNSIGNED
  519            | UNSIGNED NUMBER_IDENTIFIER

  520 unsigned_number: UNSIGNED
  521                | NUMBER_IDENTIFIER
  522                | embedded_scm

  523 exclamations: %empty
  524             | exclamations '!'

  525 questions: %empty
  526          | questions '?'

  528 full_markup_list: "\markuplist" $0 markup_list

  529 markup_mode: "\markup"

  530 full_markup: markup_mode markup_top

  531 partial_markup: markup_mode markup_partial_function "\etc"

  532 markup_top: markup_list
  533           | markup_head_1_list simple_markup
  534           | simple_markup

  536 markup_scm: embedded_scm $1 "(backed-up?)"

  537 markup_list: markup_composed_list
  538            | markup_uncomposed_list

  539 markup_uncomposed_list: markup_braced_list
  540                       | markup_command_list
  541                       | markup_scm MARKUPLIST_IDENTIFIER

  543 markup_uncomposed_list: "\score-lines" $2 '{' score_body '}'

  544 markup_composed_list: markup_head_1_list markup_uncomposed_list

  545 markup_braced_list: '{' markup_braced_list_body '}'

  546 markup_braced_list_body: %empty
  547                        | markup_braced_list_body markup
  548                        | markup_braced_list_body markup_list

  549 markup_command_list: MARKUP_LIST_FUNCTION markup_command_list_arguments

  550 markup_command_basic_arguments: "markup-list?"
                                        markup_command_list_arguments
                                        markup_list
  551                               | "scheme?"
                                        markup_command_list_arguments
                                        embedded_scm
  552                               | EXPECT_NO_MORE_ARGS

  553 markup_command_list_arguments: markup_command_basic_arguments
  554                              | "markup?"
                                       markup_command_list_arguments
                                       markup

  555 markup_partial_function: MARKUP_FUNCTION markup_arglist_partial
  556                        | markup_head_1_list
                                 MARKUP_FUNCTION
                                 markup_arglist_partial

  557 markup_arglist_partial: "markup?" markup_arglist_partial
  558                       | "scheme?" markup_arglist_partial
  559                       | "markup?" markup_command_list_arguments
  560                       | "scheme?" markup_command_list_arguments

  561 markup_head_1_item: MARKUP_FUNCTION
                            "markup?"
                            markup_command_list_arguments

  562 markup_head_1_list: markup_head_1_item
  563                   | markup_head_1_list markup_head_1_item

  564 simple_markup: STRING

  566 simple_markup: "\score" $3 '{' score_body '}'
  567              | MARKUP_FUNCTION markup_command_basic_arguments
  568              | markup_scm MARKUP_IDENTIFIER

  569 markup: markup_head_1_list simple_markup
  570       | simple_markup


Terminals, with rules where they appear



    251 252 253 254 256 257 258 259 260 261 262 263 264 265 266 267
    252 253 254 256 257 258 259 260 261 262 263 264 265 266 267 268
    268 269 276 278 279 280 281 282 283 284 285 286 288 289 290 291
    269 276 278 281 282 285 286 309 312
    292 293 294 295 296 297 298
    299 300 301 302 303 304 305 306 307 309 312 551 558 560
    501 502 503 518 519 520
    505 507 512
    564
"#{" (340) 3
"(backed-up?)" (335) 171 310 336 339 340 341 536
"(reparsed?)" (336) 240 241 242 243 244 245 246 270 271 272 273 274
"-" (320) 503
"--" (268) 401
"/" (321) 494
"/+" (317) 495
":" (319) 492
"<" (322) 386
"<<" (324) 181
">" (323) 386 439
">>" (325) 181
"\!" (327) 471
"\" (326) 473
"\+" (328) 470
"\accepts" (273) 344
"\addlyrics" (262) 200 201
"\alias" (274) 347
"\alternative" (260) 177
"\book" (275) 106
"\bookpart" (276) 120
"\change" (277) 330
"\chordmode" (278) 324
"\chords" (279) 328
"\consists" (280) 342
"\context" (281) 98 198
"\default" (282) 276 309
"\defaultchild" (283) 345
"\denies" (284) 346
"\description" (285) 349
"\drummode" (286) 322
"\drums" (287) 326
"\etc" (288) 84 531
"\figuremode" (289) 323
"\figures" (290) 327
"\header" (291) 61
"\layout" (293) 147
"\lyricmode" (294) 325
"\lyrics" (295) 329
"\lyricsto" (296) 205 206
"\markup" (297) 529
"\markuplist" (298) 528
"\midi" (299) 146
"\name" (300) 350
"\new" (316) 199
"\notemode" (301) 321
"\override" (302) 88 93 334 359
"\paper" (303) 145
"\remove" (304) 343
"\repeat" (259) 176 177
"\rest" (305) 479
"\revert" (306) 335 360
"\score" (307) 133 566
"\score-lines" (308) 543
"\sequential" (309) 178
"\set" (310) 89 94 361
"\simultaneous" (311) 180
"\tempo" (312) 158 159 160
"\type" (313) 348
"\unset" (314) 333 362
"\version-error" (292) 8 57
"\with" (315) 186 187 189
"^" (318) 493
"_" (331) 465
"__" (269) 402
"end of input" (0) 0
"markup-list?" (337) 550
"markup?" (333) 554 557 559 561
"optional?" (338) 95 96 97 234 235 236 237 238 239 248 249 250 251
"scheme?" (334) 90 91 92 95 96 97 234 235 236 237 238 239 248 249 250
'!' (33) 438 464 524
'*' (42) 454 455 510
'+' (43) 436 463 502 506
',' (44) 65 69 223 226 340 379 423 424
'-' (45) 47 235 236 237 264 265 266 291 306 307 376 408 437 444 462
'.' (46) 22 64 68 222 225 339 378 440 452 500
'/' (47) 472 511
':' (58) 456 457
'=' (61) 63 64 65 88 89 93 94 158 159 206 315 330 332 334 359 361 417
'?' (63) 526
'[' (91) 475
'\'' (39) 421 422
']' (93) 467
'^' (94) 405 435 443
'_' (95) 406 441 442
'{' (123) 61 98 106 120 133 151 164 186 543 545 566
'}' (125) 61 98 106 120 133 144 164 186 543 545 566
BOOK_IDENTIFIER (341) 13 108 122
CHORD_MODIFIER (342) 498
CHORD_REPETITION (343) 381
COMPOSITE (261)
CONTEXT_MOD_IDENTIFIER (344) 187 188 196
DRUM_PITCH (345) 391 482
DURATION_ARG (346) 247
DURATION_IDENTIFIER (270) 254 267 305 449
E_UNSIGNED (265) 409
error (256) 7 56 119 132 135 157 163
EVENT_FUNCTION (267) 86 91 96 396
EVENT_IDENTIFIER (266) 411
EXPECT_NO_MORE_ARGS (339) 287 552
FIGURE_CLOSE (329) 387
FIGURE_OPEN (330) 387
FRACTION (347) 30 78 455
LOOKUP_IDENTIFIER (348) 21 22
LYRIC_ELEMENT (349) 486
MARKUP_FUNCTION (350) 555 556 561 567
MARKUP_IDENTIFIER (352) 568
MARKUP_LIST_FUNCTION (351) 549
MARKUPLIST_IDENTIFIER (353) 541
MULTI_MEASURE_REST (332) 382
MUSIC_FUNCTION (354) 85 90 95 313
MUSIC_IDENTIFIER (355) 191 217 318 394
NOTENAME_PITCH (356) 425
NUMBER_IDENTIFIER (271) 49 237 263 266 291 515 516 519 521
PITCH_IDENTIFIER (357) 428
PREC_BOT (258)
PREC_TOP (272)
REAL (264) 236 262 265 307 514 516
RESTNAME (358) 483
SCM_ARG (359) 28 244 292 339 340 341
SCM_FUNCTION (360) 46 87 92 97
SCM_IDENTIFIER (361) 24 25 248 268 299 374
SCM_TOKEN (362) 18 23 29 115 128 154
STRING (363) 62 228 231 251 269 302 352 363 365 368 370 432 459 485
SYMBOL_LIST (364) 221 222 223
TONICNAME_PITCH (365) 426
UNARY_MINUS (366)
UNSIGNED (263) 49 230 232 235 253 261 264 304 306 434 448 454 457 458

Nonterminals, with rules where they appear












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    "#{"  shift, and go to state 1

    "(backed-up?)"  shift, and go to state 303

    "(backed-up?)"  shift, and go to state 543

    "(backed-up?)"  shift, and go to state 590

    "(backed-up?)"  shift, and go to state 634

    "(reparsed?)"  shift, and go to state 364

    "(reparsed?)"  shift, and go to state 365

    "(reparsed?)"  shift, and go to state 516

    "-"  shift, and go to state 801
    '+'  shift, and go to state 802

    "\addlyrics"  shift, and go to state 209

    "\addlyrics"  shift, and go to state 209

    "\addlyrics"  shift, and go to state 392

    "\addlyrics"  shift, and go to state 392

    "\alternative"  shift, and go to state 674

    "\default"  shift, and go to state 702

    "\default"  shift, and go to state 778

    "\etc"  shift, and go to state 294

    "\etc"  shift, and go to state 478

    "\header"  reduce using rule 117 ($@4)

    "\header"  reduce using rule 130 ($@5)

    "\header"  shift, and go to state 191

    "\header"  shift, and go to state 191

    "\header"  shift, and go to state 191

    "\header"  shift, and go to state 191

    "\rest"  shift, and go to state 804

    "end of input"  reduce using rule 50 (embedded_lilypond)

    "end of input"  reduce using rule 50 (embedded_lilypond)

    "end of input"  reduce using rule 55 (embedded_lilypond)

    "end of input"  shift, and go to state 5

    "markup?"  shift, and go to state 396

    "scheme?"  shift, and go to state 363

    "scheme?"  shift, and go to state 416

    "scheme?"  shift, and go to state 454

    "scheme?"  shift, and go to state 458

    "scheme?"  shift, and go to state 515

    "scheme?"  shift, and go to state 593

    "scheme?"  shift, and go to state 690

    "scheme?"  shift, and go to state 730

    "scheme?"  shift, and go to state 765

    "scheme?"  shift, and go to state 788

    "scheme?"  shift, and go to state 793

    "scheme?"  shift, and go to state 829

    "scheme?"  shift, and go to state 833

    "scheme?"  shift, and go to state 835

    $@1  go to state 4

    $@10  go to state 174

    $@11  go to state 405

    $@12  go to state 395

    $@13  go to state 394

    $default  accept

    $default  reduce using rule 10 (toplevel_expression)

    $default  reduce using rule 100 ($@3)

    $default  reduce using rule 100 ($@3)

    $default  reduce using rule 101 (context_mod_arg)

    $default  reduce using rule 102 (context_def_spec_body)

    $default  reduce using rule 103 (context_def_spec_body)

    $default  reduce using rule 104 (context_def_spec_body)

    $default  reduce using rule 105 (context_def_spec_body)

    $default  reduce using rule 106 (book_block)

    $default  reduce using rule 107 (book_body)

    $default  reduce using rule 108 (book_body)

    $default  reduce using rule 109 (book_body)

    $default  reduce using rule 11 (toplevel_expression)

    $default  reduce using rule 110 (book_body)

    $default  reduce using rule 111 (book_body)

    $default  reduce using rule 112 (book_body)

    $default  reduce using rule 113 (book_body)

    $default  reduce using rule 114 (book_body)

    $default  reduce using rule 115 (book_body)

    $default  reduce using rule 116 (book_body)

    $default  reduce using rule 118 (book_body)

    $default  reduce using rule 119 (book_body)

    $default  reduce using rule 12 (toplevel_expression)

    $default  reduce using rule 120 (bookpart_block)

    $default  reduce using rule 121 (bookpart_body)

    $default  reduce using rule 122 (bookpart_body)

    $default  reduce using rule 123 (bookpart_body)

    $default  reduce using rule 124 (bookpart_body)

    $default  reduce using rule 125 (bookpart_body)

    $default  reduce using rule 126 (bookpart_body)

    $default  reduce using rule 127 (bookpart_body)

    $default  reduce using rule 128 (bookpart_body)

    $default  reduce using rule 129 (bookpart_body)

    $default  reduce using rule 13 (toplevel_expression)

    $default  reduce using rule 131 (bookpart_body)

    $default  reduce using rule 132 (bookpart_body)

    $default  reduce using rule 133 (score_block)

    $default  reduce using rule 135 (score_body)

    $default  reduce using rule 136 (score_item)

    $default  reduce using rule 137 (score_item)

    $default  reduce using rule 138 (score_item)

    $default  reduce using rule 139 (score_items)

    $default  reduce using rule 139 (score_items)

    $default  reduce using rule 139 (score_items)

    $default  reduce using rule 14 (toplevel_expression)

    $default  reduce using rule 140 (score_items)

    $default  reduce using rule 142 (score_items)

    $default  reduce using rule 143 (paper_block)

    $default  reduce using rule 144 (output_def)

    $default  reduce using rule 145 (output_def_head)

    $default  reduce using rule 146 (output_def_head)

    $default  reduce using rule 147 (output_def_head)

    $default  reduce using rule 148 (output_def_head_with_mode_switch)

    $default  reduce using rule 149 (music_or_context_def)

    $default  reduce using rule 15 (toplevel_expression)

    $default  reduce using rule 150 (music_or_context_def)

    $default  reduce using rule 151 (output_def_body)

    $default  reduce using rule 152 (output_def_body)

    $default  reduce using rule 153 (output_def_body)

    $default  reduce using rule 154 (output_def_body)

    $default  reduce using rule 156 (output_def_body)

    $default  reduce using rule 157 (output_def_body)

    $default  reduce using rule 158 (tempo_event)

    $default  reduce using rule 159 (tempo_event)

    $default  reduce using rule 16 (toplevel_expression)

    $default  reduce using rule 160 (tempo_event)

    $default  reduce using rule 161 (music_list)

    $default  reduce using rule 161 (music_list)

    $default  reduce using rule 161 (music_list)

    $default  reduce using rule 162 (music_list)

    $default  reduce using rule 163 (music_list)

    $default  reduce using rule 164 (braced_music_list)

    $default  reduce using rule 165 (music)

    $default  reduce using rule 166 (music)

    $default  reduce using rule 167 (music)

    $default  reduce using rule 168 (pitch_as_music)

    $default  reduce using rule 169 (music_embedded)

    $default  reduce using rule 17 (toplevel_expression)

    $default  reduce using rule 170 (music_embedded)

    $default  reduce using rule 171 (music_embedded)

    $default  reduce using rule 172 (music_embedded)

    $default  reduce using rule 173 (music_embedded_backup)

    $default  reduce using rule 174 (music_assign)

    $default  reduce using rule 175 (music_assign)

    $default  reduce using rule 176 (repeated_music)

    $default  reduce using rule 177 (repeated_music)

    $default  reduce using rule 178 (sequential_music)

    $default  reduce using rule 179 (sequential_music)

    $default  reduce using rule 18 (toplevel_expression)

    $default  reduce using rule 180 (simultaneous_music)

    $default  reduce using rule 181 (simultaneous_music)

    $default  reduce using rule 182 (simple_music)

    $default  reduce using rule 183 (simple_music)

    $default  reduce using rule 184 (simple_music)

    $default  reduce using rule 185 ($@8)

    $default  reduce using rule 186 (context_modification)

    $default  reduce using rule 187 (context_modification)

    $default  reduce using rule 188 (context_modification)

    $default  reduce using rule 189 (context_modification)

    $default  reduce using rule 19 (toplevel_expression)

    $default  reduce using rule 190 (context_modification_arg)

    $default  reduce using rule 191 (context_modification_arg)

    $default  reduce using rule 192 (optional_context_mod)

    $default  reduce using rule 192 (optional_context_mod)

    $default  reduce using rule 192 (optional_context_mod)

    $default  reduce using rule 192 (optional_context_mod)

    $default  reduce using rule 192 (optional_context_mod)

    $default  reduce using rule 193 (optional_context_mod)

    $default  reduce using rule 194 (context_mod_list)

    $default  reduce using rule 195 (context_mod_list)

    $default  reduce using rule 196 (context_mod_list)

    $default  reduce using rule 197 (context_mod_list)

    $default  reduce using rule 198 (context_prefix)

    $default  reduce using rule 199 (context_prefix)

    $default  reduce using rule 2 ($@1)

    $default  reduce using rule 20 (toplevel_expression)

    $default  reduce using rule 200 (new_lyrics)

    $default  reduce using rule 201 (new_lyrics)

    $default  reduce using rule 202 (basic_music)

    $default  reduce using rule 203 (basic_music)

    $default  reduce using rule 204 (basic_music)

    $default  reduce using rule 205 (basic_music)

    $default  reduce using rule 206 (basic_music)

    $default  reduce using rule 207 (contextable_music)

    $default  reduce using rule 208 (contextable_music)

    $default  reduce using rule 209 (contextable_music)

    $default  reduce using rule 21 (lookup)

    $default  reduce using rule 210 (contexted_basic_music)

    $default  reduce using rule 211 (contexted_basic_music)

    $default  reduce using rule 212 (contexted_basic_music)

    $default  reduce using rule 213 (composite_music)

    $default  reduce using rule 214 (composite_music)

    $default  reduce using rule 215 (composite_music)

    $default  reduce using rule 216 (music_bare)

    $default  reduce using rule 217 (music_bare)

    $default  reduce using rule 218 (music_bare)

    $default  reduce using rule 219 (grouped_music_list)

    $default  reduce using rule 22 (lookup)

    $default  reduce using rule 220 (grouped_music_list)

    $default  reduce using rule 221 (symbol_list_arg)

    $default  reduce using rule 222 (symbol_list_arg)

    $default  reduce using rule 223 (symbol_list_arg)

    $default  reduce using rule 224 (symbol_list_rev)

    $default  reduce using rule 225 (symbol_list_rev)

    $default  reduce using rule 226 (symbol_list_rev)

    $default  reduce using rule 227 (symbol_list_part)

    $default  reduce using rule 228 (symbol_list_element)

    $default  reduce using rule 229 (symbol_list_element)

    $default  reduce using rule 23 (embedded_scm_bare)

    $default  reduce using rule 230 (symbol_list_element)

    $default  reduce using rule 233 (function_arglist_nonbackup)

    $default  reduce using rule 234 (function_arglist_nonbackup)

    $default  reduce using rule 235 (function_arglist_nonbackup)

    $default  reduce using rule 236 (function_arglist_nonbackup)

    $default  reduce using rule 237 (function_arglist_nonbackup)

    $default  reduce using rule 238 (function_arglist_nonbackup)

    $default  reduce using rule 239 (function_arglist_nonbackup)

    $default  reduce using rule 24 (embedded_scm_bare)

    $default  reduce using rule 240 (function_arglist_nonbackup)

    $default  reduce using rule 241 (function_arglist_nonbackup)

    $default  reduce using rule 242 (function_arglist_nonbackup)

    $default  reduce using rule 243 (function_arglist_nonbackup)

    $default  reduce using rule 244 (function_arglist_nonbackup)

    $default  reduce using rule 245 (function_arglist_nonbackup)

    $default  reduce using rule 246 (function_arglist_nonbackup)

    $default  reduce using rule 247 (reparsed_rhythm)

    $default  reduce using rule 248 (function_arglist_nonbackup_reparse)

    $default  reduce using rule 249 (function_arglist_nonbackup_reparse)

    $default  reduce using rule 25 (embedded_scm_active)

    $default  reduce using rule 250 (function_arglist_nonbackup_reparse)

    $default  reduce using rule 251 (function_arglist_nonbackup_reparse)

    $default  reduce using rule 252 (function_arglist_nonbackup_reparse)

    $default  reduce using rule 253 (function_arglist_nonbackup_reparse)

    $default  reduce using rule 254 (function_arglist_nonbackup_reparse)

    $default  reduce using rule 255 (function_arglist_backup)

    $default  reduce using rule 256 (function_arglist_backup)

    $default  reduce using rule 257 (function_arglist_backup)

    $default  reduce using rule 258 (function_arglist_backup)

    $default  reduce using rule 259 (function_arglist_backup)

    $default  reduce using rule 26 (embedded_scm_active)

    $default  reduce using rule 260 (function_arglist_backup)

    $default  reduce using rule 261 (function_arglist_backup)

    $default  reduce using rule 262 (function_arglist_backup)

    $default  reduce using rule 263 (function_arglist_backup)

    $default  reduce using rule 264 (function_arglist_backup)

    $default  reduce using rule 265 (function_arglist_backup)

    $default  reduce using rule 266 (function_arglist_backup)

    $default  reduce using rule 267 (function_arglist_backup)

    $default  reduce using rule 268 (function_arglist_backup)

    $default  reduce using rule 269 (function_arglist_backup)

    $default  reduce using rule 27 (embedded_scm_active)

    $default  reduce using rule 270 (function_arglist_backup)

    $default  reduce using rule 271 (function_arglist_backup)

    $default  reduce using rule 272 (function_arglist_backup)

    $default  reduce using rule 273 (function_arglist_backup)

    $default  reduce using rule 274 (function_arglist_backup)

    $default  reduce using rule 275 (function_arglist)

    $default  reduce using rule 276 (function_arglist)

    $default  reduce using rule 277 (function_arglist_skip_nonbackup)

    $default  reduce using rule 278 (function_arglist_skip_nonbackup)

    $default  reduce using rule 279 (function_arglist_partial)

    $default  reduce using rule 279 (function_arglist_partial)

    $default  reduce using rule 279 (function_arglist_partial)

    $default  reduce using rule 279 (function_arglist_partial)

    $default  reduce using rule 279 (function_arglist_partial)

    $default  reduce using rule 279 (function_arglist_partial)

    $default  reduce using rule 279 (function_arglist_partial)

    $default  reduce using rule 28 (embedded_scm_bare_arg)

    $default  reduce using rule 280 (function_arglist_partial)

    $default  reduce using rule 281 (function_arglist_partial)

    $default  reduce using rule 281 (function_arglist_partial)

    $default  reduce using rule 281 (function_arglist_partial)

    $default  reduce using rule 281 (function_arglist_partial)

    $default  reduce using rule 282 (function_arglist_partial)

    $default  reduce using rule 283 (function_arglist_partial_optional)

    $default  reduce using rule 284 (function_arglist_partial_optional)

    $default  reduce using rule 286 (function_arglist_partial_optional)

    $default  reduce using rule 287 (function_arglist_common)

    $default  reduce using rule 288 (function_arglist_common)

    $default  reduce using rule 289 (function_arglist_common)

    $default  reduce using rule 29 (embedded_scm_bare_arg)

    $default  reduce using rule 290 (function_arglist_common)

    $default  reduce using rule 291 (function_arglist_common)

    $default  reduce using rule 292 (function_arglist_common)

    $default  reduce using rule 293 (function_arglist_common)

    $default  reduce using rule 294 (function_arglist_common)

    $default  reduce using rule 295 (function_arglist_common)

    $default  reduce using rule 296 (function_arglist_common)

    $default  reduce using rule 297 (function_arglist_common)

    $default  reduce using rule 298 (function_arglist_common)

    $default  reduce using rule 299 (function_arglist_common_reparse)

    $default  reduce using rule 3 (start_symbol)

    $default  reduce using rule 30 (embedded_scm_bare_arg)

    $default  reduce using rule 300 (function_arglist_common_reparse)

    $default  reduce using rule 301 (function_arglist_common_reparse)

    $default  reduce using rule 302 (function_arglist_common_reparse)

    $default  reduce using rule 303 (function_arglist_common_reparse)

    $default  reduce using rule 304 (function_arglist_common_reparse)

    $default  reduce using rule 305 (function_arglist_common_reparse)

    $default  reduce using rule 306 (function_arglist_common_reparse)

    $default  reduce using rule 307 (function_arglist_common_reparse)

    $default  reduce using rule 309 (function_arglist_optional)

    $default  reduce using rule 31 (embedded_scm_bare_arg)

    $default  reduce using rule 310 (function_arglist_optional)

    $default  reduce using rule 311 (function_arglist_skip_backup)

    $default  reduce using rule 312 (function_arglist_skip_backup)

    $default  reduce using rule 312 (function_arglist_skip_backup)

    $default  reduce using rule 313 (music_function_call)

    $default  reduce using rule 314 (optional_id)

    $default  reduce using rule 314 (optional_id)

    $default  reduce using rule 315 (optional_id)

    $default  reduce using rule 316 ($@9)

    $default  reduce using rule 316 ($@9)

    $default  reduce using rule 316 ($@9)

    $default  reduce using rule 316 ($@9)

    $default  reduce using rule 317 (lyric_mode_music)

    $default  reduce using rule 318 (lyric_mode_music)

    $default  reduce using rule 319 (mode_changed_music)

    $default  reduce using rule 32 (embedded_scm_bare_arg)

    $default  reduce using rule 320 (mode_changed_music)

    $default  reduce using rule 321 (mode_changing_head)

    $default  reduce using rule 322 (mode_changing_head)

    $default  reduce using rule 323 (mode_changing_head)

    $default  reduce using rule 324 (mode_changing_head)

    $default  reduce using rule 325 (mode_changing_head)

    $default  reduce using rule 326 (mode_changing_head_with_context)

    $default  reduce using rule 327 (mode_changing_head_with_context)

    $default  reduce using rule 328 (mode_changing_head_with_context)

    $default  reduce using rule 329 (mode_changing_head_with_context)

    $default  reduce using rule 33 (embedded_scm_bare_arg)

    $default  reduce using rule 330 (context_change)

    $default  reduce using rule 331 (property_path)

    $default  reduce using rule 332 (property_operation)

    $default  reduce using rule 333 (property_operation)

    $default  reduce using rule 334 (property_operation)

    $default  reduce using rule 335 (property_operation)

    $default  reduce using rule 336 (revert_arg)

    $default  reduce using rule 337 (revert_arg_backup)

    $default  reduce using rule 338 (revert_arg_part)

    $default  reduce using rule 339 (revert_arg_part)

    $default  reduce using rule 34 (embedded_scm_bare_arg)

    $default  reduce using rule 340 (revert_arg_part)

    $default  reduce using rule 341 (revert_arg_part)

    $default  reduce using rule 342 (context_def_mod)

    $default  reduce using rule 343 (context_def_mod)

    $default  reduce using rule 344 (context_def_mod)

    $default  reduce using rule 345 (context_def_mod)

    $default  reduce using rule 346 (context_def_mod)

    $default  reduce using rule 347 (context_def_mod)

    $default  reduce using rule 348 (context_def_mod)

    $default  reduce using rule 349 (context_def_mod)

    $default  reduce using rule 35 (embedded_scm_bare_arg)

    $default  reduce using rule 350 (context_def_mod)

    $default  reduce using rule 351 (context_mod)

    $default  reduce using rule 352 (context_mod)

    $default  reduce using rule 353 (context_mod)

    $default  reduce using rule 354 (grob_prop_spec)

    $default  reduce using rule 355 (grob_prop_path)

    $default  reduce using rule 356 (grob_prop_path)

    $default  reduce using rule 357 (context_prop_spec)

    $default  reduce using rule 358 (simple_revert_context)

    $default  reduce using rule 359 (music_property_def)

    $default  reduce using rule 36 (embedded_scm_bare_arg)

    $default  reduce using rule 360 (music_property_def)

    $default  reduce using rule 361 (music_property_def)

    $default  reduce using rule 362 (music_property_def)

    $default  reduce using rule 364 (string)

    $default  reduce using rule 365 (text)

    $default  reduce using rule 366 (text)

    $default  reduce using rule 367 (text)

    $default  reduce using rule 368 (simple_string)

    $default  reduce using rule 369 (simple_string)

    $default  reduce using rule 37 (embedded_scm_bare_arg)

    $default  reduce using rule 370 (symbol)

    $default  reduce using rule 371 (symbol)

    $default  reduce using rule 372 (scalar)

    $default  reduce using rule 373 (scalar)

    $default  reduce using rule 374 (scalar)

    $default  reduce using rule 375 (scalar)

    $default  reduce using rule 376 (scalar)

    $default  reduce using rule 377 (scalar)

    $default  reduce using rule 378 (scalar)

    $default  reduce using rule 379 (scalar)

    $default  reduce using rule 38 (embedded_scm_bare_arg)

    $default  reduce using rule 380 (event_chord)

    $default  reduce using rule 381 (event_chord)

    $default  reduce using rule 382 (event_chord)

    $default  reduce using rule 383 (event_chord)

    $default  reduce using rule 384 (event_chord)

    $default  reduce using rule 385 (note_chord_element)

    $default  reduce using rule 386 (chord_body)

    $default  reduce using rule 387 (chord_body)

    $default  reduce using rule 388 (chord_body_elements)

    $default  reduce using rule 389 (chord_body_elements)

    $default  reduce using rule 39 (embedded_scm_bare_arg)

    $default  reduce using rule 390 (chord_body_element)

    $default  reduce using rule 391 (chord_body_element)

    $default  reduce using rule 392 (chord_body_element)

    $default  reduce using rule 393 (music_function_chord_body)

    $default  reduce using rule 394 (music_function_chord_body)

    $default  reduce using rule 395 (music_function_chord_body)

    $default  reduce using rule 396 (event_function_event)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 397 (post_events)

    $default  reduce using rule 398 (post_events)

    $default  reduce using rule 399 (post_event_nofinger)

    $default  reduce using rule 4 (lilypond)

    $default  reduce using rule 40 (embedded_scm)

    $default  reduce using rule 400 (post_event_nofinger)

    $default  reduce using rule 401 (post_event_nofinger)

    $default  reduce using rule 402 (post_event_nofinger)

    $default  reduce using rule 403 (post_event_nofinger)

    $default  reduce using rule 404 (post_event_nofinger)

    $default  reduce using rule 405 (post_event_nofinger)

    $default  reduce using rule 406 (post_event_nofinger)

    $default  reduce using rule 407 (post_event)

    $default  reduce using rule 408 (post_event)

    $default  reduce using rule 409 (string_number_event)

    $default  reduce using rule 41 (embedded_scm)

    $default  reduce using rule 410 (direction_less_event)

    $default  reduce using rule 411 (direction_less_event)

    $default  reduce using rule 412 (direction_less_event)

    $default  reduce using rule 413 (direction_less_event)

    $default  reduce using rule 414 (direction_reqd_event)

    $default  reduce using rule 415 (direction_reqd_event)

    $default  reduce using rule 416 (octave_check)

    $default  reduce using rule 416 (octave_check)

    $default  reduce using rule 417 (octave_check)

    $default  reduce using rule 418 (quotes)

    $default  reduce using rule 418 (quotes)

    $default  reduce using rule 418 (quotes)

    $default  reduce using rule 418 (quotes)

    $default  reduce using rule 419 (quotes)

    $default  reduce using rule 42 (embedded_scm)

    $default  reduce using rule 420 (quotes)

    $default  reduce using rule 421 (sup_quotes)

    $default  reduce using rule 422 (sup_quotes)

    $default  reduce using rule 423 (sub_quotes)

    $default  reduce using rule 424 (sub_quotes)

    $default  reduce using rule 425 (steno_pitch)

    $default  reduce using rule 426 (steno_tonic_pitch)

    $default  reduce using rule 427 (pitch)

    $default  reduce using rule 428 (pitch)

    $default  reduce using rule 429 (pitch_or_tonic_pitch)

    $default  reduce using rule 43 (embedded_scm_arg)

    $default  reduce using rule 430 (pitch_or_tonic_pitch)

    $default  reduce using rule 431 (gen_text_def)

    $default  reduce using rule 432 (gen_text_def)

    $default  reduce using rule 433 (gen_text_def)

    $default  reduce using rule 434 (fingering)

    $default  reduce using rule 434 (fingering)

    $default  reduce using rule 435 (script_abbreviation)

    $default  reduce using rule 436 (script_abbreviation)

    $default  reduce using rule 437 (script_abbreviation)

    $default  reduce using rule 438 (script_abbreviation)

    $default  reduce using rule 439 (script_abbreviation)

    $default  reduce using rule 44 (embedded_scm_arg)

    $default  reduce using rule 440 (script_abbreviation)

    $default  reduce using rule 441 (script_abbreviation)

    $default  reduce using rule 442 (script_dir)

    $default  reduce using rule 443 (script_dir)

    $default  reduce using rule 444 (script_dir)

    $default  reduce using rule 444 (script_dir)

    $default  reduce using rule 444 (script_dir)

    $default  reduce using rule 444 (script_dir)

    $default  reduce using rule 444 (script_dir)

    $default  reduce using rule 444 (script_dir)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 445 (maybe_notemode_duration)

    $default  reduce using rule 446 (maybe_notemode_duration)

    $default  reduce using rule 447 (optional_notemode_duration)

    $default  reduce using rule 448 (steno_duration)

    $default  reduce using rule 449 (steno_duration)

    $default  reduce using rule 45 (embedded_scm_arg)

    $default  reduce using rule 450 (multiplied_duration)

    $default  reduce using rule 451 (dots)

    $default  reduce using rule 451 (dots)

    $default  reduce using rule 451 (dots)

    $default  reduce using rule 451 (dots)

    $default  reduce using rule 452 (dots)

    $default  reduce using rule 453 (multipliers)

    $default  reduce using rule 453 (multipliers)

    $default  reduce using rule 454 (multipliers)

    $default  reduce using rule 455 (multipliers)

    $default  reduce using rule 456 (tremolo_type)

    $default  reduce using rule 457 (tremolo_type)

    $default  reduce using rule 458 (bass_number)

    $default  reduce using rule 459 (bass_number)

    $default  reduce using rule 46 (scm_function_call)

    $default  reduce using rule 460 (bass_number)

    $default  reduce using rule 461 (bass_number)

    $default  reduce using rule 462 (figured_bass_alteration)

    $default  reduce using rule 463 (figured_bass_alteration)

    $default  reduce using rule 464 (figured_bass_alteration)

    $default  reduce using rule 465 (bass_figure)

    $default  reduce using rule 466 (bass_figure)

    $default  reduce using rule 467 (bass_figure)

    $default  reduce using rule 468 (bass_figure)

    $default  reduce using rule 469 (bass_figure)

    $default  reduce using rule 47 (embedded_lilypond_number)

    $default  reduce using rule 470 (figured_bass_modification)

    $default  reduce using rule 471 (figured_bass_modification)

    $default  reduce using rule 472 (figured_bass_modification)

    $default  reduce using rule 473 (figured_bass_modification)

    $default  reduce using rule 474 (br_bass_figure)

    $default  reduce using rule 475 (br_bass_figure)

    $default  reduce using rule 476 (figure_list)

    $default  reduce using rule 477 (figure_list)

    $default  reduce using rule 478 (optional_rest)

    $default  reduce using rule 479 (optional_rest)

    $default  reduce using rule 48 (embedded_lilypond_number)

    $default  reduce using rule 480 (pitch_or_music)

    $default  reduce using rule 481 (pitch_or_music)

    $default  reduce using rule 482 (simple_element)

    $default  reduce using rule 483 (simple_element)

    $default  reduce using rule 484 (lyric_element)

    $default  reduce using rule 485 (lyric_element)

    $default  reduce using rule 486 (lyric_element)

    $default  reduce using rule 487 (lyric_element_music)

    $default  reduce using rule 489 (new_chord)

    $default  reduce using rule 49 (embedded_lilypond_number)

    $default  reduce using rule 490 (chord_items)

    $default  reduce using rule 491 (chord_items)

    $default  reduce using rule 492 (chord_separator)

    $default  reduce using rule 493 (chord_separator)

    $default  reduce using rule 494 (chord_separator)

    $default  reduce using rule 495 (chord_separator)

    $default  reduce using rule 496 (chord_item)

    $default  reduce using rule 497 (chord_item)

    $default  reduce using rule 498 (chord_item)

    $default  reduce using rule 499 (step_numbers)

    $default  reduce using rule 5 (lilypond)

    $default  reduce using rule 500 (step_numbers)

    $default  reduce using rule 501 (step_number)

    $default  reduce using rule 502 (step_number)

    $default  reduce using rule 503 (step_number)

    $default  reduce using rule 504 (tempo_range)

    $default  reduce using rule 505 (tempo_range)

    $default  reduce using rule 506 (number_expression)

    $default  reduce using rule 507 (number_expression)

    $default  reduce using rule 508 (number_expression)

    $default  reduce using rule 509 (number_term)

    $default  reduce using rule 51 (embedded_lilypond)

    $default  reduce using rule 510 (number_term)

    $default  reduce using rule 511 (number_term)

    $default  reduce using rule 512 (number_factor)

    $default  reduce using rule 513 (number_factor)

    $default  reduce using rule 514 (bare_number_common)

    $default  reduce using rule 515 (bare_number_common)

    $default  reduce using rule 516 (bare_number_common)

    $default  reduce using rule 517 (bare_number)

    $default  reduce using rule 518 (bare_number)

    $default  reduce using rule 519 (bare_number)

    $default  reduce using rule 52 (embedded_lilypond)

    $default  reduce using rule 520 (unsigned_number)

    $default  reduce using rule 521 (unsigned_number)

    $default  reduce using rule 522 (unsigned_number)

    $default  reduce using rule 523 (exclamations)

    $default  reduce using rule 523 (exclamations)

    $default  reduce using rule 524 (exclamations)

    $default  reduce using rule 525 (questions)

    $default  reduce using rule 525 (questions)

    $default  reduce using rule 526 (questions)

    $default  reduce using rule 527 ($@10)

    $default  reduce using rule 528 (full_markup_list)

    $default  reduce using rule 529 (markup_mode)

    $default  reduce using rule 53 (embedded_lilypond)

    $default  reduce using rule 530 (full_markup)

    $default  reduce using rule 531 (partial_markup)

    $default  reduce using rule 532 (markup_top)

    $default  reduce using rule 533 (markup_top)

    $default  reduce using rule 534 (markup_top)

    $default  reduce using rule 535 ($@11)

    $default  reduce using rule 536 (markup_scm)

    $default  reduce using rule 537 (markup_list)

    $default  reduce using rule 538 (markup_list)

    $default  reduce using rule 539 (markup_uncomposed_list)

    $default  reduce using rule 540 (markup_uncomposed_list)

    $default  reduce using rule 541 (markup_uncomposed_list)

    $default  reduce using rule 542 ($@12)

    $default  reduce using rule 543 (markup_uncomposed_list)

    $default  reduce using rule 544 (markup_composed_list)

    $default  reduce using rule 545 (markup_braced_list)

    $default  reduce using rule 546 (markup_braced_list_body)

    $default  reduce using rule 547 (markup_braced_list_body)

    $default  reduce using rule 548 (markup_braced_list_body)

    $default  reduce using rule 549 (markup_command_list)

    $default  reduce using rule 550 (markup_command_basic_arguments)

    $default  reduce using rule 551 (markup_command_basic_arguments)

    $default  reduce using rule 552 (markup_command_basic_arguments)

    $default  reduce using rule 553 (markup_command_list_arguments)

    $default  reduce using rule 554 (markup_command_list_arguments)

    $default  reduce using rule 555 (markup_partial_function)

    $default  reduce using rule 556 (markup_partial_function)

    $default  reduce using rule 557 (markup_arglist_partial)

    $default  reduce using rule 558 (markup_arglist_partial)

    $default  reduce using rule 559 (markup_arglist_partial)

    $default  reduce using rule 56 (embedded_lilypond)

    $default  reduce using rule 560 (markup_arglist_partial)

    $default  reduce using rule 561 (markup_head_1_item)

    $default  reduce using rule 562 (markup_head_1_list)

    $default  reduce using rule 563 (markup_head_1_list)

    $default  reduce using rule 564 (simple_markup)

    $default  reduce using rule 565 ($@13)

    $default  reduce using rule 566 (simple_markup)

    $default  reduce using rule 567 (simple_markup)

    $default  reduce using rule 568 (simple_markup)

    $default  reduce using rule 569 (markup)

    $default  reduce using rule 57 (embedded_lilypond)

    $default  reduce using rule 570 (markup)

    $default  reduce using rule 58 (lilypond_header_body)

    $default  reduce using rule 59 (lilypond_header_body)

    $default  reduce using rule 6 (lilypond)

    $default  reduce using rule 60 (lilypond_header_body)

    $default  reduce using rule 61 (lilypond_header)

    $default  reduce using rule 62 (assignment_id)

    $default  reduce using rule 63 (assignment)

    $default  reduce using rule 64 (assignment)

    $default  reduce using rule 65 (assignment)

    $default  reduce using rule 66 (identifier_init)

    $default  reduce using rule 67 (identifier_init)

    $default  reduce using rule 68 (identifier_init)

    $default  reduce using rule 69 (identifier_init)

    $default  reduce using rule 7 (lilypond)

    $default  reduce using rule 70 (identifier_init)

    $default  reduce using rule 71 (identifier_init_nonumber)

    $default  reduce using rule 72 (identifier_init_nonumber)

    $default  reduce using rule 73 (identifier_init_nonumber)

    $default  reduce using rule 74 (identifier_init_nonumber)

    $default  reduce using rule 75 (identifier_init_nonumber)

    $default  reduce using rule 76 (identifier_init_nonumber)

    $default  reduce using rule 77 (identifier_init_nonumber)

    $default  reduce using rule 78 (identifier_init_nonumber)

    $default  reduce using rule 79 (identifier_init_nonumber)

    $default  reduce using rule 8 (lilypond)

    $default  reduce using rule 80 (identifier_init_nonumber)

    $default  reduce using rule 81 (identifier_init_nonumber)

    $default  reduce using rule 82 (identifier_init_nonumber)

    $default  reduce using rule 83 (identifier_init_nonumber)

    $default  reduce using rule 84 (identifier_init_nonumber)

    $default  reduce using rule 85 (partial_function)

    $default  reduce using rule 86 (partial_function)

    $default  reduce using rule 87 (partial_function)

    $default  reduce using rule 88 (partial_function)

    $default  reduce using rule 88 (partial_function)

    $default  reduce using rule 89 (partial_function)

    $default  reduce using rule 89 (partial_function)

    $default  reduce using rule 90 (partial_function)

    $default  reduce using rule 91 (partial_function)

    $default  reduce using rule 92 (partial_function)

    $default  reduce using rule 93 (partial_function)

    $default  reduce using rule 94 (partial_function)

    $default  reduce using rule 95 (partial_function)

    $default  reduce using rule 96 (partial_function)

    $default  reduce using rule 97 (partial_function)

    $default  reduce using rule 98 (context_def_spec_block)

    $default  reduce using rule 99 (context_mod_arg)

    '!'  shift, and go to state 471

    '!'  shift, and go to state 471

    '*'  shift, and go to state 473

    '*'  shift, and go to state 473

    '*'  shift, and go to state 574
    '/'  shift, and go to state 575

    ','   shift, and go to state 280
    '\''  shift, and go to state 281

    ','   shift, and go to state 280
    '\''  shift, and go to state 281

    ','   shift, and go to state 280
    '\''  shift, and go to state 281

    ','   shift, and go to state 280
    '\''  shift, and go to state 281

    ','  shift, and go to state 456

    '-'  shift, and go to state 572
    '+'  shift, and go to state 573

    '-'  shift, and go to state 747

    '.'  shift, and go to state 180

    '.'  shift, and go to state 411

    '.'  shift, and go to state 411

    '.'  shift, and go to state 411

    '.'  shift, and go to state 419
    ','  shift, and go to state 420

    '.'  shift, and go to state 419
    ','  shift, and go to state 420

    '.'  shift, and go to state 419
    ','  shift, and go to state 420

    '.'  shift, and go to state 419
    ','  shift, and go to state 420

    '.'  shift, and go to state 419
    ','  shift, and go to state 420

    '.'  shift, and go to state 419
    ','  shift, and go to state 420

    '.'  shift, and go to state 569
    ','  shift, and go to state 570

    '.'  shift, and go to state 704
    ','  shift, and go to state 705

    '.'  shift, and go to state 742
    ','  shift, and go to state 743

    '.'  shift, and go to state 803

    '='  shift, and go to state 341

    '='  shift, and go to state 341

    '='  shift, and go to state 346

    '='  shift, and go to state 417

    '='  shift, and go to state 422

    '='  shift, and go to state 427

    '='  shift, and go to state 429

    '='  shift, and go to state 564

    '='  shift, and go to state 576

    '='  shift, and go to state 637

    '='  shift, and go to state 658

    '='  shift, and go to state 659

    '='  shift, and go to state 663
    '?'  shift, and go to state 664

    '='  shift, and go to state 663
    '?'  shift, and go to state 664

    '='  shift, and go to state 738

    '='  shift, and go to state 790

    '='  shift, and go to state 830

    '='  shift, and go to state 831

    '\''  shift, and go to state 455

    '{'  shift, and go to state 165

    '{'  shift, and go to state 166

    '{'  shift, and go to state 175

    '{'  shift, and go to state 196

    '{'  shift, and go to state 367

    '{'  shift, and go to state 40

    '{'  shift, and go to state 40

    '{'  shift, and go to state 40

    '{'  shift, and go to state 430

    '{'  shift, and go to state 579

    '{'  shift, and go to state 580

    0 $accept: . start_symbol "end of input"

    0 $accept: start_symbol "end of input" .

    0 $accept: start_symbol . "end of input"

    3 start_symbol: "#{" $@1 . embedded_lilypond

    3 start_symbol: "#{" $@1 embedded_lilypond .

    3 start_symbol: "#{" . $@1 embedded_lilypond

    5 lilypond: lilypond toplevel_expression .

    6 lilypond: lilypond assignment .

    7 lilypond: lilypond error .

    8 lilypond: lilypond "\version-error" .

    book_body  go to state 338

    BOOK_IDENTIFIER  shift, and go to state 337

    BOOK_IDENTIFIER  shift, and go to state 339

    bookpart_body  go to state 340

    braced_music_list  go to state 176

    braced_music_list  go to state 177

    braced_music_list  go to state 764

    chord_body_elements  go to state 270

    chord_items  go to state 662

    chord_separator  go to state 470

    context_def_spec_body  go to state 418

    context_mod_list  go to state 640

    dots  go to state 233

    dots  go to state 233

    dots  go to state 242

    dots  go to state 703

    error  shift, and go to state 507
    '}'    shift, and go to state 508

    error  shift, and go to state 507
    '}'    shift, and go to state 786

    error  shift, and go to state 507
    '}'    shift, and go to state 787

    exclamations  go to state 308

    exclamations  go to state 642

    figure_list  go to state 271

    fingering  go to state 240

    fingering  go to state 241

    fingering  go to state 293

    function_arglist_partial  go to state 238

    function_arglist_partial  go to state 279

    function_arglist_partial  go to state 289

    lilypond_header  go to state 192

    lilypond_header  go to state 675

    lilypond_header  go to state 676

    lilypond_header  go to state 678

    lilypond_header_body  go to state 563

    lyric_mode_music  go to state 344
    $@9               go to state 345

    lyric_mode_music  go to state 577
    $@9               go to state 345

    lyric_mode_music  go to state 677
    $@9               go to state 345

    lyric_mode_music  go to state 717
    $@9               go to state 345

    markup_braced_list_body  go to state 404

    markup_command_basic_arguments  go to state 400

    MARKUP_IDENTIFIER  shift, and go to state 406

    MARKUPLIST_IDENTIFIER  shift, and go to state 407

    multipliers  go to state 325

    multipliers  go to state 783

    MUSIC_IDENTIFIER  shift, and go to state 343

    MUSIC_IDENTIFIER  shift, and go to state 343

    MUSIC_IDENTIFIER  shift, and go to state 343

    MUSIC_IDENTIFIER  shift, and go to state 343

    music_list  go to state 179

    music_list  go to state 190

    music_list  go to state 461

    new_lyrics  go to state 210

    new_lyrics  go to state 390

    NUMBER_IDENTIFIER  shift, and go to state 232

    NUMBER_IDENTIFIER  shift, and go to state 232

    NUMBER_IDENTIFIER  shift, and go to state 234

    NUMBER_IDENTIFIER  shift, and go to state 565

    NUMBER_IDENTIFIER  shift, and go to state 565

    octave_check  go to state 665

    octave_check  go to state 800

    optional_id  go to state 342

    optional_id  go to state 353

    optional_rest  go to state 805

    partial_function  go to state 594

    partial_function  go to state 628

    partial_function  go to state 635

    partial_function  go to state 654

    partial_function  go to state 656

    partial_function  go to state 731

    partial_function  go to state 753

    partial_function  go to state 754

    post_events  go to state 305

    post_events  go to state 326

    post_events  go to state 326

    post_events  go to state 327

    post_events  go to state 329

    post_events  go to state 451

    post_events  go to state 452

    post_events  go to state 463

    post_events  go to state 474

    post_events  go to state 571

    post_events  go to state 641

    post_events  go to state 810

    post_events  go to state 820

    post_events  go to state 822

    questions  go to state 472

    questions  go to state 752

    score_body   go to state 351
    score_items  go to state 352

    score_body   go to state 718
    score_items  go to state 352

    score_body   go to state 719
    score_items  go to state 352

    start_symbol  go to state 2
    lilypond      go to state 3

    steno_duration  go to state 428

    steno_tonic_pitch  go to state 660

    steno_tonic_pitch  go to state 661

    step_number  go to state 821

    symbol_list_arg  go to state 745

    TONICNAME_PITCH  shift, and go to state 110

    TONICNAME_PITCH  shift, and go to state 110

    UNSIGNED  shift, and go to state 231

    UNSIGNED  shift, and go to state 239

    UNSIGNED  shift, and go to state 239

    UNSIGNED  shift, and go to state 239

    UNSIGNED  shift, and go to state 755
   10 toplevel_expression: $@2 . lilypond_header
   10 toplevel_expression: $@2 lilypond_header .
   11 toplevel_expression: book_block .
   12 toplevel_expression: bookpart_block .
   13 toplevel_expression: BOOK_IDENTIFIER .
   14 toplevel_expression: score_block .
   15 toplevel_expression: composite_music .
   16 toplevel_expression: full_markup .
   17 toplevel_expression: full_markup_list .
   18 toplevel_expression: SCM_TOKEN .
   19 toplevel_expression: embedded_scm_active .
   20 toplevel_expression: output_def .
   21 lookup: LOOKUP_IDENTIFIER .
   22       | LOOKUP_IDENTIFIER . '.' symbol_list_rev
   22 lookup: LOOKUP_IDENTIFIER '.' . symbol_list_rev
   22 lookup: LOOKUP_IDENTIFIER '.' symbol_list_rev .
   23 embedded_scm_bare: SCM_TOKEN .
   24 embedded_scm_bare: SCM_IDENTIFIER .
   25 embedded_scm_active: SCM_IDENTIFIER .
   26 embedded_scm_active: scm_function_call .
   27 embedded_scm_active: lookup .
   28 embedded_scm_bare_arg: SCM_ARG .
   29 embedded_scm_bare_arg: SCM_TOKEN .
   30 embedded_scm_bare_arg: FRACTION .
   31 embedded_scm_bare_arg: partial_markup .
   32 embedded_scm_bare_arg: full_markup_list .
   33 embedded_scm_bare_arg: context_modification .
   34 embedded_scm_bare_arg: score_block .
   35 embedded_scm_bare_arg: context_def_spec_block .
   36 embedded_scm_bare_arg: book_block .
   37 embedded_scm_bare_arg: bookpart_block .
   38 embedded_scm_bare_arg: output_def .
   39 embedded_scm_bare_arg: lookup .
   40 embedded_scm: embedded_scm_bare .
   40 embedded_scm: embedded_scm_bare .
   41 embedded_scm: scm_function_call .
   42 embedded_scm: lookup .
   43 embedded_scm_arg: embedded_scm_bare_arg .
   44 embedded_scm_arg: scm_function_call .
   45 embedded_scm_arg: music_assign .
   46 scm_function_call: SCM_FUNCTION . function_arglist
   46 scm_function_call: SCM_FUNCTION . function_arglist
   46 scm_function_call: SCM_FUNCTION function_arglist .
   47 embedded_lilypond_number: '-' . embedded_lilypond_number
   47 embedded_lilypond_number: '-' embedded_lilypond_number .
   48 embedded_lilypond_number: bare_number_common .
   49 embedded_lilypond_number: UNSIGNED . NUMBER_IDENTIFIER
   49 embedded_lilypond_number: UNSIGNED . NUMBER_IDENTIFIER
   49 embedded_lilypond_number: UNSIGNED NUMBER_IDENTIFIER .
   51 embedded_lilypond: identifier_init_nonumber .
   52 embedded_lilypond: embedded_lilypond_number .
   53 embedded_lilypond: post_event . post_events
   53 embedded_lilypond: post_event post_events .
   54 embedded_lilypond: multiplied_duration .
   55 embedded_lilypond: music_embedded . music_embedded music_list
   55 embedded_lilypond: music_embedded music_embedded . music_list
   55 embedded_lilypond: music_embedded music_embedded music_list .
   56 embedded_lilypond: error .
   57 embedded_lilypond: "\version-error" . embedded_lilypond
   57 embedded_lilypond: "\version-error" embedded_lilypond .
   59 lilypond_header_body: lilypond_header_body . assignment
   59 lilypond_header_body: lilypond_header_body assignment .
   60                     | lilypond_header_body . embedded_scm
   60 lilypond_header_body: lilypond_header_body embedded_scm .
   61 lilypond_header: "\header" '{' . lilypond_header_body '}'
   61 lilypond_header: "\header" '{' lilypond_header_body '}' .
   61 lilypond_header: "\header" '{' lilypond_header_body . '}'
   61 lilypond_header: "\header" . '{' lilypond_header_body '}'
   62 assignment_id: STRING .
   63 assignment: assignment_id '=' . identifier_init
   63 assignment: assignment_id '=' identifier_init .
   63 assignment: assignment_id . '=' identifier_init
   64           | assignment_id . '.' property_path '=' identifier_init
   64 assignment: assignment_id '.' . property_path '=' identifier_init
   64 assignment: assignment_id '.' property_path '=' . identifier_init
   64 assignment: assignment_id '.' property_path '=' identifier_init .
   64 assignment: assignment_id '.' property_path . '=' identifier_init
   65           | assignment_id . ',' property_path '=' identifier_init
   65 assignment: assignment_id ',' . property_path '=' identifier_init
   65 assignment: assignment_id ',' property_path '=' . identifier_init
   65 assignment: assignment_id ',' property_path '=' identifier_init .
   65 assignment: assignment_id ',' property_path . '=' identifier_init
   66 identifier_init: identifier_init_nonumber .
   67 identifier_init: number_expression .
   68 identifier_init: symbol_list_part_bare '.' . property_path
   68 identifier_init: symbol_list_part_bare '.' property_path .
   68 identifier_init: symbol_list_part_bare . '.' property_path
   69                | symbol_list_part_bare . ',' property_path
   69 identifier_init: symbol_list_part_bare ',' . property_path
   69 identifier_init: symbol_list_part_bare ',' property_path .
   70 identifier_init: post_event_nofinger . post_events
   70 identifier_init: post_event_nofinger post_events .
   71 identifier_init_nonumber: score_block .
   72 identifier_init_nonumber: book_block .
   73 identifier_init_nonumber: bookpart_block .
   74 identifier_init_nonumber: output_def .
   75 identifier_init_nonumber: context_def_spec_block .
   76 identifier_init_nonumber: music_assign .
   76 identifier_init_nonumber: music_assign .
   77 identifier_init_nonumber: pitch_or_music .
   77 identifier_init_nonumber: pitch_or_music .
   78 identifier_init_nonumber: FRACTION .
   79 identifier_init_nonumber: string .
   80 identifier_init_nonumber: embedded_scm .
   80 identifier_init_nonumber: embedded_scm .
   81 identifier_init_nonumber: partial_markup .
   82 identifier_init_nonumber: full_markup_list .
   83 identifier_init_nonumber: context_modification .
   84 identifier_init_nonumber: partial_function "\etc" .
   84 identifier_init_nonumber: partial_function . "\etc"
   85 partial_function: MUSIC_FUNCTION . function_arglist_partial
   85 partial_function: MUSIC_FUNCTION . function_arglist_partial
   85 partial_function: MUSIC_FUNCTION function_arglist_partial .
   86 partial_function: EVENT_FUNCTION . function_arglist_partial
   86 partial_function: EVENT_FUNCTION . function_arglist_partial
   86 partial_function: EVENT_FUNCTION function_arglist_partial .
   87 partial_function: SCM_FUNCTION . function_arglist_partial
   87 partial_function: SCM_FUNCTION . function_arglist_partial
   87 partial_function: SCM_FUNCTION function_arglist_partial .
   88 partial_function: "\override" . grob_prop_path '='
   88 partial_function: "\override" . grob_prop_path '='
   88 partial_function: "\override" grob_prop_path '=' .
   88 partial_function: "\override" grob_prop_path '=' .
   88 partial_function: "\override" grob_prop_path . '='
   88 partial_function: "\override" grob_prop_path . '='
   89 partial_function: "\set" . context_prop_spec '='
   89 partial_function: "\set" . context_prop_spec '='
   89 partial_function: "\set" context_prop_spec '=' .
   89 partial_function: "\set" context_prop_spec '=' .
   89 partial_function: "\set" context_prop_spec . '='
   89 partial_function: "\set" context_prop_spec . '='
   90                 | MUSIC_FUNCTION
                          .
                          "scheme?"
                          function_arglist_optional
                          partial_function
   90                 | MUSIC_FUNCTION
                          .
                          "scheme?"
                          function_arglist_optional
                          partial_function
   90 partial_function: MUSIC_FUNCTION
                          "scheme?"
                          .
                          function_arglist_optional
                          partial_function
   90 partial_function: MUSIC_FUNCTION
                          "scheme?"
                          .
                          function_arglist_optional
                          partial_function
   90 partial_function: MUSIC_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          .
                          partial_function
   90 partial_function: MUSIC_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          .
                          partial_function
   90 partial_function: MUSIC_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          partial_function
                          .
   91                 | EVENT_FUNCTION
                          .
                          "scheme?"
                          function_arglist_optional
                          partial_function
   91                 | EVENT_FUNCTION
                          .
                          "scheme?"
                          function_arglist_optional
                          partial_function
   91 partial_function: EVENT_FUNCTION
                          "scheme?"
                          .
                          function_arglist_optional
                          partial_function
   91 partial_function: EVENT_FUNCTION
                          "scheme?"
                          .
                          function_arglist_optional
                          partial_function
   91 partial_function: EVENT_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          .
                          partial_function
   91 partial_function: EVENT_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          .
                          partial_function
   91 partial_function: EVENT_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          partial_function
                          .
   92                 | SCM_FUNCTION
                          .
                          "scheme?"
                          function_arglist_optional
                          partial_function
   92                 | SCM_FUNCTION
                          .
                          "scheme?"
                          function_arglist_optional
                          partial_function
   92 partial_function: SCM_FUNCTION
                          "scheme?"
                          .
                          function_arglist_optional
                          partial_function
   92 partial_function: SCM_FUNCTION
                          "scheme?"
                          .
                          function_arglist_optional
                          partial_function
   92 partial_function: SCM_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          .
                          partial_function
   92 partial_function: SCM_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          .
                          partial_function
   92 partial_function: SCM_FUNCTION
                          "scheme?"
                          function_arglist_optional
                          partial_function
                          .
   93                 | "\override" . grob_prop_path '=' partial_function
   93                 | "\override" . grob_prop_path '=' partial_function
   93                 | "\override" grob_prop_path '=' . partial_function
   93                 | "\override" grob_prop_path '=' . partial_function
   93                 | "\override" grob_prop_path . '=' partial_function
   93                 | "\override" grob_prop_path . '=' partial_function
   93 partial_function: "\override" grob_prop_path '=' partial_function .
   94                 | "\set" . context_prop_spec '=' partial_function
   94                 | "\set" . context_prop_spec '=' partial_function
   94                 | "\set" context_prop_spec '=' . partial_function
   94                 | "\set" context_prop_spec '=' . partial_function
   94                 | "\set" context_prop_spec . '=' partial_function
   94                 | "\set" context_prop_spec . '=' partial_function
   94 partial_function: "\set" context_prop_spec '=' partial_function .
   95                 | MUSIC_FUNCTION
                          .
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   95                 | MUSIC_FUNCTION
                          .
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   95 partial_function: MUSIC_FUNCTION
                          "optional?"
                          "scheme?"
                          .
                          function_arglist_nonbackup
                          partial_function
   95 partial_function: MUSIC_FUNCTION
                          "optional?"
                          "scheme?"
                          .
                          function_arglist_nonbackup
                          partial_function
   95 partial_function: MUSIC_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          .
                          partial_function
   95 partial_function: MUSIC_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          .
                          partial_function
   95 partial_function: MUSIC_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
                          .
   95 partial_function: MUSIC_FUNCTION
                          "optional?"
                          .
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   95 partial_function: MUSIC_FUNCTION
                          "optional?"
                          .
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   96                 | EVENT_FUNCTION
                          .
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   96                 | EVENT_FUNCTION
                          .
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   96 partial_function: EVENT_FUNCTION
                          "optional?"
                          "scheme?"
                          .
                          function_arglist_nonbackup
                          partial_function
   96 partial_function: EVENT_FUNCTION
                          "optional?"
                          "scheme?"
                          .
                          function_arglist_nonbackup
                          partial_function
   96 partial_function: EVENT_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          .
                          partial_function
   96 partial_function: EVENT_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          .
                          partial_function
   96 partial_function: EVENT_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
                          .
   96 partial_function: EVENT_FUNCTION
                          "optional?"
                          .
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   96 partial_function: EVENT_FUNCTION
                          "optional?"
                          .
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   97                 | SCM_FUNCTION
                          .
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   97                 | SCM_FUNCTION
                          .
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   97 partial_function: SCM_FUNCTION
                          "optional?"
                          "scheme?"
                          .
                          function_arglist_nonbackup
                          partial_function
   97 partial_function: SCM_FUNCTION
                          "optional?"
                          "scheme?"
                          .
                          function_arglist_nonbackup
                          partial_function
   97 partial_function: SCM_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          .
                          partial_function
   97 partial_function: SCM_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          .
                          partial_function
   97 partial_function: SCM_FUNCTION
                          "optional?"
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
                          .
   97 partial_function: SCM_FUNCTION
                          "optional?"
                          .
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   97 partial_function: SCM_FUNCTION
                          "optional?"
                          .
                          "scheme?"
                          function_arglist_nonbackup
                          partial_function
   98 context_def_spec_block: "\context" '{' . context_def_spec_body '}'
   98 context_def_spec_block: "\context" '{' context_def_spec_body '}' .
   98 context_def_spec_block: "\context" '{' context_def_spec_body . '}'
   98 context_def_spec_block: "\context" . '{' context_def_spec_body '}'
   99 context_mod_arg: embedded_scm .
  101 context_mod_arg: $@3 . composite_music
  101 context_mod_arg: $@3 composite_music .
  103 context_def_spec_body: context_def_spec_body . context_mod
  103 context_def_spec_body: context_def_spec_body context_mod .
  104                      | context_def_spec_body . context_modification
  104 context_def_spec_body: context_def_spec_body context_modification .
  105                      | context_def_spec_body . context_mod_arg
  105 context_def_spec_body: context_def_spec_body context_mod_arg .
  106 book_block: "\book" '{' . book_body '}'
  106 book_block: "\book" '{' book_body '}' .
  106 book_block: "\book" '{' book_body . '}'
  106 book_block: "\book" . '{' book_body '}'
  108 book_body: BOOK_IDENTIFIER .
  109 book_body: book_body . paper_block
  109 book_body: book_body paper_block .
  110          | book_body . bookpart_block
  110 book_body: book_body bookpart_block .
  111          | book_body . score_block
  111 book_body: book_body score_block .
  112          | book_body . composite_music
  112 book_body: book_body composite_music .
  113          | book_body . full_markup
  113 book_body: book_body full_markup .
  114          | book_body . full_markup_list
  114 book_body: book_body full_markup_list .
  115          | book_body . SCM_TOKEN
  115 book_body: book_body SCM_TOKEN .
  116          | book_body . embedded_scm_active
  116 book_body: book_body embedded_scm_active .
  118          | book_body . $@4 lilypond_header
  118 book_body: book_body $@4 . lilypond_header
  118 book_body: book_body $@4 lilypond_header .
  119          | book_body . error
  119 book_body: book_body error .
  120 bookpart_block: "\bookpart" '{' . bookpart_body '}'
  120 bookpart_block: "\bookpart" '{' bookpart_body '}' .
  120 bookpart_block: "\bookpart" '{' bookpart_body . '}'
  120 bookpart_block: "\bookpart" . '{' bookpart_body '}'
  122 bookpart_body: BOOK_IDENTIFIER .
  123 bookpart_body: bookpart_body . paper_block
  123 bookpart_body: bookpart_body paper_block .
  124              | bookpart_body . score_block
  124 bookpart_body: bookpart_body score_block .
  125              | bookpart_body . composite_music
  125 bookpart_body: bookpart_body composite_music .
  126              | bookpart_body . full_markup
  126 bookpart_body: bookpart_body full_markup .
  127              | bookpart_body . full_markup_list
  127 bookpart_body: bookpart_body full_markup_list .
  128              | bookpart_body . SCM_TOKEN
  128 bookpart_body: bookpart_body SCM_TOKEN .
  129              | bookpart_body . embedded_scm_active
  129 bookpart_body: bookpart_body embedded_scm_active .
  131              | bookpart_body . $@5 lilypond_header
  131 bookpart_body: bookpart_body $@5 . lilypond_header
  131 bookpart_body: bookpart_body $@5 lilypond_header .
  132              | bookpart_body . error
  132 bookpart_body: bookpart_body error .
  133 score_block: "\score" '{' . score_body '}'
  133 score_block: "\score" '{' score_body '}' .
  133 score_block: "\score" '{' score_body . '}'
  133 score_block: "\score" . '{' score_body '}'
  134 score_body: score_items .
  135 score_body: score_body . error
  135 score_body: score_body . error
  135 score_body: score_body . error
  135 score_body: score_body error .
  136 score_item: embedded_scm .
  137 score_item: music .
  138 score_item: output_def .
  140 score_items: score_items . score_item
  140 score_items: score_items score_item .
  142            | score_items . $@6 lilypond_header
  142 score_items: score_items $@6 . lilypond_header
  142 score_items: score_items $@6 lilypond_header .
  143 paper_block: output_def .
  144 output_def: output_def_body '}' .
  144 output_def: output_def_body . '}'
  145 output_def_head: "\paper" .
  146 output_def_head: "\midi" .
  147 output_def_head: "\layout" .
  148 output_def_head_with_mode_switch: output_def_head .
  149 music_or_context_def: music_assign .
  150 music_or_context_def: context_def_spec_block .
  151 output_def_body: output_def_head_with_mode_switch '{' .
  151 output_def_body: output_def_head_with_mode_switch . '{'
  152 output_def_body: output_def_body . assignment
  152 output_def_body: output_def_body assignment .
  153                | output_def_body . embedded_scm_active
  153 output_def_body: output_def_body embedded_scm_active .
  154                | output_def_body . SCM_TOKEN
  154 output_def_body: output_def_body SCM_TOKEN .
  156                | output_def_body . $@7 music_or_context_def
  156 output_def_body: output_def_body $@7 . music_or_context_def
  156 output_def_body: output_def_body $@7 music_or_context_def .
  157                | output_def_body . error
  157 output_def_body: output_def_body error .
  158 tempo_event: "\tempo" . steno_duration '=' tempo_range
  158 tempo_event: "\tempo" steno_duration '=' . tempo_range
  158 tempo_event: "\tempo" steno_duration '=' tempo_range .
  158 tempo_event: "\tempo" steno_duration . '=' tempo_range
  159            | "\tempo" . text steno_duration '=' tempo_range
  159 tempo_event: "\tempo" text . steno_duration '=' tempo_range
  159 tempo_event: "\tempo" text steno_duration '=' . tempo_range
  159 tempo_event: "\tempo" text steno_duration '=' tempo_range .
  159 tempo_event: "\tempo" text steno_duration . '=' tempo_range
  160            | "\tempo" . text
  160            | "\tempo" text .
  162 music_list: music_list . music_embedded
  162 music_list: music_list . music_embedded
  162 music_list: music_list . music_embedded
  162 music_list: music_list music_embedded .
  163           | music_list . error
  163           | music_list . error
  163           | music_list . error
  163 music_list: music_list error .
  164 braced_music_list: '{' . music_list '}'
  164 braced_music_list: '{' music_list '}' .
  164 braced_music_list: '{' music_list . '}'
  165 music: music_assign .
  165 music: music_assign .
  166 music: lyric_element_music .
  167 music: pitch_as_music .
  168 pitch_as_music: pitch_or_music .
  168 pitch_as_music: pitch_or_music .
  169 music_embedded: music .
  170 music_embedded: music_embedded_backup .
  171               | music_embedded_backup
                        .
                        "(backed-up?)"
                        lyric_element_music
  171 music_embedded: music_embedded_backup
                        "(backed-up?)"
                        .
                        lyric_element_music
  171 music_embedded: music_embedded_backup
                        "(backed-up?)"
                        lyric_element_music
                        .
  172 music_embedded: multiplied_duration . post_events
  172 music_embedded: multiplied_duration . post_events
  172 music_embedded: multiplied_duration post_events .
  173 music_embedded_backup: embedded_scm .
  173 music_embedded_backup: embedded_scm .
  174 music_assign: simple_music .
  175 music_assign: composite_music .
  176 repeated_music: "\repeat" . simple_string unsigned_number music
  176 repeated_music: "\repeat" simple_string . unsigned_number music
  176 repeated_music: "\repeat" simple_string unsigned_number . music
  176 repeated_music: "\repeat" simple_string unsigned_number music .
  177               | "\repeat"
                        .
                        simple_string
                        unsigned_number
                        music
                        "\alternative"
                        braced_music_list
  177               | "\repeat"
                        simple_string
                        .
                        unsigned_number
                        music
                        "\alternative"
                        braced_music_list
  177               | "\repeat"
                        simple_string
                        unsigned_number
                        .
                        music
                        "\alternative"
                        braced_music_list
  177               | "\repeat"
                        simple_string
                        unsigned_number
                        music
                        .
                        "\alternative"
                        braced_music_list
  177 repeated_music: "\repeat"
                        simple_string
                        unsigned_number
                        music
                        "\alternative"
                        .
                        braced_music_list
  177 repeated_music: "\repeat"
                        simple_string
                        unsigned_number
                        music
                        "\alternative"
                        braced_music_list
                        .
  178 sequential_music: "\sequential" . braced_music_list
  178 sequential_music: "\sequential" braced_music_list .
  179 sequential_music: braced_music_list .
  180 simultaneous_music: "\simultaneous" . braced_music_list
  180 simultaneous_music: "\simultaneous" braced_music_list .
  181 simultaneous_music: "<<" . music_list ">>"
  181 simultaneous_music: "<<" music_list ">>" .
  181 simultaneous_music: "<<" music_list . ">>"
  182 simple_music: event_chord .
  183 simple_music: music_property_def .
  184 simple_music: context_change .
  186 context_modification: "\with" $@8 '{' . context_mod_list '}'
  186 context_modification: "\with" $@8 '{' context_mod_list '}' .
  186 context_modification: "\with" $@8 '{' context_mod_list . '}'
  186 context_modification: "\with" $@8 . '{' context_mod_list '}'
  186 context_modification: "\with" . $@8 '{' context_mod_list '}'
  187                     | "\with" . CONTEXT_MOD_IDENTIFIER
  187 context_modification: "\with" CONTEXT_MOD_IDENTIFIER .
  188 context_modification: CONTEXT_MOD_IDENTIFIER .
  189                     | "\with" . context_modification_arg
  189 context_modification: "\with" context_modification_arg .
  190 context_modification_arg: embedded_scm .
  191 context_modification_arg: MUSIC_IDENTIFIER .
  193 optional_context_mod: context_modification .
  195 context_mod_list: context_mod_list . context_mod
  195 context_mod_list: context_mod_list context_mod .
  196                 | context_mod_list . CONTEXT_MOD_IDENTIFIER
  196 context_mod_list: context_mod_list CONTEXT_MOD_IDENTIFIER .
  197                 | context_mod_list . context_mod_arg
  197 context_mod_list: context_mod_list context_mod_arg .
  198 context_prefix: "\context" . symbol optional_id optional_context_mod
  198 context_prefix: "\context" . symbol optional_id optional_context_mod
  198 context_prefix: "\context" symbol . optional_id optional_context_mod
  198 context_prefix: "\context" symbol optional_id . optional_context_mod
  198 context_prefix: "\context" symbol optional_id optional_context_mod .
  199 context_prefix: "\new" . symbol optional_id optional_context_mod
  199 context_prefix: "\new" symbol . optional_id optional_context_mod
  199 context_prefix: "\new" symbol optional_id . optional_context_mod
  199 context_prefix: "\new" symbol optional_id optional_context_mod .
  200 new_lyrics: "\addlyrics" . optional_context_mod lyric_mode_music
  200 new_lyrics: "\addlyrics" optional_context_mod . lyric_mode_music
  200 new_lyrics: "\addlyrics" optional_context_mod lyric_mode_music .
  201 new_lyrics: new_lyrics
                    "\addlyrics"
                    .
                    optional_context_mod
                    lyric_mode_music
  201 new_lyrics: new_lyrics
                    "\addlyrics"
                    optional_context_mod
                    .
                    lyric_mode_music
  201 new_lyrics: new_lyrics
                    "\addlyrics"
                    optional_context_mod
                    lyric_mode_music
                    .
  201 new_lyrics: new_lyrics
                    .
                    "\addlyrics"
                    optional_context_mod
                    lyric_mode_music
  201 new_lyrics: new_lyrics
                    .
                    "\addlyrics"
                    optional_context_mod
                    lyric_mode_music
  202 basic_music: music_function_call .
  203 basic_music: repeated_music .
  204 basic_music: music_bare .
  205 basic_music: "\lyricsto" . simple_string lyric_mode_music
  205 basic_music: "\lyricsto" simple_string . lyric_mode_music
  205 basic_music: "\lyricsto" simple_string lyric_mode_music .
  206            | "\lyricsto" . symbol '=' simple_string lyric_mode_music
  206 basic_music: "\lyricsto" symbol '=' . simple_string lyric_mode_music
  206 basic_music: "\lyricsto" symbol '=' simple_string . lyric_mode_music
  206 basic_music: "\lyricsto" symbol '=' simple_string lyric_mode_music .
  206 basic_music: "\lyricsto" symbol . '=' simple_string lyric_mode_music
  207 contextable_music: basic_music .
  208 contextable_music: pitch_as_music .
  209 contextable_music: event_chord .
  210 contexted_basic_music: context_prefix . contextable_music new_lyrics
  210 contexted_basic_music: context_prefix contextable_music . new_lyrics
  210 contexted_basic_music: context_prefix contextable_music new_lyrics .
  211                      | context_prefix . contextable_music
  211                      | context_prefix contextable_music .
  212                      | context_prefix . contexted_basic_music
  212 contexted_basic_music: context_prefix contexted_basic_music .
  213 composite_music: basic_music .
  214 composite_music: contexted_basic_music .
  215                | basic_music . new_lyrics
  215 composite_music: basic_music new_lyrics .
  216 music_bare: mode_changed_music .
  217 music_bare: MUSIC_IDENTIFIER .
  218 music_bare: grouped_music_list .
  219 grouped_music_list: simultaneous_music .
  220 grouped_music_list: sequential_music .
  221 symbol_list_arg: SYMBOL_LIST .
  222                | SYMBOL_LIST . '.' symbol_list_rev
  222 symbol_list_arg: SYMBOL_LIST '.' . symbol_list_rev
  222 symbol_list_arg: SYMBOL_LIST '.' symbol_list_rev .
  223                | SYMBOL_LIST . ',' symbol_list_rev
  223 symbol_list_arg: SYMBOL_LIST ',' . symbol_list_rev
  223 symbol_list_arg: SYMBOL_LIST ',' symbol_list_rev .
  224 symbol_list_rev: symbol_list_part .
  225 symbol_list_rev: symbol_list_rev '.' . symbol_list_part
  225 symbol_list_rev: symbol_list_rev '.' symbol_list_part .
  225 symbol_list_rev: symbol_list_rev . '.' symbol_list_part
  225 symbol_list_rev: symbol_list_rev . '.' symbol_list_part
  225 symbol_list_rev: symbol_list_rev . '.' symbol_list_part
  225 symbol_list_rev: symbol_list_rev . '.' symbol_list_part
  225 symbol_list_rev: symbol_list_rev . '.' symbol_list_part
  225 symbol_list_rev: symbol_list_rev . '.' symbol_list_part
  226                | symbol_list_rev . ',' symbol_list_part
  226                | symbol_list_rev . ',' symbol_list_part
  226                | symbol_list_rev . ',' symbol_list_part
  226                | symbol_list_rev . ',' symbol_list_part
  226                | symbol_list_rev . ',' symbol_list_part
  226                | symbol_list_rev . ',' symbol_list_part
  226 symbol_list_rev: symbol_list_rev ',' . symbol_list_part
  226 symbol_list_rev: symbol_list_rev ',' symbol_list_part .
  227 symbol_list_part: symbol_list_element .
  228 symbol_list_element: STRING .
  229 symbol_list_element: embedded_scm_bare .
  230 symbol_list_element: UNSIGNED .
  231 symbol_list_part_bare: STRING .
  232 symbol_list_part_bare: UNSIGNED .
  233 function_arglist_nonbackup: function_arglist_common .
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
                                    .
  234 function_arglist_nonbackup: "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  234 function_arglist_nonbackup: "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    post_event_nofinger
  235                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
  235 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    .
                                    UNSIGNED
  235 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    UNSIGNED
                                    .
  236                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    .
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    REAL
  236                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    REAL
  236                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
  236 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    REAL
                                    .
  237                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    .
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
  237 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    '-'
                                    NUMBER_IDENTIFIER
                                    .
  238                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    embedded_scm_arg
  238                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    embedded_scm_arg
  238                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
  238 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    embedded_scm_arg
                                    .
  239                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    .
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    bare_number_common
  239                           | "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    .
                                    bare_number_common
  239                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  239                           | "optional?"
                                    .
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
  239 function_arglist_nonbackup: "optional?"
                                    "scheme?"
                                    function_arglist_nonbackup
                                    bare_number_common
                                    .
  240 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    .
                                    pitch_or_music
  240 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    pitch_or_music
                                    .
  240 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    .
                                    "(reparsed?)"
                                    pitch_or_music
  241                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    .
                                    multiplied_duration
  241                           | function_arglist_nonbackup_reparse
                                    .
                                    "(reparsed?)"
                                    multiplied_duration
  241 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    multiplied_duration
                                    .
  242                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    .
                                    reparsed_rhythm
  242                           | function_arglist_nonbackup_reparse
                                    .
                                    "(reparsed?)"
                                    reparsed_rhythm
  242 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    reparsed_rhythm
                                    .
  243                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    .
                                    bare_number_common
  243                           | function_arglist_nonbackup_reparse
                                    .
                                    "(reparsed?)"
                                    bare_number_common
  243 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    bare_number_common
                                    .
  244                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    .
                                    SCM_ARG
  244                           | function_arglist_nonbackup_reparse
                                    .
                                    "(reparsed?)"
                                    SCM_ARG
  244 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    SCM_ARG
                                    .
  245                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    .
                                    lyric_element_music
  245                           | function_arglist_nonbackup_reparse
                                    .
                                    "(reparsed?)"
                                    lyric_element_music
  245 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    lyric_element_music
                                    .
  246                           | function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    .
                                    symbol_list_arg
  246                           | function_arglist_nonbackup_reparse
                                    .
                                    "(reparsed?)"
                                    symbol_list_arg
  246 function_arglist_nonbackup: function_arglist_nonbackup_reparse
                                    "(reparsed?)"
                                    symbol_list_arg
                                    .
  247 reparsed_rhythm: DURATION_ARG . dots multipliers post_events
  247 reparsed_rhythm: DURATION_ARG dots . multipliers post_events
  247 reparsed_rhythm: DURATION_ARG dots multipliers . post_events
  247 reparsed_rhythm: DURATION_ARG dots multipliers post_events .
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
                                            .
  248 function_arglist_nonbackup_reparse: "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  248 function_arglist_nonbackup_reparse: "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            SCM_IDENTIFIER
  249                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            pitch
  249                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            pitch
  249                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  249                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
  249 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            pitch
                                            .
  250                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
  250 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            steno_tonic_pitch
                                            .
  251                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            STRING
  251                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            STRING
  251                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  251                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
  251 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            STRING
                                            .
  252                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            full_markup
  252                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            full_markup
  252                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  252                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
  252 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            full_markup
                                            .
  253                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            UNSIGNED
  253                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            UNSIGNED
  253                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  253                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
  253 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            UNSIGNED
                                            .
  254                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            .
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            .
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254                                   | "optional?"
                                            .
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
  254 function_arglist_nonbackup_reparse: "optional?"
                                            "scheme?"
                                            function_arglist_nonbackup
                                            DURATION_IDENTIFIER
                                            .
  255 function_arglist_backup: function_arglist_common .
  256 function_arglist_backup: "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 embedded_scm_arg
                                 .
  256 function_arglist_backup: "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 embedded_scm_arg
  256 function_arglist_backup: "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 embedded_scm_arg
  257                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 post_event_nofinger
  257                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 post_event_nofinger
  257                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 post_event_nofinger
  257                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 post_event_nofinger
  257                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 post_event_nofinger
  257                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 post_event_nofinger
  257                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 post_event_nofinger
  257                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 post_event_nofinger
  257                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 post_event_nofinger
  257                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 post_event_nofinger
  257 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 post_event_nofinger
                                 .
  258                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 pitch
  258                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 pitch
  258                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 pitch
  258                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 pitch
  258                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 pitch
  258                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 pitch
  258                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 pitch
  258                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 pitch
  258                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 pitch
  258                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 pitch
  258 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 pitch
                                 .
  259                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 steno_tonic_pitch
  259                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 steno_tonic_pitch
  259                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 steno_tonic_pitch
  259                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 steno_tonic_pitch
  259                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 steno_tonic_pitch
  259                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 steno_tonic_pitch
  259                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 steno_tonic_pitch
  259                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 steno_tonic_pitch
  259                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 steno_tonic_pitch
  259                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 steno_tonic_pitch
  259 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 steno_tonic_pitch
                                 .
  260                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 full_markup
  260                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 full_markup
  260                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 full_markup
  260                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 full_markup
  260                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 full_markup
  260                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 full_markup
  260                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 full_markup
  260                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 full_markup
  260                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 full_markup
  260                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 full_markup
  260 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 full_markup
                                 .
  261                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 UNSIGNED
  261                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 UNSIGNED
  261                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 UNSIGNED
  261                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 UNSIGNED
  261                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 UNSIGNED
  261                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 UNSIGNED
  261                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 UNSIGNED
  261                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 UNSIGNED
  261                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 UNSIGNED
  261                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 UNSIGNED
  261 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 UNSIGNED
                                 .
  262                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 REAL
  262                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 REAL
  262                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 REAL
  262                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 REAL
  262                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 REAL
  262                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 REAL
  262                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 REAL
  262                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 REAL
  262                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 REAL
  262                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 REAL
  262 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 REAL
                                 .
  263                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
  263 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 NUMBER_IDENTIFIER
                                 .
  264                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
  264 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 .
                                 UNSIGNED
  264 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 UNSIGNED
                                 .
  265                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 REAL
  265                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 REAL
  265                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 REAL
  265                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 REAL
  265                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 .
                                 REAL
  265                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 '-'
                                 REAL
  265                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 '-'
                                 REAL
  265                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 REAL
  265                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 REAL
  265                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 REAL
  265                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 REAL
  265 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 REAL
                                 .
  266                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 .
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
  266 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 '-'
                                 NUMBER_IDENTIFIER
                                 .
  267                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
  267 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 DURATION_IDENTIFIER
                                 .
  268                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 SCM_IDENTIFIER
  268 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 SCM_IDENTIFIER
                                 .
  269                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 STRING
  269                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 STRING
  269                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 STRING
  269                        | "optional?"
                                 "scheme?"
                                 .
                                 function_arglist_backup
                                 STRING
  269                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 STRING
  269                        | "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 .
                                 STRING
  269                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 STRING
  269                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 STRING
  269                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 STRING
  269                        | "optional?"
                                 .
                                 "scheme?"
                                 function_arglist_backup
                                 STRING
  269 function_arglist_backup: "optional?"
                                 "scheme?"
                                 function_arglist_backup
                                 STRING
                                 .
  270                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 pitch_or_music
  270                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 pitch_or_music
  270 function_arglist_backup: function_arglist_backup
                                 "(reparsed?)"
                                 .
                                 pitch_or_music
  270 function_arglist_backup: function_arglist_backup
                                 "(reparsed?)"
                                 pitch_or_music
                                 .
  270 function_arglist_backup: function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 pitch_or_music
  271                        | function_arglist_backup
                                 "(reparsed?)"
                                 .
                                 bare_number_common
  271                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 bare_number_common
  271                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 bare_number_common
  271                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 bare_number_common
  271 function_arglist_backup: function_arglist_backup
                                 "(reparsed?)"
                                 bare_number_common
                                 .
  272                        | function_arglist_backup
                                 "(reparsed?)"
                                 .
                                 multiplied_duration
  272                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 multiplied_duration
  272                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 multiplied_duration
  272                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 multiplied_duration
  272 function_arglist_backup: function_arglist_backup
                                 "(reparsed?)"
                                 multiplied_duration
                                 .
  273                        | function_arglist_backup
                                 "(reparsed?)"
                                 .
                                 reparsed_rhythm
  273                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 reparsed_rhythm
  273                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 reparsed_rhythm
  273                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 reparsed_rhythm
  273 function_arglist_backup: function_arglist_backup
                                 "(reparsed?)"
                                 reparsed_rhythm
                                 .
  274                        | function_arglist_backup
                                 "(reparsed?)"
                                 .
                                 symbol_list_arg
  274                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 symbol_list_arg
  274                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 symbol_list_arg
  274                        | function_arglist_backup
                                 .
                                 "(reparsed?)"
                                 symbol_list_arg
  274 function_arglist_backup: function_arglist_backup
                                 "(reparsed?)"
                                 symbol_list_arg
                                 .
  275 function_arglist: function_arglist_nonbackup .
  276 function_arglist: "optional?"
                          "scheme?"
                          .
                          function_arglist_skip_nonbackup
                          "\default"
  276 function_arglist: "optional?"
                          "scheme?"
                          .
                          function_arglist_skip_nonbackup
                          "\default"
  276 function_arglist: "optional?"
                          "scheme?"
                          .
                          function_arglist_skip_nonbackup
                          "\default"
  276 function_arglist: "optional?"
                          "scheme?"
                          .
                          function_arglist_skip_nonbackup
                          "\default"
  276 function_arglist: "optional?"
                          "scheme?"
                          function_arglist_skip_nonbackup
                          "\default"
                          .
  276 function_arglist: "optional?"
                          "scheme?"
                          function_arglist_skip_nonbackup
                          .
                          "\default"
  276 function_arglist: "optional?"
                          .
                          "scheme?"
                          function_arglist_skip_nonbackup
                          "\default"
  276 function_arglist: "optional?"
                          .
                          "scheme?"
                          function_arglist_skip_nonbackup
                          "\default"
  276 function_arglist: "optional?"
                          .
                          "scheme?"
                          function_arglist_skip_nonbackup
                          "\default"
  276 function_arglist: "optional?"
                          .
                          "scheme?"
                          function_arglist_skip_nonbackup
                          "\default"
  277 function_arglist_skip_nonbackup: function_arglist_nonbackup .
  277 function_arglist_skip_nonbackup: function_arglist_nonbackup .
  277 function_arglist_skip_nonbackup: function_arglist_nonbackup .
  277 function_arglist_skip_nonbackup: function_arglist_nonbackup .
  277 function_arglist_skip_nonbackup: function_arglist_nonbackup .
  278 function_arglist_skip_nonbackup: "optional?"
                                         "scheme?"
                                         .
                                         function_arglist_skip_nonbackup
  278 function_arglist_skip_nonbackup: "optional?"
                                         "scheme?"
                                         .
                                         function_arglist_skip_nonbackup
  278 function_arglist_skip_nonbackup: "optional?"
                                         "scheme?"
                                         function_arglist_skip_nonbackup
                                         .
  278 function_arglist_skip_nonbackup: "optional?"
                                         .
                                         "scheme?"
                                         function_arglist_skip_nonbackup
  278 function_arglist_skip_nonbackup: "optional?"
                                         .
                                         "scheme?"
                                         function_arglist_skip_nonbackup
  279 function_arglist_partial: "scheme?" . function_arglist_optional
  279 function_arglist_partial: "scheme?" . function_arglist_optional
  279 function_arglist_partial: "scheme?" . function_arglist_optional
  279 function_arglist_partial: "scheme?" . function_arglist_optional
  279 function_arglist_partial: "scheme?" . function_arglist_optional
  279 function_arglist_partial: "scheme?" . function_arglist_optional
  279 function_arglist_partial: "scheme?" . function_arglist_optional
  279 function_arglist_partial: "scheme?" function_arglist_optional .
  279 function_arglist_partial: "scheme?" function_arglist_optional .
  279 function_arglist_partial: "scheme?" function_arglist_optional .
  279 function_arglist_partial: "scheme?" function_arglist_optional .
  279 function_arglist_partial: "scheme?" function_arglist_optional .
  279 function_arglist_partial: "scheme?" function_arglist_optional .
  279 function_arglist_partial: "scheme?" function_arglist_optional .
  280                         | "scheme?" . function_arglist_partial_optional
  280                         | "scheme?" . function_arglist_partial_optional
  280                         | "scheme?" . function_arglist_partial_optional
  280                         | "scheme?" . function_arglist_partial_optional
  280                         | "scheme?" . function_arglist_partial_optional
  280                         | "scheme?" . function_arglist_partial_optional
  280                         | "scheme?" . function_arglist_partial_optional
  280 function_arglist_partial: "scheme?" function_arglist_partial_optional .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_nonbackup
                                  .
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  281 function_arglist_partial: "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_nonbackup
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  "scheme?"
                                  .
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282                         | "optional?"
                                  .
                                  "scheme?"
                                  function_arglist_partial
  282 function_arglist_partial: "optional?"
                                  "scheme?"
                                  function_arglist_partial
                                  .
  283 function_arglist_partial_optional: "scheme?"
                                           .
                                           function_arglist_optional
  283 function_arglist_partial_optional: "scheme?"
                                           function_arglist_optional
                                           .
  284                                  | "scheme?"
                                           .
                                           function_arglist_partial_optional
  284 function_arglist_partial_optional: "scheme?"
                                           function_arglist_partial_optional
                                           .
  285 function_arglist_partial_optional: "optional?"
                                           "scheme?"
                                           .
                                           function_arglist_backup
  285 function_arglist_partial_optional: "optional?"
                                           "scheme?"
                                           .
                                           function_arglist_backup
  285 function_arglist_partial_optional: "optional?"
                                           "scheme?"
                                           function_arglist_backup
                                           .
  285 function_arglist_partial_optional: "optional?"
                                           .
                                           "scheme?"
                                           function_arglist_backup
  285 function_arglist_partial_optional: "optional?"
                                           .
                                           "scheme?"
                                           function_arglist_backup
  286                                  | "optional?"
                                           "scheme?"
                                           .
                                           function_arglist_partial_optional
  286                                  | "optional?"
                                           "scheme?"
                                           .
                                           function_arglist_partial_optional
  286                                  | "optional?"
                                           .
                                           "scheme?"
                                           function_arglist_partial_optional
  286                                  | "optional?"
                                           .
                                           "scheme?"
                                           function_arglist_partial_optional
  286 function_arglist_partial_optional: "optional?"
                                           "scheme?"
                                           function_arglist_partial_optional
                                           .
  287 function_arglist_common: EXPECT_NO_MORE_ARGS .
  288 function_arglist_common: "scheme?"
                                 .
                                 function_arglist_optional
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 .
                                 function_arglist_optional
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 .
                                 function_arglist_optional
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 .
                                 function_arglist_optional
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 .
                                 function_arglist_optional
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 .
                                 function_arglist_optional
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 .
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 .
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 .
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 .
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 .
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 .
                                 embedded_scm_arg
  288 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 embedded_scm_arg
                                 .
  289                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 bare_number_common
  289                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 bare_number_common
  289                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 bare_number_common
  289                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 bare_number_common
  289                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 bare_number_common
  289                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 bare_number_common
  289                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 bare_number_common
  289                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 bare_number_common
  289                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 bare_number_common
  289                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 bare_number_common
  289                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 bare_number_common
  289                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 bare_number_common
  289 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 bare_number_common
                                 .
  290                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 post_event_nofinger
  290                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 post_event_nofinger
  290                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 post_event_nofinger
  290                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 post_event_nofinger
  290                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 post_event_nofinger
  290                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 post_event_nofinger
  290                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 post_event_nofinger
  290                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 post_event_nofinger
  290                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 post_event_nofinger
  290                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 post_event_nofinger
  290                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 post_event_nofinger
  290                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 post_event_nofinger
  290 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 post_event_nofinger
                                 .
  291                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 .
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  291                        | "scheme?"
                                 function_arglist_optional
                                 .
                                 '-'
                                 NUMBER_IDENTIFIER
  291 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 '-'
                                 .
                                 NUMBER_IDENTIFIER
  291 function_arglist_common: "scheme?"
                                 function_arglist_optional
                                 '-'
                                 NUMBER_IDENTIFIER
                                 .
  292 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 .
                                 SCM_ARG
  292 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 SCM_ARG
                                 .
  292 function_arglist_common: function_arglist_common_reparse
                                 .
                                 "(reparsed?)"
                                 SCM_ARG
  293                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 .
                                 lyric_element_music
  293                        | function_arglist_common_reparse
                                 .
                                 "(reparsed?)"
                                 lyric_element_music
  293 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 lyric_element_music
                                 .
  294                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 .
                                 pitch_or_music
  294                        | function_arglist_common_reparse
                                 .
                                 "(reparsed?)"
                                 pitch_or_music
  294 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 pitch_or_music
                                 .
  295                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 .
                                 bare_number_common
  295                        | function_arglist_common_reparse
                                 .
                                 "(reparsed?)"
                                 bare_number_common
  295 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 bare_number_common
                                 .
  296                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 .
                                 multiplied_duration
  296                        | function_arglist_common_reparse
                                 .
                                 "(reparsed?)"
                                 multiplied_duration
  296 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 multiplied_duration
                                 .
  297                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 .
                                 reparsed_rhythm
  297                        | function_arglist_common_reparse
                                 .
                                 "(reparsed?)"
                                 reparsed_rhythm
  297 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 reparsed_rhythm
                                 .
  298                        | function_arglist_common_reparse
                                 "(reparsed?)"
                                 .
                                 symbol_list_arg
  298                        | function_arglist_common_reparse
                                 .
                                 "(reparsed?)"
                                 symbol_list_arg
  298 function_arglist_common: function_arglist_common_reparse
                                 "(reparsed?)"
                                 symbol_list_arg
                                 .
  299 function_arglist_common_reparse: "scheme?"
                                         .
                                         function_arglist_optional
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         .
                                         function_arglist_optional
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         .
                                         function_arglist_optional
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         .
                                         function_arglist_optional
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         .
                                         function_arglist_optional
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         .
                                         function_arglist_optional
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         .
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         .
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         .
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         .
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         .
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         .
                                         SCM_IDENTIFIER
  299 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         SCM_IDENTIFIER
                                         .
  300                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         pitch
  300                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         pitch
  300                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         pitch
  300                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         pitch
  300                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         pitch
  300                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         pitch
  300                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         pitch
  300                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         pitch
  300                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         pitch
  300                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         pitch
  300                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         pitch
  300                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         pitch
  300 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         pitch
                                         .
  301                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         steno_tonic_pitch
  301                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         steno_tonic_pitch
  301 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         steno_tonic_pitch
                                         .
  302                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         STRING
  302                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         STRING
  302                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         STRING
  302                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         STRING
  302                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         STRING
  302                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         STRING
  302                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         STRING
  302                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         STRING
  302                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         STRING
  302                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         STRING
  302                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         STRING
  302                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         STRING
  302 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         STRING
                                         .
  303                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         full_markup
  303                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         full_markup
  303                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         full_markup
  303                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         full_markup
  303                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         full_markup
  303                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         full_markup
  303                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         full_markup
  303                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         full_markup
  303                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         full_markup
  303                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         full_markup
  303                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         full_markup
  303                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         full_markup
  303 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         full_markup
                                         .
  304                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         UNSIGNED
  304                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         UNSIGNED
  304                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         UNSIGNED
  304                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         UNSIGNED
  304                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         UNSIGNED
  304                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         UNSIGNED
  304                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         UNSIGNED
  304                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         UNSIGNED
  304                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         UNSIGNED
  304                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         UNSIGNED
  304                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         UNSIGNED
  304                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         UNSIGNED
  304 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         UNSIGNED
                                         .
  305                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         DURATION_IDENTIFIER
  305                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         DURATION_IDENTIFIER
  305 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         DURATION_IDENTIFIER
                                         .
  306                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         UNSIGNED
  306                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         UNSIGNED
  306 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         '-'
                                         .
                                         UNSIGNED
  306 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         '-'
                                         UNSIGNED
                                         .
  307                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         .
                                         function_arglist_optional
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         function_arglist_optional
                                         '-'
                                         .
                                         REAL
  307                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         REAL
  307                                | "scheme?"
                                         function_arglist_optional
                                         .
                                         '-'
                                         REAL
  307 function_arglist_common_reparse: "scheme?"
                                         function_arglist_optional
                                         '-'
                                         REAL
                                         .
  308 function_arglist_optional: function_arglist_backup .
  309 function_arglist_optional: "optional?"
                                   "scheme?"
                                   .
                                   function_arglist_skip_backup
                                   "\default"
  309 function_arglist_optional: "optional?"
                                   "scheme?"
                                   .
                                   function_arglist_skip_backup
                                   "\default"
  309 function_arglist_optional: "optional?"
                                   "scheme?"
                                   function_arglist_skip_backup
                                   "\default"
                                   .
  309 function_arglist_optional: "optional?"
                                   "scheme?"
                                   function_arglist_skip_backup
                                   .
                                   "\default"
  309 function_arglist_optional: "optional?"
                                   .
                                   "scheme?"
                                   function_arglist_skip_backup
                                   "\default"
  309 function_arglist_optional: "optional?"
                                   .
                                   "scheme?"
                                   function_arglist_skip_backup
                                   "\default"
  310 function_arglist_optional: function_arglist_skip_backup
                                   "(backed-up?)"
                                   .
  310 function_arglist_optional: function_arglist_skip_backup
                                   .
                                   "(backed-up?)"
  311 function_arglist_skip_backup: function_arglist_backup .
  311 function_arglist_skip_backup: function_arglist_backup .
  311 function_arglist_skip_backup: function_arglist_backup .
  312 function_arglist_skip_backup: "optional?"
                                      "scheme?"
                                      .
                                      function_arglist_skip_backup
  312 function_arglist_skip_backup: "optional?"
                                      "scheme?"
                                      .
                                      function_arglist_skip_backup
  312 function_arglist_skip_backup: "optional?"
                                      "scheme?"
                                      .
                                      function_arglist_skip_backup
  312 function_arglist_skip_backup: "optional?"
                                      "scheme?"
                                      .
                                      function_arglist_skip_backup
  312 function_arglist_skip_backup: "optional?"
                                      "scheme?"
                                      function_arglist_skip_backup
                                      .
  312 function_arglist_skip_backup: "optional?"
                                      "scheme?"
                                      function_arglist_skip_backup
                                      .
  312 function_arglist_skip_backup: "optional?"
                                      .
                                      "scheme?"
                                      function_arglist_skip_backup
  312 function_arglist_skip_backup: "optional?"
                                      .
                                      "scheme?"
                                      function_arglist_skip_backup
  312 function_arglist_skip_backup: "optional?"
                                      .
                                      "scheme?"
                                      function_arglist_skip_backup
  312 function_arglist_skip_backup: "optional?"
                                      .
                                      "scheme?"
                                      function_arglist_skip_backup
  313 music_function_call: MUSIC_FUNCTION . function_arglist
  313 music_function_call: MUSIC_FUNCTION . function_arglist
  313 music_function_call: MUSIC_FUNCTION function_arglist .
  315 optional_id: '=' . simple_string
  315 optional_id: '=' simple_string .
  317 lyric_mode_music: $@9 . grouped_music_list
  317 lyric_mode_music: $@9 grouped_music_list .
  318 lyric_mode_music: MUSIC_IDENTIFIER .
  319 mode_changed_music: mode_changing_head . grouped_music_list
  319 mode_changed_music: mode_changing_head grouped_music_list .
  320 mode_changed_music: mode_changing_head_with_context
                            .
                            optional_context_mod
                            grouped_music_list
  320 mode_changed_music: mode_changing_head_with_context
                            optional_context_mod
                            .
                            grouped_music_list
  320 mode_changed_music: mode_changing_head_with_context
                            optional_context_mod
                            grouped_music_list
                            .
  321 mode_changing_head: "\notemode" .
  322 mode_changing_head: "\drummode" .
  323 mode_changing_head: "\figuremode" .
  324 mode_changing_head: "\chordmode" .
  325 mode_changing_head: "\lyricmode" .
  326 mode_changing_head_with_context: "\drums" .
  327 mode_changing_head_with_context: "\figures" .
  328 mode_changing_head_with_context: "\chords" .
  329 mode_changing_head_with_context: "\lyrics" .
  330 context_change: "\change" . symbol '=' simple_string
  330 context_change: "\change" symbol '=' . simple_string
  330 context_change: "\change" symbol '=' simple_string .
  330 context_change: "\change" symbol . '=' simple_string
  331 property_path: symbol_list_rev .
  332 property_operation: symbol '=' . scalar
  332 property_operation: symbol '=' scalar .
  332 property_operation: symbol . '=' scalar
  333 property_operation: "\unset" . symbol
  333 property_operation: "\unset" symbol .
  334 property_operation: "\override" . revert_arg '=' scalar
  334 property_operation: "\override" revert_arg '=' . scalar
  334 property_operation: "\override" revert_arg '=' scalar .
  334 property_operation: "\override" revert_arg . '=' scalar
  335 property_operation: "\revert" . revert_arg
  335 property_operation: "\revert" revert_arg .
  336 revert_arg: revert_arg_backup "(backed-up?)" . symbol_list_arg
  336 revert_arg: revert_arg_backup "(backed-up?)" symbol_list_arg .
  336 revert_arg: revert_arg_backup . "(backed-up?)" symbol_list_arg
  337 revert_arg_backup: revert_arg_part .
  338 revert_arg_part: symbol_list_part .
  339 revert_arg_part: revert_arg_backup
                         "(backed-up?)"
                         .
                         SCM_ARG
                         '.'
                         symbol_list_part
  339 revert_arg_part: revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         '.'
                         .
                         symbol_list_part
  339 revert_arg_part: revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         '.'
                         symbol_list_part
                         .
  339 revert_arg_part: revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         .
                         '.'
                         symbol_list_part
  339 revert_arg_part: revert_arg_backup
                         .
                         "(backed-up?)"
                         SCM_ARG
                         '.'
                         symbol_list_part
  340                | revert_arg_backup
                         "(backed-up?)"
                         .
                         SCM_ARG
                         ','
                         symbol_list_part
  340                | revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         .
                         ','
                         symbol_list_part
  340                | revert_arg_backup
                         .
                         "(backed-up?)"
                         SCM_ARG
                         ','
                         symbol_list_part
  340 revert_arg_part: revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         ','
                         .
                         symbol_list_part
  340 revert_arg_part: revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         ','
                         symbol_list_part
                         .
  341                | revert_arg_backup
                         "(backed-up?)"
                         .
                         SCM_ARG
                         symbol_list_part
  341                | revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         .
                         symbol_list_part
  341                | revert_arg_backup
                         .
                         "(backed-up?)"
                         SCM_ARG
                         symbol_list_part
  341 revert_arg_part: revert_arg_backup
                         "(backed-up?)"
                         SCM_ARG
                         symbol_list_part
                         .
  342 context_def_mod: "\consists" .
  343 context_def_mod: "\remove" .
  344 context_def_mod: "\accepts" .
  345 context_def_mod: "\defaultchild" .
  346 context_def_mod: "\denies" .
  347 context_def_mod: "\alias" .
  348 context_def_mod: "\type" .
  349 context_def_mod: "\description" .
  350 context_def_mod: "\name" .
  351 context_mod: property_operation .
  352 context_mod: context_def_mod . STRING
  352 context_mod: context_def_mod STRING .
  353            | context_def_mod . embedded_scm
  353 context_mod: context_def_mod embedded_scm .
  354 grob_prop_spec: symbol_list_rev .
  355 grob_prop_path: grob_prop_spec .
  356               | grob_prop_spec . property_path
  356 grob_prop_path: grob_prop_spec property_path .
  357 context_prop_spec: symbol_list_rev .
  358 simple_revert_context: symbol_list_part .
  359 music_property_def: "\override" . grob_prop_path '=' scalar
  359 music_property_def: "\override" . grob_prop_path '=' scalar
  359 music_property_def: "\override" grob_prop_path '=' . scalar
  359 music_property_def: "\override" grob_prop_path '=' . scalar
  359 music_property_def: "\override" grob_prop_path '=' scalar .
  359 music_property_def: "\override" grob_prop_path . '=' scalar
  359 music_property_def: "\override" grob_prop_path . '=' scalar
  360 music_property_def: "\revert" . simple_revert_context revert_arg
  360 music_property_def: "\revert" simple_revert_context . revert_arg
  360 music_property_def: "\revert" simple_revert_context revert_arg .
  361 music_property_def: "\set" . context_prop_spec '=' scalar
  361 music_property_def: "\set" . context_prop_spec '=' scalar
  361 music_property_def: "\set" context_prop_spec '=' . scalar
  361 music_property_def: "\set" context_prop_spec '=' . scalar
  361 music_property_def: "\set" context_prop_spec '=' scalar .
  361 music_property_def: "\set" context_prop_spec . '=' scalar
  361 music_property_def: "\set" context_prop_spec . '=' scalar
  362 music_property_def: "\unset" . context_prop_spec
  362 music_property_def: "\unset" context_prop_spec .
  363 string: STRING .
  363 string: STRING .
  364 string: full_markup .
  364 string: full_markup .
  365 text: STRING .
  366 text: full_markup .
  367 text: embedded_scm_bare .
  368 simple_string: STRING .
  368 simple_string: STRING .
  369 simple_string: embedded_scm_bare .
  369 simple_string: embedded_scm_bare .
  370 symbol: STRING .
  370 symbol: STRING .
  371 symbol: embedded_scm_bare .
  371 symbol: embedded_scm_bare .
  371 symbol: embedded_scm_bare .
  372 scalar: embedded_scm_arg .
  373 scalar: pitch_or_music .
  374 scalar: SCM_IDENTIFIER .
  375 scalar: bare_number .
  376 scalar: '-' . bare_number
  376 scalar: '-' bare_number .
  377 scalar: string .
  378 scalar: symbol_list_part_bare '.' . property_path
  378 scalar: symbol_list_part_bare '.' property_path .
  378 scalar: symbol_list_part_bare . '.' property_path
  379       | symbol_list_part_bare . ',' property_path
  379 scalar: symbol_list_part_bare ',' . property_path
  379 scalar: symbol_list_part_bare ',' property_path .
  380 event_chord: simple_element . post_events
  380 event_chord: simple_element post_events .
  381 event_chord: CHORD_REPETITION . optional_notemode_duration post_events
  381 event_chord: CHORD_REPETITION optional_notemode_duration . post_events
  381 event_chord: CHORD_REPETITION optional_notemode_duration post_events .
  382 event_chord: MULTI_MEASURE_REST
                     .
                     optional_notemode_duration
                     post_events
  382 event_chord: MULTI_MEASURE_REST
                     optional_notemode_duration
                     .
                     post_events
  382 event_chord: MULTI_MEASURE_REST
                     optional_notemode_duration
                     post_events
                     .
  383 event_chord: tempo_event .
  384 event_chord: note_chord_element .
  385 note_chord_element: chord_body . optional_notemode_duration post_events
  385 note_chord_element: chord_body optional_notemode_duration . post_events
  385 note_chord_element: chord_body optional_notemode_duration post_events .
  386 chord_body: "<" . chord_body_elements ">"
  386 chord_body: "<" chord_body_elements ">" .
  386 chord_body: "<" chord_body_elements . ">"
  387 chord_body: FIGURE_OPEN . figure_list FIGURE_CLOSE
  387 chord_body: FIGURE_OPEN figure_list . FIGURE_CLOSE
  387 chord_body: FIGURE_OPEN figure_list FIGURE_CLOSE .
  389 chord_body_elements: chord_body_elements . chord_body_element
  389 chord_body_elements: chord_body_elements chord_body_element .
  390 chord_body_element: pitch_or_tonic_pitch
                            .
                            exclamations
                            questions
                            octave_check
                            post_events
  390 chord_body_element: pitch_or_tonic_pitch
                            exclamations
                            .
                            questions
                            octave_check
                            post_events
  390 chord_body_element: pitch_or_tonic_pitch
                            exclamations
                            questions
                            .
                            octave_check
                            post_events
  390 chord_body_element: pitch_or_tonic_pitch
                            exclamations
                            questions
                            octave_check
                            .
                            post_events
  390 chord_body_element: pitch_or_tonic_pitch
                            exclamations
                            questions
                            octave_check
                            post_events
                            .
  391 chord_body_element: DRUM_PITCH . post_events
  391 chord_body_element: DRUM_PITCH post_events .
  392 chord_body_element: music_function_chord_body .
  393 music_function_chord_body: music_function_call .
  394 music_function_chord_body: MUSIC_IDENTIFIER .
  395 music_function_chord_body: embedded_scm .
  396 event_function_event: EVENT_FUNCTION . function_arglist
  396 event_function_event: EVENT_FUNCTION . function_arglist
  396 event_function_event: EVENT_FUNCTION function_arglist .
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events . post_event
  398 post_events: post_events post_event .
  399 post_event_nofinger: direction_less_event .
  400 post_event_nofinger: script_dir . music_function_call
  400 post_event_nofinger: script_dir music_function_call .
  401 post_event_nofinger: "--" .
  402 post_event_nofinger: "__" .
  403                    | script_dir . direction_reqd_event
  403 post_event_nofinger: script_dir direction_reqd_event .
  404                    | script_dir . direction_less_event
  404 post_event_nofinger: script_dir direction_less_event .
  405 post_event_nofinger: '^' . fingering
  405 post_event_nofinger: '^' fingering .
  406 post_event_nofinger: '_' . fingering
  406 post_event_nofinger: '_' fingering .
  407 post_event: post_event_nofinger .
  408 post_event: '-' . fingering
  408 post_event: '-' . fingering
  408 post_event: '-' fingering .
  409 string_number_event: E_UNSIGNED .
  410 direction_less_event: string_number_event .
  411 direction_less_event: EVENT_IDENTIFIER .
  412 direction_less_event: tremolo_type .
  413 direction_less_event: event_function_event .
  414 direction_reqd_event: gen_text_def .
  415 direction_reqd_event: script_abbreviation .
  417 octave_check: '=' . quotes
  417 octave_check: '=' quotes .
  419 quotes: sub_quotes .
  420 quotes: sup_quotes .
  421 sup_quotes: '\'' .
  422 sup_quotes: sup_quotes '\'' .
  422 sup_quotes: sup_quotes . '\''
  423 sub_quotes: ',' .
  424 sub_quotes: sub_quotes ',' .
  424 sub_quotes: sub_quotes . ','
  425 steno_pitch: NOTENAME_PITCH . quotes
  425 steno_pitch: NOTENAME_PITCH quotes .
  426 steno_tonic_pitch: TONICNAME_PITCH . quotes
  426 steno_tonic_pitch: TONICNAME_PITCH quotes .
  427 pitch: steno_pitch .
  428 pitch: PITCH_IDENTIFIER . quotes
  428 pitch: PITCH_IDENTIFIER quotes .
  429 pitch_or_tonic_pitch: pitch .
  430 pitch_or_tonic_pitch: steno_tonic_pitch .
  431 gen_text_def: full_markup .
  432 gen_text_def: STRING .
  433 gen_text_def: embedded_scm .
  434 fingering: UNSIGNED .
  434 fingering: UNSIGNED .
  435 script_abbreviation: '^' .
  436 script_abbreviation: '+' .
  437 script_abbreviation: '-' .
  438 script_abbreviation: '!' .
  439 script_abbreviation: ">" .
  440 script_abbreviation: '.' .
  441 script_abbreviation: '_' .
  442 script_dir: '_' .
  443 script_dir: '^' .
  444 script_dir: '-' .
  444 script_dir: '-' .
  444 script_dir: '-' .
  444 script_dir: '-' .
  444 script_dir: '-' .
  444 script_dir: '-' .
  446 maybe_notemode_duration: multiplied_duration .
  447 optional_notemode_duration: maybe_notemode_duration .
  447 optional_notemode_duration: maybe_notemode_duration .
  448 steno_duration: UNSIGNED . dots
  448 steno_duration: UNSIGNED . dots
  448 steno_duration: UNSIGNED dots .
  449 steno_duration: DURATION_IDENTIFIER . dots
  449 steno_duration: DURATION_IDENTIFIER dots .
  450 multiplied_duration: steno_duration . multipliers
  450 multiplied_duration: steno_duration multipliers .
  452 dots: dots '.' .
  452 dots: dots . '.'
  452 dots: dots . '.'
  452 dots: dots . '.'
  454 multipliers: multipliers '*' . UNSIGNED
  454 multipliers: multipliers '*' UNSIGNED .
  454 multipliers: multipliers . '*' UNSIGNED
  454 multipliers: multipliers . '*' UNSIGNED
  455            | multipliers '*' . FRACTION
  455            | multipliers . '*' FRACTION
  455            | multipliers . '*' FRACTION
  455 multipliers: multipliers '*' FRACTION .
  456 tremolo_type: ':' .
  457             | ':' . UNSIGNED
  457 tremolo_type: ':' UNSIGNED .
  458 bass_number: UNSIGNED .
  459 bass_number: STRING .
  460 bass_number: full_markup .
  461 bass_number: embedded_scm_bare .
  462 figured_bass_alteration: '-' .
  463 figured_bass_alteration: '+' .
  464 figured_bass_alteration: '!' .
  465 bass_figure: "_" .
  466 bass_figure: bass_number .
  467 bass_figure: bass_figure ']' .
  467 bass_figure: bass_figure . ']'
  467 bass_figure: bass_figure . ']'
  468            | bass_figure . figured_bass_alteration
  468            | bass_figure . figured_bass_alteration
  468 bass_figure: bass_figure figured_bass_alteration .
  469            | bass_figure . figured_bass_modification
  469            | bass_figure . figured_bass_modification
  469 bass_figure: bass_figure figured_bass_modification .
  470 figured_bass_modification: "\+" .
  471 figured_bass_modification: "\!" .
  472 figured_bass_modification: '/' .
  473 figured_bass_modification: "\" .
  474 br_bass_figure: bass_figure .
  475 br_bass_figure: '[' . bass_figure
  475 br_bass_figure: '[' bass_figure .
  477 figure_list: figure_list . br_bass_figure
  477 figure_list: figure_list br_bass_figure .
  479 optional_rest: "\rest" .
  480 pitch_or_music: pitch
                        .
                        exclamations
                        questions
                        octave_check
                        maybe_notemode_duration
                        optional_rest
                        post_events
  480 pitch_or_music: pitch
                        exclamations
                        .
                        questions
                        octave_check
                        maybe_notemode_duration
                        optional_rest
                        post_events
  480 pitch_or_music: pitch
                        exclamations
                        questions
                        .
                        octave_check
                        maybe_notemode_duration
                        optional_rest
                        post_events
  480 pitch_or_music: pitch
                        exclamations
                        questions
                        octave_check
                        .
                        maybe_notemode_duration
                        optional_rest
                        post_events
  480 pitch_or_music: pitch
                        exclamations
                        questions
                        octave_check
                        maybe_notemode_duration
                        .
                        optional_rest
                        post_events
  480 pitch_or_music: pitch
                        exclamations
                        questions
                        octave_check
                        maybe_notemode_duration
                        optional_rest
                        .
                        post_events
  480 pitch_or_music: pitch
                        exclamations
                        questions
                        octave_check
                        maybe_notemode_duration
                        optional_rest
                        post_events
                        .
  481 pitch_or_music: new_chord . post_events
  481 pitch_or_music: new_chord post_events .
  482 simple_element: DRUM_PITCH . optional_notemode_duration
  482 simple_element: DRUM_PITCH optional_notemode_duration .
  483 simple_element: RESTNAME . optional_notemode_duration
  483 simple_element: RESTNAME optional_notemode_duration .
  484 lyric_element: full_markup .
  484 lyric_element: full_markup .
  485 lyric_element: STRING .
  485 lyric_element: STRING .
  486 lyric_element: LYRIC_ELEMENT .
  487 lyric_element_music: lyric_element
                             .
                             optional_notemode_duration
                             post_events
  487 lyric_element_music: lyric_element
                             optional_notemode_duration
                             .
                             post_events
  487 lyric_element_music: lyric_element
                             optional_notemode_duration
                             post_events
                             .
  488 new_chord: steno_tonic_pitch . maybe_notemode_duration
  488 new_chord: steno_tonic_pitch maybe_notemode_duration .
  489          | steno_tonic_pitch
                   .
                   optional_notemode_duration
                   chord_separator
                   chord_items
  489 new_chord: steno_tonic_pitch
                   optional_notemode_duration
                   .
                   chord_separator
                   chord_items
  489 new_chord: steno_tonic_pitch
                   optional_notemode_duration
                   chord_separator
                   .
                   chord_items
  489 new_chord: steno_tonic_pitch
                   optional_notemode_duration
                   chord_separator
                   chord_items
                   .
  491 chord_items: chord_items . chord_item
  491 chord_items: chord_items chord_item .
  492 chord_separator: ":" .
  493 chord_separator: "^" .
  494 chord_separator: "/" . steno_tonic_pitch
  494 chord_separator: "/" steno_tonic_pitch .
  495 chord_separator: "/+" . steno_tonic_pitch
  495 chord_separator: "/+" steno_tonic_pitch .
  496 chord_item: chord_separator .
  497 chord_item: step_numbers .
  498 chord_item: CHORD_MODIFIER .
  499 step_numbers: step_number .
  500 step_numbers: step_numbers '.' . step_number
  500 step_numbers: step_numbers '.' step_number .
  500 step_numbers: step_numbers . '.' step_number
  501 step_number: UNSIGNED .
  502            | UNSIGNED . '+'
  502 step_number: UNSIGNED '+' .
  503            | UNSIGNED . "-"
  503 step_number: UNSIGNED "-" .
  504 tempo_range: unsigned_number .
  505            | unsigned_number . '-' unsigned_number
  505 tempo_range: unsigned_number '-' . unsigned_number
  505 tempo_range: unsigned_number '-' unsigned_number .
  506 number_expression: number_expression '+' . number_term
  506 number_expression: number_expression '+' number_term .
  506 number_expression: number_expression . '+' number_term
  507                  | number_expression . '-' number_term
  507 number_expression: number_expression '-' . number_term
  507 number_expression: number_expression '-' number_term .
  508 number_expression: number_term .
  509 number_term: number_factor .
  510            | number_factor . '*' number_factor
  510 number_term: number_factor '*' . number_factor
  510 number_term: number_factor '*' number_factor .
  511            | number_factor . '/' number_factor
  511 number_term: number_factor '/' . number_factor
  511 number_term: number_factor '/' number_factor .
  512 number_factor: '-' . number_factor
  512 number_factor: '-' . number_factor
  512 number_factor: '-' number_factor .
  513 number_factor: bare_number .
  514 bare_number_common: REAL .
  515 bare_number_common: NUMBER_IDENTIFIER .
  516                   | REAL . NUMBER_IDENTIFIER
  516 bare_number_common: REAL NUMBER_IDENTIFIER .
  517 bare_number: bare_number_common .
  518 bare_number: UNSIGNED .
  518 bare_number: UNSIGNED .
  519            | UNSIGNED . NUMBER_IDENTIFIER
  519            | UNSIGNED . NUMBER_IDENTIFIER
  519 bare_number: UNSIGNED NUMBER_IDENTIFIER .
  520 unsigned_number: UNSIGNED .
  521 unsigned_number: NUMBER_IDENTIFIER .
  522 unsigned_number: embedded_scm .
  524 exclamations: exclamations '!' .
  524 exclamations: exclamations . '!'
  524 exclamations: exclamations . '!'
  526 questions: questions '?' .
  526 questions: questions . '?'
  526 questions: questions . '?'
  528 full_markup_list: "\markuplist" $@10 . markup_list
  528 full_markup_list: "\markuplist" $@10 markup_list .
  528 full_markup_list: "\markuplist" . $@10 markup_list
  529 markup_mode: "\markup" .
  530 full_markup: markup_mode . markup_top
  530 full_markup: markup_mode . markup_top
  530 full_markup: markup_mode markup_top .
  531 partial_markup: markup_mode . markup_partial_function "\etc"
  531 partial_markup: markup_mode markup_partial_function "\etc" .
  531 partial_markup: markup_mode markup_partial_function . "\etc"
  532 markup_top: markup_list .
  533 markup_top: markup_head_1_list . simple_markup
  533 markup_top: markup_head_1_list . simple_markup
  533 markup_top: markup_head_1_list simple_markup .
  534 markup_top: simple_markup .
  536 markup_scm: embedded_scm $@11 "(backed-up?)" .
  536 markup_scm: embedded_scm $@11 . "(backed-up?)"
  536 markup_scm: embedded_scm . $@11 "(backed-up?)"
  537 markup_list: markup_composed_list .
  538 markup_list: markup_uncomposed_list .
  539 markup_uncomposed_list: markup_braced_list .
  540 markup_uncomposed_list: markup_command_list .
  541 markup_uncomposed_list: markup_scm . MARKUPLIST_IDENTIFIER
  541 markup_uncomposed_list: markup_scm . MARKUPLIST_IDENTIFIER
  541 markup_uncomposed_list: markup_scm MARKUPLIST_IDENTIFIER .
  543 markup_uncomposed_list: "\score-lines" $@12 '{' . score_body '}'
  543 markup_uncomposed_list: "\score-lines" $@12 '{' score_body '}' .
  543 markup_uncomposed_list: "\score-lines" $@12 '{' score_body . '}'
  543 markup_uncomposed_list: "\score-lines" $@12 . '{' score_body '}'
  543 markup_uncomposed_list: "\score-lines" . $@12 '{' score_body '}'
  544 markup_composed_list: markup_head_1_list . markup_uncomposed_list
  544 markup_composed_list: markup_head_1_list . markup_uncomposed_list
  544 markup_composed_list: markup_head_1_list . markup_uncomposed_list
  544 markup_composed_list: markup_head_1_list . markup_uncomposed_list
  544 markup_composed_list: markup_head_1_list markup_uncomposed_list .
  545 markup_braced_list: '{' . markup_braced_list_body '}'
  545 markup_braced_list: '{' markup_braced_list_body '}' .
  545 markup_braced_list: '{' markup_braced_list_body . '}'
  547 markup_braced_list_body: markup_braced_list_body . markup
  547 markup_braced_list_body: markup_braced_list_body markup .
  548                        | markup_braced_list_body . markup_list
  548 markup_braced_list_body: markup_braced_list_body markup_list .
  549 markup_command_list: MARKUP_LIST_FUNCTION
                             .
                             markup_command_list_arguments
  549 markup_command_list: MARKUP_LIST_FUNCTION
                             markup_command_list_arguments
                             .
  550 markup_command_basic_arguments: "markup-list?"
                                        .
                                        markup_command_list_arguments
                                        markup_list
  550 markup_command_basic_arguments: "markup-list?"
                                        markup_command_list_arguments
                                        .
                                        markup_list
  550 markup_command_basic_arguments: "markup-list?"
                                        markup_command_list_arguments
                                        markup_list
                                        .
  551 markup_command_basic_arguments: "scheme?"
                                        .
                                        markup_command_list_arguments
                                        embedded_scm
  551 markup_command_basic_arguments: "scheme?"
                                        .
                                        markup_command_list_arguments
                                        embedded_scm
  551 markup_command_basic_arguments: "scheme?"
                                        markup_command_list_arguments
                                        .
                                        embedded_scm
  551 markup_command_basic_arguments: "scheme?"
                                        markup_command_list_arguments
                                        .
                                        embedded_scm
  551 markup_command_basic_arguments: "scheme?"
                                        markup_command_list_arguments
                                        embedded_scm
                                        .
  552 markup_command_basic_arguments: EXPECT_NO_MORE_ARGS .
  553 markup_command_list_arguments: markup_command_basic_arguments .
  554 markup_command_list_arguments: "markup?"
                                       .
                                       markup_command_list_arguments
                                       markup
  554 markup_command_list_arguments: "markup?"
                                       .
                                       markup_command_list_arguments
                                       markup
  554 markup_command_list_arguments: "markup?"
                                       markup_command_list_arguments
                                       .
                                       markup
  554 markup_command_list_arguments: "markup?"
                                       markup_command_list_arguments
                                       .
                                       markup
  554 markup_command_list_arguments: "markup?"
                                       markup_command_list_arguments
                                       markup
                                       .
  555 markup_partial_function: MARKUP_FUNCTION . markup_arglist_partial
  555 markup_partial_function: MARKUP_FUNCTION markup_arglist_partial .
  556 markup_partial_function: markup_head_1_list
                                 .
                                 MARKUP_FUNCTION
                                 markup_arglist_partial
  556 markup_partial_function: markup_head_1_list
                                 MARKUP_FUNCTION
                                 .
                                 markup_arglist_partial
  556 markup_partial_function: markup_head_1_list
                                 MARKUP_FUNCTION
                                 markup_arglist_partial
                                 .
  557 markup_arglist_partial: "markup?" . markup_arglist_partial
  557 markup_arglist_partial: "markup?" . markup_arglist_partial
  557 markup_arglist_partial: "markup?" markup_arglist_partial .
  558 markup_arglist_partial: "scheme?" . markup_arglist_partial
  558 markup_arglist_partial: "scheme?" markup_arglist_partial .
  559                       | "markup?" . markup_command_list_arguments
  559                       | "markup?" . markup_command_list_arguments
  559 markup_arglist_partial: "markup?" markup_command_list_arguments .
  559 markup_arglist_partial: "markup?" markup_command_list_arguments .
  560                       | "scheme?" . markup_command_list_arguments
  560 markup_arglist_partial: "scheme?" markup_command_list_arguments .
  561 markup_head_1_item: MARKUP_FUNCTION
                            "markup?"
                            .
                            markup_command_list_arguments
  561 markup_head_1_item: MARKUP_FUNCTION
                            "markup?"
                            .
                            markup_command_list_arguments
  561 markup_head_1_item: MARKUP_FUNCTION
                            "markup?"
                            markup_command_list_arguments
                            .
  561 markup_head_1_item: MARKUP_FUNCTION
                            "markup?"
                            markup_command_list_arguments
                            .
  561 markup_head_1_item: MARKUP_FUNCTION
                            .
                            "markup?"
                            markup_command_list_arguments
  561 markup_head_1_item: MARKUP_FUNCTION
                            .
                            "markup?"
                            markup_command_list_arguments
  561 markup_head_1_item: MARKUP_FUNCTION
                            .
                            "markup?"
                            markup_command_list_arguments
  561 markup_head_1_item: MARKUP_FUNCTION
                            .
                            "markup?"
                            markup_command_list_arguments
  562 markup_head_1_list: markup_head_1_item .
  563 markup_head_1_list: markup_head_1_list . markup_head_1_item
  563 markup_head_1_list: markup_head_1_list . markup_head_1_item
  563 markup_head_1_list: markup_head_1_list . markup_head_1_item
  563 markup_head_1_list: markup_head_1_list . markup_head_1_item
  563 markup_head_1_list: markup_head_1_list . markup_head_1_item
  563 markup_head_1_list: markup_head_1_list markup_head_1_item .
  564 simple_markup: STRING .
  566 simple_markup: "\score" $@13 '{' . score_body '}'
  566 simple_markup: "\score" $@13 '{' score_body '}' .
  566 simple_markup: "\score" $@13 '{' score_body . '}'
  566 simple_markup: "\score" $@13 . '{' score_body '}'
  566 simple_markup: "\score" . $@13 '{' score_body '}'
  567 simple_markup: MARKUP_FUNCTION . markup_command_basic_arguments
  567 simple_markup: MARKUP_FUNCTION . markup_command_basic_arguments
  567 simple_markup: MARKUP_FUNCTION . markup_command_basic_arguments
  567 simple_markup: MARKUP_FUNCTION markup_command_basic_arguments .
  568 simple_markup: markup_scm . MARKUP_IDENTIFIER
  568 simple_markup: markup_scm . MARKUP_IDENTIFIER
  568 simple_markup: markup_scm MARKUP_IDENTIFIER .
  569 markup: markup_head_1_list . simple_markup
  569 markup: markup_head_1_list . simple_markup
  569 markup: markup_head_1_list simple_markup .
  570 markup: simple_markup .
$@1 (131)
    on left: 2, on right: 3
$@10 (299)
    on left: 527, on right: 528
$@11 (305)
    on left: 535, on right: 536
$@12 (308)
    on left: 542, on right: 543
$@13 (320)
    on left: 565, on right: 566
$@2 (134)
    on left: 9, on right: 10
$@3 (153)
    on left: 100, on right: 101
$@4 (157)
    on left: 117, on right: 118
$@5 (160)
    on left: 130, on right: 131
$@6 (165)
    on left: 141, on right: 142
$@7 (172)
    on left: 155, on right: 156
$@8 (186)
    on left: 185, on right: 186
$@9 (218)
    on left: 316, on right: 317
assignment (147)
    on left: 63 64 65, on right: 6 59 152
assignment_id (146)
    on left: 62, on right: 63 64 65
bare_number (294)
    on left: 517 518 519, on right: 375 376 513
basic_music (192)
    on left: 202 203 204 205 206, on right: 207 213 215
bass_number (272)
    on left: 458 459 460 461, on right: 466
book_block (155)
    on left: 106, on right: 11 36 72
bookpart_block (158)
    on left: 120, on right: 12 37 73 110
br_bass_figure (276)
    on left: 474 475, on right: 477
braced_music_list (175)
    on left: 164, on right: 177 178 179 180
chord_body (242)
    on left: 386 387, on right: 385
chord_body_element (244)
    on left: 390 391 392, on right: 389
chord_body_elements (243)
    on left: 388 389, on right: 386 389
chord_item (286)
    on left: 496 497 498, on right: 491
chord_items (284)
    on left: 490 491, on right: 489 491
chord_separator (285)
    on left: 492 493 494 495, on right: 489 496
composite_music (195)
    on left: 213 214 215, on right: 15 101 112 125 175
context_change (222)
    on left: 330, on right: 184
context_def_spec_block (151)
    on left: 98, on right: 35 75 150
context_mod (229)
    on left: 351 352 353, on right: 103 195
context_mod_arg (152)
    on left: 99 101, on right: 105 197
context_modification_arg (187)
    on left: 190 191, on right: 189
context_prefix (190)
    on left: 198 199, on right: 210 211 212
context_prop_spec (232)
    on left: 357, on right: 89 94 361 362
contextable_music (193)
    on left: 207 208 209, on right: 210 211
contexted_basic_music (194)
    on left: 210 211 212, on right: 212 214
direction_less_event (251)
    on left: 410 411 412 413, on right: 399 404
direction_reqd_event (252)
    on left: 414 415, on right: 403
dots (269)
    on left: 451 452, on right: 247 448 449 452
embedded_lilypond (143)
    on left: 50 51 52 53 54 55 56 57, on right: 3 57
embedded_lilypond_number (142)
    on left: 47 48 49, on right: 47 52
embedded_scm_active (137)
    on left: 25 26 27, on right: 19 116 129 153
embedded_scm_arg (140)
    on left: 43 44 45, on right: 238 256 288 372
embedded_scm_bare (136)
    on left: 23 24, on right: 40 229 367 369 371 461
event_chord (240)
    on left: 380 381 382 383 384, on right: 182 209
event_function_event (246)
    on left: 396, on right: 413
exclamations (296)
    on left: 523 524, on right: 390 480 524
figure_list (277)
    on left: 476 477, on right: 387 477
figured_bass_alteration (273)
    on left: 462 463 464, on right: 468
figured_bass_modification (275)
    on left: 470 471 472 473, on right: 469
fingering (262)
    on left: 434, on right: 405 406 408
full_markup_list (298)
    on left: 528, on right: 17 32 82 114 127
function_arglist (207)
    on left: 275 276, on right: 46 313 396
function_arglist_skip_nonbackup (208)
    on left: 277 278, on right: 276 278
gen_text_def (261)
    on left: 431 432 433, on right: 414
grob_prop_path (231)
    on left: 355 356, on right: 88 93 359
grob_prop_spec (230)
    on left: 354, on right: 355 356
grouped_music_list (197)
    on left: 219 220, on right: 218 317 319 320
identifier_init (148)
    on left: 66 67 68 69 70, on right: 63 64 65
lilypond (132)
    on left: 4 5 6 7 8, on right: 1 5 6 7 8
lilypond_header (145)
    on left: 61, on right: 10 118 131 142
lilypond_header_body (144)
    on left: 58 59 60, on right: 59 60 61
lookup (135)
    on left: 21 22, on right: 27 39 42
lyric_element (281)
    on left: 484 485 486, on right: 487
lyric_element_music (282)
    on left: 487, on right: 166 171 245 293
lyric_mode_music (217)
    on left: 317 318, on right: 200 201 205 206
markup (321)
    on left: 569 570, on right: 547 554
markup_braced_list (310)
    on left: 545, on right: 539
markup_braced_list_body (311)
    on left: 546 547 548, on right: 545 547 548
markup_command_list (312)
    on left: 549, on right: 540
markup_composed_list (309)
    on left: 544, on right: 537
markup_head_1_item (317)
    on left: 561, on right: 562 563
markup_head_1_list (318)
    on left: 562 563, on right: 533 544 556 563 569
markup_list (306)
    on left: 537 538, on right: 528 532 548 550
markup_mode (300)
    on left: 529, on right: 530 531
markup_partial_function (315)
    on left: 555 556, on right: 531
markup_scm (304)
    on left: 536, on right: 541 568
markup_top (303)
    on left: 532 533 534, on right: 530
markup_uncomposed_list (307)
    on left: 539 540 541 543, on right: 538 544
maybe_notemode_duration (265)
    on left: 445 446, on right: 447 480 488
mode_changed_music (219)
    on left: 319 320, on right: 216
mode_changing_head (220)
    on left: 321 322 323 324 325, on right: 319
multiplied_duration (268)
    on left: 450, on right: 54 172 241 272 296 446
multipliers (270)
    on left: 453 454 455, on right: 247 450 454 455
music (176)
    on left: 165 166 167, on right: 137 169 176 177
music_assign (180)
    on left: 174 175, on right: 45 76 149 165
music_bare (196)
    on left: 216 217 218, on right: 204
music_embedded (178)
    on left: 169 170 171 172, on right: 55 162
music_embedded_backup (179)
    on left: 173, on right: 170 171
music_function_call (215)
    on left: 313, on right: 202 393 400
music_function_chord_body (245)
    on left: 393 394 395, on right: 392
music_list (174)
    on left: 161 162 163, on right: 55 162 163 164 181
music_or_context_def (170)
    on left: 149 150, on right: 156
music_property_def (234)
    on left: 359 360 361 362, on right: 183
new_chord (283)
    on left: 488 489, on right: 481
new_lyrics (191)
    on left: 200 201, on right: 201 210 215
note_chord_element (241)
    on left: 385, on right: 384
number_expression (290)
    on left: 506 507 508, on right: 67 506 507
number_factor (292)
    on left: 512 513, on right: 509 510 511 512
number_term (291)
    on left: 509 510 511, on right: 506 507 508
octave_check (253)
    on left: 416 417, on right: 390 480
optional_id (216)
    on left: 314 315, on right: 198 199
optional_rest (278)
    on left: 478 479, on right: 480
output_def (167)
    on left: 144, on right: 20 38 74 138 143
output_def_head (168)
    on left: 145 146 147, on right: 148
output_def_head_with_mode_switch (169)
    on left: 148, on right: 151
paper_block (166)
    on left: 143, on right: 109 123
partial_markup (302)
    on left: 531, on right: 31 81
pitch (259)
    on left: 427 428, on right: 249 258 300 429 480
pitch_as_music (177)
    on left: 168, on right: 167 208
pitch_or_music (279)
    on left: 480 481, on right: 77 168 240 270 294 373
pitch_or_tonic_pitch (260)
    on left: 429 430, on right: 390
post_event (249)
    on left: 407 408, on right: 53 398
property_operation (224)
    on left: 332 333 334 335, on right: 351
property_path (223)
    on left: 331, on right: 64 65 68 69 356 378 379
questions (297)
    on left: 525 526, on right: 390 480 526
quotes (254)
    on left: 418 419 420, on right: 417 425 426 428
reparsed_rhythm (204)
    on left: 247, on right: 242 273 297
repeated_music (181)
    on left: 176 177, on right: 203
revert_arg (225)
    on left: 336, on right: 334 335 360
revert_arg_backup (226)
    on left: 337, on right: 336 339 340 341
revert_arg_part (227)
    on left: 338 339 340 341, on right: 337
scm_function_call (141)
    on left: 46, on right: 26 41 44
score_block (161)
    on left: 133, on right: 14 34 71 111 124
score_body (162)
    on left: 134 135, on right: 133 135 543 566
score_item (163)
    on left: 136 137 138, on right: 140
score_items (164)
    on left: 139 140 142, on right: 134 140 142
script_dir (264)
    on left: 442 443 444, on right: 400 403 404
sequential_music (182)
    on left: 178 179, on right: 220
simple_element (280)
    on left: 482 483, on right: 380
simple_markup (319)
    on left: 564 566 567 568, on right: 533 534 569 570
simple_music (184)
    on left: 182 183 184, on right: 174
simple_revert_context (233)
    on left: 358, on right: 360
simple_string (237)
    on left: 368 369, on right: 176 177 205 206 315 330
simultaneous_music (183)
    on left: 180 181, on right: 219
start_symbol (130)
    on left: 1 3, on right: 0
State 0
State 1
State 10
State 100
State 101
State 102
State 103
State 104
State 105
State 106
State 107
State 108
State 109
State 11
State 110
State 111
State 112
State 113
State 114
State 115
State 116
State 117
State 118
State 119
State 12
State 120
State 121
State 122
State 123
State 124
State 125
State 126
State 127
State 128
State 129
State 13
State 130
State 131
State 132
State 133
State 134
State 135
State 136
State 137
State 138
State 139
State 14
State 140
State 141
State 142
State 143
State 144
State 145
State 146
State 147
State 148
State 149
State 15
State 150
State 151
State 152
State 153
State 154
State 155
State 156
State 157
State 158
State 159
State 16
State 160
State 161
State 162
State 163
State 164
State 165
State 166
State 167
State 168
State 169
State 17
State 170
State 171
State 172
State 173
State 174
State 175
State 176
State 177
State 178
State 179
State 18
State 180
State 181
State 182
State 183
State 184
State 185
State 186
State 187
State 188
State 189
State 19
State 190
State 191
State 192
State 193
State 194
State 195
State 196
State 197
State 198
State 199
State 2
State 20
State 200
State 201
State 202
State 203
State 204
State 205
State 206
State 207
State 208
State 209
State 21
State 210
State 211
State 212
State 213
State 214
State 215
State 216
State 217
State 218
State 219
State 22
State 220
State 221
State 222
State 223
State 224
State 225
State 226
State 227
State 228
State 229
State 23
State 230
State 231
State 232
State 233
State 234
State 235
State 236
State 237
State 238
State 239
State 24
State 240
State 241
State 242
State 243
State 244
State 245
State 246
State 247
State 248
State 249
State 25
State 250
State 251
State 252
State 253
State 254
State 255
State 256
State 257
State 258
State 259
State 26
State 260
State 261
State 262
State 263
State 264
State 265
State 266
State 267
State 268
State 269
State 27
State 270
State 271
State 272
State 273
State 274
State 275
State 276
State 277
State 278
State 279
State 28
State 280
State 281
State 282
State 283
State 284
State 285
State 286
State 287
State 288
State 289
State 29
State 290
State 291
State 292
State 293
State 294
State 295
State 296
State 297
State 298
State 299
State 3
State 30
State 300
State 301
State 302
State 303
State 304
State 305
State 306
State 307
State 308
State 309
State 31
State 310
State 311
State 312
State 313
State 314
State 315
State 316
State 317
State 318
State 319
State 32
State 320
State 321
State 322
State 323
State 324
State 325
State 326
State 327
State 328
State 329
State 33
State 330
State 331
State 332
State 333
State 334
State 335
State 336
State 337
State 338
State 339
State 34
State 340
State 341
State 342
State 343
State 344
State 345
State 346
State 347
State 348
State 349
State 35
State 350
State 351
State 352
State 353
State 354
State 355
State 356
State 357
State 358
State 359
State 36
State 360
State 361
State 362
State 363
State 364
State 365
State 366
State 367
State 368
State 369
State 37
State 370
State 371
State 372
State 373
State 374
State 375
State 376
State 377
State 378
State 379
State 38
State 380
State 381
State 382
State 383
State 384
State 385
State 386
State 387
State 388
State 389
State 39
State 390
State 391
State 392
State 393
State 394
State 395
State 396
State 397
State 398
State 399
State 4
State 40
State 400
State 401
State 402
State 403
State 404
State 405
State 406
State 407
State 408
State 409
State 41
State 410
State 411
State 412
State 413
State 414
State 415
State 416
State 417
State 418
State 419
State 42
State 420
State 421
State 422
State 423
State 424
State 425
State 426
State 427
State 428
State 429
State 43
State 430
State 431
State 432
State 433
State 434
State 435
State 436
State 437
State 438
State 439
State 44
State 440
State 441
State 442
State 443
State 444
State 445
State 446
State 447
State 448
State 449
State 45
State 450
State 451
State 452
State 453
State 454
State 455
State 456
State 457
State 458
State 459
State 46
State 460
State 461
State 462
State 463
State 464
State 465
State 466
State 467
State 468
State 469
State 47
State 470
State 471
State 472
State 473
State 474
State 475
State 476
State 477
State 478
State 479
State 48
State 480
State 481
State 482
State 483
State 484
State 485
State 486
State 487
State 488
State 489
State 49
State 490
State 491
State 492
State 493
State 494
State 495
State 496
State 497
State 498
State 499
State 5
State 50
State 500
State 501
State 502
State 503
State 504
State 505
State 506
State 507
State 508
State 509
State 51
State 510
State 511
State 512
State 513
State 514
State 515
State 516
State 517
State 518
State 519
State 52
State 520
State 521
State 522
State 523
State 524
State 525
State 526
State 527
State 528
State 529
State 53
State 530
State 531
State 532
State 533
State 534
State 535
State 536
State 537
State 538
State 539
State 54
State 540
State 541
State 542
State 543
State 544
State 545
State 546
State 547
State 548
State 549
State 55
State 550
State 551
State 552
State 553
State 554
State 555
State 556
State 557
State 558
State 559
State 56
State 560
State 561
State 562
State 563
State 564
State 565
State 566
State 567
State 568
State 569
State 57
State 570
State 571
State 572
State 573
State 574
State 575
State 576
State 577
State 578
State 579
State 58
State 580
State 581
State 582
State 583
State 584
State 585
State 586
State 587
State 588
State 589
State 59
State 590
State 591
State 592
State 593
State 594
State 595
State 596
State 597
State 598
State 599
State 6
State 60
State 600
State 601
State 602
State 603
State 604
State 605
State 606
State 607
State 608
State 609
State 61
State 610
State 611
State 612
State 613
State 614
State 615
State 616
State 617
State 618
State 619
State 62
State 620
State 621
State 622
State 623
State 624
State 625
State 626
State 627
State 628
State 629
State 63
State 630
State 631
State 632
State 633
State 634
State 635
State 636
State 637
State 638
State 639
State 64
State 640
State 641
State 642
State 643
State 644
State 645
State 646
State 647
State 648
State 649
State 65
State 650
State 651
State 652
State 653
State 654
State 655
State 656
State 657
State 658
State 659
State 66
State 660
State 661
State 662
State 663
State 664
State 665
State 666
State 667
State 668
State 669
State 67
State 670
State 671
State 672
State 673
State 674
State 675
State 676
State 677
State 678
State 679
State 68
State 680
State 681
State 682
State 683
State 684
State 685
State 686
State 687
State 688
State 689
State 69
State 690
State 691
State 692
State 693
State 694
State 695
State 696
State 697
State 698
State 699
State 7
State 70
State 700
State 701
State 702
State 703
State 704
State 705
State 706
State 707
State 708
State 709
State 71
State 710
State 711
State 712
State 713
State 714
State 715
State 716
State 717
State 718
State 719
State 72
State 720
State 721
State 722
State 723
State 724
State 725
State 726
State 727
State 728
State 729
State 73
State 730
State 731
State 732
State 733
State 734
State 735
State 736
State 737
State 738
State 739
State 74
State 740
State 741
State 742
State 743
State 744
State 745
State 746
State 747
State 748
State 749
State 75
State 750
State 751
State 752
State 753
State 754
State 755
State 756
State 757
State 758
State 759
State 76
State 760
State 761
State 762
State 763
State 764
State 765
State 766
State 767
State 768
State 769
State 77
State 770
State 771
State 772
State 773
State 774
State 775
State 776
State 777
State 778
State 779
State 78
State 780
State 781
State 782
State 783
State 784
State 785
State 786
State 787
State 788
State 789
State 79
State 790
State 791
State 792
State 793
State 794
State 795
State 796
State 797
State 798
State 799
State 8
State 80
State 800
State 801
State 802
State 803
State 804
State 805
State 806
State 807
State 808
State 809
State 81
State 810
State 811
State 812
State 813
State 814
State 815
State 816
State 817
State 818
State 819
State 82
State 820
State 821
State 822
State 823
State 824
State 825
State 826
State 827
State 828
State 829
State 83
State 830
State 831
State 832
State 833
State 834
State 835
State 836
State 837
State 838
State 84
State 85
State 86
State 87
State 88
State 89
State 9
State 90
State 91
State 92
State 93
State 94
State 95
State 96
State 97
State 98
State 99
steno_duration (267)
    on left: 448 449, on right: 158 159 450
steno_pitch (257)
    on left: 425, on right: 427
step_number (288)
    on left: 501 502 503, on right: 499 500
step_numbers (287)
    on left: 499 500, on right: 497 500
string (235)
    on left: 363 364, on right: 79 377
string_number_event (250)
    on left: 409, on right: 410
sub_quotes (256)
    on left: 423 424, on right: 419 424
sup_quotes (255)
    on left: 421 422, on right: 420 422
symbol (238)
    on left: 370 371, on right: 198 199 206 330 332 333
symbol_list_arg (198)
    on left: 221 222 223, on right: 246 274 298 336
symbol_list_element (201)
    on left: 228 229 230, on right: 227
symbol_list_part_bare (202)
    on left: 231 232, on right: 68 69 378 379
tempo_event (173)
    on left: 158 159 160, on right: 383
tempo_range (289)
    on left: 504 505, on right: 158 159
text (236)
    on left: 365 366 367, on right: 159 160
tremolo_type (271)
    on left: 456 457, on right: 412
unsigned_number (295)
    on left: 520 521 522, on right: 176 177 504 505

